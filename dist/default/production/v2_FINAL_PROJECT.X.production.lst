

Microchip Technology PIC18 LITE Macro Assembler V1.35 build -356382666 
                                                                                               Mon Mar 19 23:46:17 2018

Microchip Technology Omniscient Code Generator v1.35 (Free mode) build 201507080246
     1                           	processor	18F4331
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1
    31                           	psect	text19,global,reloc=2,class=CODE,delta=1
    32                           	psect	text20,global,reloc=2,class=CODE,delta=1
    33                           	psect	text21,global,reloc=2,class=CODE,delta=1
    34                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    35                           	psect	text23,global,reloc=2,class=CODE,delta=1
    36                           	psect	text24,global,reloc=2,class=CODE,delta=1
    37                           	psect	text25,global,reloc=2,class=CODE,delta=1
    38                           	psect	text26,global,reloc=2,class=CODE,delta=1
    39                           	psect	text27,global,reloc=2,class=CODE,delta=1
    40                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    41                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    42                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    43  0000                     
    44                           	psect	smallconst
    45  000300                     __psmallconst:
    46                           	opt stack 0
    47  000300  00                 	db	0
    48  000301                     _dpowers:
    49                           	opt stack 0
    50  000301  0001               	dw	1
    51  000303  000A               	dw	10
    52  000305  0064               	dw	100
    53  000307  03E8               	dw	1000
    54  000309  2710               	dw	10000
    55  00030B                     __end_of_dpowers:
    56                           	opt stack 0
    57  0000                     _ANSEL0	set	4024
    58  0000                     _ANSEL1	set	4025
    59  0000                     _BAUDCONbits	set	4010
    60  0000                     _CAP1BUFH	set	3945
    61  0000                     _CAP1BUFL	set	3944
    62  0000                     _CAP1CON	set	3939
    63  0000                     _INTCONbits	set	4082
    64  0000                     _LATA	set	3977
    65  0000                     _LATAbits	set	3977
    66  0000                     _LATB	set	3978
    67  0000                     _LATC	set	3979
    68  0000                     _LATCbits	set	3979
    69  0000                     _LATD	set	3980
    70  0000                     _LATDbits	set	3980
    71  0000                     _OSCCON	set	4051
    72  0000                     _OSCCONbits	set	4051
    73  0000                     _PIE1bits	set	3997
    74  0000                     _PIR1bits	set	3998
    75  0000                     _PTCON0	set	3967
    76  0000                     _PTCON1	set	3966
    77  0000                     _PTPERH	set	3962
    78  0000                     _PTPERL	set	3963
    79  0000                     _PWMCON0	set	3951
    80  0000                     _PWMCON1	set	3950
    81  0000                     _RCONbits	set	4048
    82  0000                     _RCREG	set	4014
    83  0000                     _RCSTAbits	set	4011
    84  0000                     _SPBRG	set	4015
    85  0000                     _SPBRGH	set	4016
    86  0000                     _T5CONbits	set	4023
    87  0000                     _TRISA	set	3986
    88  0000                     _TRISAbits	set	3986
    89  0000                     _TRISB	set	3987
    90  0000                     _TRISBbits	set	3987
    91  0000                     _TRISC	set	3988
    92  0000                     _TRISD	set	3989
    93  0000                     _TXSTAbits	set	4012
    94  0000                     _PDC0H	set	3960
    95  0000                     _PDC0L	set	3961
    96  0000                     _PDC1H	set	3958
    97  0000                     _PDC1L	set	3959
    98  00030B                     STR_1:
    99  00030B  49                 	db	73	;'I'
   100  00030C  52                 	db	82	;'R'
   101  00030D  20                 	db	32
   102  00030E  3D                 	db	61	;'='
   103  00030F  20                 	db	32
   104  000310  25                 	db	37
   105  000311  75                 	db	117	;'u'
   106  000312  00                 	db	0
   107                           
   108                           ; #config settings
   109  000313  00                 	db	0	; dummy byte at the end
   110  0000                     
   111                           	psect	cinit
   112  001044                     __pcinit:
   113                           	opt stack 0
   114  001044                     start_initialization:
   115                           	opt stack 0
   116  001044                     __initialization:
   117                           	opt stack 0
   118                           
   119                           ; Clear objects allocated to BANK1 (17 bytes)
   120  001044  EE01  F0D4         	lfsr	0,__pbssBANK1
   121  001048  0E11               	movlw	17
   122  00104A                     clear_0:
   123  00104A  6AEE               	clrf	postinc0,c
   124  00104C  06E8               	decf	wreg,f,c
   125  00104E  E1FD               	bnz	clear_0
   126                           
   127                           ; Clear objects allocated to COMRAM (18 bytes)
   128  001050  EE00  F027         	lfsr	0,__pbssCOMRAM
   129  001054  0E12               	movlw	18
   130  001056                     clear_1:
   131  001056  6AEE               	clrf	postinc0,c
   132  001058  06E8               	decf	wreg,f,c
   133  00105A  E1FD               	bnz	clear_1
   134  00105C                     end_of_initialization:
   135                           	opt stack 0
   136  00105C                     __end_of__initialization:
   137                           	opt stack 0
   138  00105C  9039               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   139  00105E  9239               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   140  001060  0E00               	movlw	low (__Lmediumconst shr (0+16))
   141  001062  6EF8               	movwf	tblptru,c
   142  001064  0100               	movlb	0
   143  001066  EF8A  F001         	goto	_main	;jump to C main() function
   144                           tblptru	equ	0xFF8
   145                           postinc0	equ	0xFEE
   146                           wreg	equ	0xFE8
   147                           
   148                           	psect	bssCOMRAM
   149  000027                     __pbssCOMRAM:
   150                           	opt stack 0
   151  000027                     _motorL:
   152                           	opt stack 0
   153  000027                     	ds	9
   154  000030                     _motorR:
   155                           	opt stack 0
   156  000030                     	ds	9
   157                           tblptru	equ	0xFF8
   158                           postinc0	equ	0xFEE
   159                           wreg	equ	0xFE8
   160                           
   161                           	psect	bssBANK1
   162  0001D4                     __pbssBANK1:
   163                           	opt stack 0
   164  0001D4                     _state:
   165                           	opt stack 0
   166  0001D4                     	ds	1
   167  0001D5                     _buf1:
   168                           	opt stack 0
   169  0001D5                     	ds	16
   170                           tblptru	equ	0xFF8
   171                           postinc0	equ	0xFEE
   172                           wreg	equ	0xFE8
   173                           
   174                           	psect	cstackBANK1
   175  000100                     __pcstackBANK1:
   176                           	opt stack 0
   177  000100                     main@LOG:
   178                           	opt stack 0
   179                           
   180                           ; 200 bytes @ 0x0
   181  000100                     	ds	200
   182  0001C8                     main@num:
   183                           	opt stack 0
   184                           
   185                           ; 2 bytes @ 0xC8
   186  0001C8                     	ds	2
   187  0001CA                     main@counter:
   188                           	opt stack 0
   189                           
   190                           ; 1 bytes @ 0xCA
   191  0001CA                     	ds	1
   192  0001CB                     main@j:
   193                           	opt stack 0
   194                           
   195                           ; 2 bytes @ 0xCB
   196  0001CB                     	ds	2
   197  0001CD                     main@CAP1BUF:
   198                           	opt stack 0
   199                           
   200                           ; 2 bytes @ 0xCD
   201  0001CD                     	ds	2
   202  0001CF                     main@k:
   203                           	opt stack 0
   204                           
   205                           ; 2 bytes @ 0xCF
   206  0001CF                     	ds	2
   207  0001D1                     main@FLIP:
   208                           	opt stack 0
   209                           
   210                           ; 1 bytes @ 0xD1
   211  0001D1                     	ds	1
   212  0001D2                     main@i:
   213                           	opt stack 0
   214                           
   215                           ; 2 bytes @ 0xD2
   216  0001D2                     	ds	2
   217                           tblptru	equ	0xFF8
   218                           postinc0	equ	0xFEE
   219                           wreg	equ	0xFE8
   220                           
   221                           	psect	cstackBANK0
   222  000060                     __pcstackBANK0:
   223                           	opt stack 0
   224  000060                     ??_LCDout:
   225  000060                     ?___wmul:
   226                           	opt stack 0
   227  000060                     ?___lwdiv:
   228                           	opt stack 0
   229  000060                     ___wmul@multiplier:
   230                           	opt stack 0
   231  000060                     ___lwdiv@dividend:
   232                           	opt stack 0
   233                           
   234                           ; 2 bytes @ 0x0
   235  000060                     	ds	1
   236  000061                     LCDout@number:
   237                           	opt stack 0
   238                           
   239                           ; 1 bytes @ 0x1
   240  000061                     	ds	1
   241  000062                     SendLCD@type:
   242                           	opt stack 0
   243  000062                     ___wmul@multiplicand:
   244                           	opt stack 0
   245  000062                     ___lwdiv@divisor:
   246                           	opt stack 0
   247                           
   248                           ; 2 bytes @ 0x2
   249  000062                     	ds	1
   250  000063                     SendLCD@Byte:
   251                           	opt stack 0
   252                           
   253                           ; 1 bytes @ 0x3
   254  000063                     	ds	1
   255  000064                     ??_LCD_Init:
   256  000064                     ??_LCD_Clear:
   257  000064                     SetLine@line:
   258                           	opt stack 0
   259  000064                     ___lwdiv@counter:
   260                           	opt stack 0
   261  000064                     LCD_String@string:
   262                           	opt stack 0
   263  000064                     ___wmul@product:
   264                           	opt stack 0
   265                           
   266                           ; 2 bytes @ 0x4
   267  000064                     	ds	1
   268  000065                     ___lwdiv@quotient:
   269                           	opt stack 0
   270                           
   271                           ; 2 bytes @ 0x5
   272  000065                     	ds	1
   273  000066                     ?___awdiv:
   274                           	opt stack 0
   275  000066                     ___awdiv@dividend:
   276                           	opt stack 0
   277                           
   278                           ; 2 bytes @ 0x6
   279  000066                     	ds	1
   280  000067                     ?___lwmod:
   281                           	opt stack 0
   282  000067                     ___lwmod@dividend:
   283                           	opt stack 0
   284                           
   285                           ; 2 bytes @ 0x7
   286  000067                     	ds	1
   287  000068                     ___awdiv@divisor:
   288                           	opt stack 0
   289                           
   290                           ; 2 bytes @ 0x8
   291  000068                     	ds	1
   292  000069                     ___lwmod@divisor:
   293                           	opt stack 0
   294                           
   295                           ; 2 bytes @ 0x9
   296  000069                     	ds	1
   297  00006A                     ___awdiv@counter:
   298                           	opt stack 0
   299                           
   300                           ; 1 bytes @ 0xA
   301  00006A                     	ds	1
   302  00006B                     ___awdiv@sign:
   303                           	opt stack 0
   304  00006B                     ___lwmod@counter:
   305                           	opt stack 0
   306                           
   307                           ; 1 bytes @ 0xB
   308  00006B                     	ds	1
   309  00006C                     ?_sprintf:
   310                           	opt stack 0
   311  00006C                     sprintf@sp:
   312                           	opt stack 0
   313  00006C                     ___awdiv@quotient:
   314                           	opt stack 0
   315                           
   316                           ; 2 bytes @ 0xC
   317  00006C                     	ds	2
   318  00006E                     setMotorPWM@m:
   319                           	opt stack 0
   320  00006E                     sprintf@f:
   321                           	opt stack 0
   322                           
   323                           ; 2 bytes @ 0xE
   324  00006E                     	ds	2
   325  000070                     ??_setMotorPWM:
   326                           
   327                           ; 0 bytes @ 0x10
   328  000070                     	ds	2
   329  000072                     sprintf@flag:
   330                           	opt stack 0
   331                           
   332                           ; 1 bytes @ 0x12
   333  000072                     	ds	1
   334  000073                     setMotorPWM@PWMduty:
   335                           	opt stack 0
   336  000073                     sprintf@ap:
   337                           	opt stack 0
   338                           
   339                           ; 2 bytes @ 0x13
   340  000073                     	ds	2
   341  000075                     stop@m_L:
   342                           	opt stack 0
   343  000075                     sprintf@val:
   344                           	opt stack 0
   345                           
   346                           ; 2 bytes @ 0x15
   347  000075                     	ds	2
   348  000077                     sprintf@prec:
   349                           	opt stack 0
   350  000077                     stop@m_R:
   351                           	opt stack 0
   352                           
   353                           ; 2 bytes @ 0x17
   354  000077                     	ds	1
   355  000078                     sprintf@c:
   356                           	opt stack 0
   357                           
   358                           ; 1 bytes @ 0x18
   359  000078                     	ds	1
   360  000079                     turnLeft@m_L:
   361                           	opt stack 0
   362  000079                     turnRight@m_L:
   363                           	opt stack 0
   364  000079                     fullSpeedAhead@m_L:
   365                           	opt stack 0
   366  000079                     fullSpeedBack@m_L:
   367                           	opt stack 0
   368                           
   369                           ; 2 bytes @ 0x19
   370  000079                     	ds	2
   371  00007B                     turnLeft@m_R:
   372                           	opt stack 0
   373  00007B                     turnRight@m_R:
   374                           	opt stack 0
   375  00007B                     fullSpeedAhead@m_R:
   376                           	opt stack 0
   377  00007B                     fullSpeedBack@m_R:
   378                           	opt stack 0
   379                           
   380                           ; 2 bytes @ 0x1B
   381  00007B                     	ds	2
   382  00007D                     
   383                           ; 0 bytes @ 0x1D
   384  00007D                     	ds	1
   385  00007E                     ??_main:
   386                           
   387                           ; 0 bytes @ 0x1E
   388  00007E                     	ds	3
   389                           tblptru	equ	0xFF8
   390                           postinc0	equ	0xFEE
   391                           wreg	equ	0xFE8
   392                           
   393                           	psect	cstackCOMRAM
   394  000001                     __pcstackCOMRAM:
   395                           	opt stack 0
   396  000001                     ??i2_LCDout:
   397  000001                     
   398                           ; 1 bytes @ 0x0
   399  000001                     	ds	1
   400  000002                     i2LCDout@number:
   401                           	opt stack 0
   402                           
   403                           ; 1 bytes @ 0x1
   404  000002                     	ds	1
   405  000003                     i2SendLCD@type:
   406                           	opt stack 0
   407                           
   408                           ; 1 bytes @ 0x2
   409  000003                     	ds	1
   410  000004                     i2SendLCD@Byte:
   411                           	opt stack 0
   412                           
   413                           ; 1 bytes @ 0x3
   414  000004                     	ds	1
   415  000005                     i2LCD_String@string:
   416                           	opt stack 0
   417                           
   418                           ; 2 bytes @ 0x4
   419  000005                     	ds	2
   420  000007                     ??_InterruptHandlerHigh:
   421  000007                     
   422                           ; 0 bytes @ 0x6
   423  000007                     	ds	15
   424  000016                     InterruptHandlerHigh@buf:
   425                           	opt stack 0
   426                           
   427                           ; 12 bytes @ 0x15
   428  000016                     	ds	12
   429  000022                     InterruptHandlerHigh@num:
   430                           	opt stack 0
   431                           
   432                           ; 2 bytes @ 0x21
   433  000022                     	ds	2
   434  000024                     InterruptHandlerHigh@RFIDa:
   435                           	opt stack 0
   436                           
   437                           ; 2 bytes @ 0x23
   438  000024                     	ds	2
   439  000026                     InterruptHandlerHigh@counter:
   440                           	opt stack 0
   441                           
   442                           ; 1 bytes @ 0x25
   443  000026                     	ds	1
   444  000027                     tblptru	equ	0xFF8
   445                           postinc0	equ	0xFEE
   446                           wreg	equ	0xFE8
   447                           
   448                           ; 0 bytes @ 0x26
   449 ;;
   450 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   451 ;;
   452 ;; *************** function _main *****************
   453 ;; Defined at:
   454 ;;		line 20 in file "main_1.c"
   455 ;; Parameters:    Size  Location     Type
   456 ;;		None
   457 ;; Auto vars:     Size  Location     Type
   458 ;;  j               2  203[BANK1 ] int 
   459 ;;  num             2  200[BANK1 ] int 
   460 ;;  counter         1  202[BANK1 ] unsigned char 
   461 ;;  k               2  207[BANK1 ] int 
   462 ;;  LOG           200    0[BANK1 ] int [100]
   463 ;;  buf            16    0        unsigned char [16]
   464 ;;  bufr           12    0        unsigned char [12]
   465 ;;  i               2  210[BANK1 ] int 
   466 ;;  CAP1BUF         2  205[BANK1 ] unsigned int 
   467 ;;  FLIP            1  209[BANK1 ] unsigned char 
   468 ;; Return value:  Size  Location     Type
   469 ;;		None               void
   470 ;; Registers used:
   471 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   472 ;; Tracked objects:
   473 ;;		On entry : 0/0
   474 ;;		On exit  : 0/0
   475 ;;		Unchanged: 0/0
   476 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   477 ;;      Params:         0       0       0       0
   478 ;;      Locals:         0       0     212       0
   479 ;;      Temps:          0       3       0       0
   480 ;;      Totals:         0       3     212       0
   481 ;;Total ram usage:      215 bytes
   482 ;; Hardware stack levels required when called:    9
   483 ;; This function calls:
   484 ;;		_LCD_Clear
   485 ;;		_LCD_Init
   486 ;;		_LCD_String
   487 ;;		_SetLine
   488 ;;		_fullSpeedAhead
   489 ;;		_fullSpeedBack
   490 ;;		_initBITS
   491 ;;		_initMotor
   492 ;;		_initPWM
   493 ;;		_sprintf
   494 ;;		_stop
   495 ;;		_turnLeft
   496 ;;		_turnRight
   497 ;; This function is called by:
   498 ;;		Startup code after reset
   499 ;; This function uses a non-reentrant model
   500 ;;
   501                           
   502                           	psect	text0
   503  000314                     __ptext0:
   504                           	opt stack 0
   505  000314                     _main:
   506                           	opt stack 22
   507                           
   508                           ;main_1.c: 31: TRISB = 0;
   509                           
   510                           ;incstack = 0
   511  000314  0E00               	movlw	0
   512  000316  6E93               	movwf	3987,c	;volatile
   513                           
   514                           ;main_1.c: 32: LATB = 0;
   515  000318  0E00               	movlw	0
   516  00031A  6E8A               	movwf	3978,c	;volatile
   517                           
   518                           ;main_1.c: 35: initMotor();
   519  00031C  ECFB  F006         	call	_initMotor	;wreg free
   520                           
   521                           ;main_1.c: 36: initPWM();
   522  000320  EC55  F008         	call	_initPWM	;wreg free
   523                           
   524                           ;main_1.c: 39: RCONbits.IPEN = 1;
   525  000324  8ED0               	bsf	4048,7,c	;volatile
   526                           
   527                           ;main_1.c: 40: INTCONbits.GIEH = 1;
   528  000326  8EF2               	bsf	intcon,7,c	;volatile
   529                           
   530                           ;main_1.c: 41: INTCONbits.GIEL = 1;
   531  000328  8CF2               	bsf	intcon,6,c	;volatile
   532                           
   533                           ;main_1.c: 42: PIE1bits.RCIE = 1;
   534  00032A  8A9D               	bsf	3997,5,c	;volatile
   535                           
   536                           ;main_1.c: 43: INTCONbits.PEIE=1;
   537  00032C  8CF2               	bsf	intcon,6,c	;volatile
   538                           
   539                           ;main_1.c: 45: initBITS();
   540  00032E  EC35  F008         	call	_initBITS	;wreg free
   541                           
   542                           ;main_1.c: 47: char bufr[12];
   543                           ;main_1.c: 50: char buf[16];
   544                           ;main_1.c: 51: OSCCON = 0x72;
   545  000332  0E72               	movlw	114
   546  000334  6ED3               	movwf	4051,c	;volatile
   547  000336                     l235:
   548  000336  A4D3               	btfss	4051,2,c	;volatile
   549  000338  D7FE               	goto	l235
   550                           
   551                           ;main_1.c: 53: LCD_Init();
   552  00033A  EC74  F004         	call	_LCD_Init	;wreg free
   553                           
   554                           ;main_1.c: 56: CAP1CON=0b01000110;
   555  00033E  0E46               	movlw	70
   556  000340  6E63               	movwf	3939,c	;volatile
   557                           
   558                           ;main_1.c: 58: LATA=0;
   559  000342  0E00               	movlw	0
   560  000344  6E89               	movwf	3977,c	;volatile
   561                           
   562                           ;main_1.c: 59: TRISAbits.RA2 = 1;
   563  000346  8492               	bsf	3986,2,c	;volatile
   564                           
   565                           ;main_1.c: 62: T5CONbits.TMR5ON = 1;
   566  000348  80B7               	bsf	4023,0,c	;volatile
   567                           
   568                           ;main_1.c: 63: T5CONbits.T5PS = 0b11;
   569  00034A  0E18               	movlw	24
   570  00034C  12B7               	iorwf	4023,f,c	;volatile
   571                           
   572                           ;main_1.c: 64: T5CONbits.TMR5CS = 0;
   573  00034E  92B7               	bcf	4023,1,c	;volatile
   574                           
   575                           ;main_1.c: 66: ANSEL0=0;
   576  000350  0E00               	movlw	0
   577  000352  6EB8               	movwf	4024,c	;volatile
   578                           
   579                           ;main_1.c: 67: ANSEL1=0;
   580  000354  0E00               	movlw	0
   581  000356  6EB9               	movwf	4025,c	;volatile
   582                           
   583                           ;main_1.c: 69: unsigned int CAP1BUF;
   584                           ;main_1.c: 71: TRISC = 0b11000000;
   585  000358  0EC0               	movlw	192
   586  00035A  6E94               	movwf	3988,c	;volatile
   587                           
   588                           ;main_1.c: 78: int LOG[100];
   589                           ;main_1.c: 80: for ( int k = 0; k < 100; k++ ) {
   590  00035C  0E00               	movlw	0
   591  00035E  0101               	movlb	1	; () banked
   592  000360  6FD0               	movwf	(main@k+1)& (0+255),b
   593  000362  0E00               	movlw	0
   594  000364  6FCF               	movwf	main@k& (0+255),b
   595  000366                     l2368:
   596                           
   597                           ; BSR set to: 1
   598  000366  0101               	movlb	1	; () banked
   599  000368  BFD0               	btfsc	(main@k+1)& (0+255),7,b
   600  00036A  D008               	goto	l2372
   601  00036C  0101               	movlb	1	; () banked
   602  00036E  51D0               	movf	(main@k+1)& (0+255),w,b
   603  000370  E118               	bnz	l2378
   604  000372  0E64               	movlw	100
   605  000374  0101               	movlb	1	; () banked
   606  000376  5DCF               	subwf	main@k& (0+255),w,b
   607  000378  B0D8               	btfsc	status,0,c
   608  00037A  D013               	goto	l2378
   609  00037C                     l2372:
   610                           
   611                           ; BSR set to: 1
   612                           ;main_1.c: 81: LOG[k] = 0;
   613  00037C  90D8               	bcf	status,0,c
   614  00037E  0101               	movlb	1	; () banked
   615  000380  35CF               	rlcf	main@k& (0+255),w,b
   616  000382  6ED9               	movwf	fsr2l,c
   617  000384  0101               	movlb	1	; () banked
   618  000386  35D0               	rlcf	(main@k+1)& (0+255),w,b
   619  000388  6EDA               	movwf	fsr2h,c
   620  00038A  0E00               	movlw	low main@LOG
   621  00038C  26D9               	addwf	fsr2l,f,c
   622  00038E  0E01               	movlw	high main@LOG
   623  000390  22DA               	addwfc	fsr2h,f,c
   624  000392  0E00               	movlw	0
   625  000394  6EDE               	movwf	postinc2,c
   626  000396  0E00               	movlw	0
   627  000398  6EDD               	movwf	postdec2,c
   628                           
   629                           ; BSR set to: 1
   630  00039A  0101               	movlb	1	; () banked
   631  00039C  4BCF               	infsnz	main@k& (0+255),f,b
   632  00039E  2BD0               	incf	(main@k+1)& (0+255),f,b
   633  0003A0  D7E2               	goto	l2368
   634  0003A2                     l2378:
   635                           
   636                           ; BSR set to: 1
   637                           ;main_1.c: 82: }
   638                           ;main_1.c: 84: char FLIP=1;
   639  0003A2  0E01               	movlw	1
   640  0003A4  0101               	movlb	1	; () banked
   641  0003A6  6FD1               	movwf	main@FLIP& (0+255),b
   642                           
   643                           ;main_1.c: 85: signed int i=0;
   644  0003A8  0E00               	movlw	0
   645  0003AA  0101               	movlb	1	; () banked
   646  0003AC  6FD3               	movwf	(main@i+1)& (0+255),b
   647  0003AE  0E00               	movlw	0
   648  0003B0  6FD2               	movwf	main@i& (0+255),b
   649  0003B2                     l240:
   650                           
   651                           ;main_1.c: 89: char counter = 0;
   652  0003B2  0E00               	movlw	0
   653  0003B4  0101               	movlb	1	; () banked
   654  0003B6  6FCA               	movwf	main@counter& (0+255),b
   655                           
   656                           ;main_1.c: 90: int num=0;
   657  0003B8  0E00               	movlw	0
   658  0003BA  0101               	movlb	1	; () banked
   659  0003BC  6FC9               	movwf	(main@num+1)& (0+255),b
   660  0003BE  0E00               	movlw	0
   661  0003C0  6FC8               	movwf	main@num& (0+255),b
   662                           
   663                           ;main_1.c: 92: switch (state) {
   664  0003C2  D0F3               	goto	l2450
   665  0003C4                     l2380:
   666                           
   667                           ; BSR set to: 1
   668                           ;main_1.c: 97: CAP1BUF = (CAP1BUFH << 8) + CAP1BUFL;
   669  0003C4  5069               	movf	3945,w,c	;volatile
   670  0003C6  0100               	movlb	0	; () banked
   671  0003C8  6F7F               	movwf	(??_main+1)& (0+255),b
   672  0003CA  6B7E               	clrf	??_main& (0+255),b
   673  0003CC  5068               	movf	3944,w,c	;volatile
   674  0003CE  0100               	movlb	0	; () banked
   675  0003D0  257E               	addwf	??_main& (0+255),w,b
   676  0003D2  0101               	movlb	1	; () banked
   677  0003D4  6FCD               	movwf	main@CAP1BUF& (0+255),b
   678  0003D6  0E00               	movlw	0
   679  0003D8  0100               	movlb	0	; () banked
   680  0003DA  217F               	addwfc	(??_main+1)& (0+255),w,b
   681  0003DC  0101               	movlb	1	; () banked
   682  0003DE  6FCE               	movwf	(main@CAP1BUF+1)& (0+255),b
   683                           
   684                           ; BSR set to: 1
   685                           ;main_1.c: 99: sprintf(buf1, "IR = %u", CAP1BUF);
   686  0003E0  0ED5               	movlw	low _buf1
   687  0003E2  0100               	movlb	0	; () banked
   688  0003E4  6F6C               	movwf	sprintf@sp& (0+255),b
   689  0003E6  0E01               	movlw	high _buf1
   690  0003E8  0100               	movlb	0	; () banked
   691  0003EA  6F6D               	movwf	(sprintf@sp+1)& (0+255),b
   692  0003EC  0E0B               	movlw	low STR_1
   693  0003EE  0100               	movlb	0	; () banked
   694  0003F0  6F6E               	movwf	sprintf@f& (0+255),b
   695  0003F2  0E03               	movlw	high STR_1
   696  0003F4  0100               	movlb	0	; () banked
   697  0003F6  6F6F               	movwf	(sprintf@f+1)& (0+255),b
   698  0003F8  C1CD  F070         	movff	main@CAP1BUF,?_sprintf+4
   699  0003FC  C1CE  F071         	movff	main@CAP1BUF+1,?_sprintf+5
   700  000400  ECCC  F003         	call	_sprintf	;wreg free
   701                           
   702                           ;main_1.c: 100: SetLine(1);
   703  000404  0E01               	movlw	1
   704  000406  EC8C  F007         	call	_SetLine
   705                           
   706                           ;main_1.c: 101: LCD_Clear();
   707  00040A  EC45  F008         	call	_LCD_Clear	;wreg free
   708                           
   709                           ;main_1.c: 102: LCD_String(buf1);
   710  00040E  0ED5               	movlw	low _buf1
   711  000410  0100               	movlb	0	; () banked
   712  000412  6F64               	movwf	LCD_String@string& (0+255),b
   713  000414  0E01               	movlw	high _buf1
   714  000416  0100               	movlb	0	; () banked
   715  000418  6F65               	movwf	(LCD_String@string+1)& (0+255),b
   716  00041A  ECC4  F007         	call	_LCD_String	;wreg free
   717                           
   718                           ;main_1.c: 108: if (CAP1BUF > 10500 && CAP1BUF < 20000) {
   719  00041E  0E05               	movlw	5
   720  000420  0101               	movlb	1	; () banked
   721  000422  5DCD               	subwf	main@CAP1BUF& (0+255),w,b
   722  000424  0E29               	movlw	41
   723  000426  0101               	movlb	1	; () banked
   724  000428  59CE               	subwfb	(main@CAP1BUF+1)& (0+255),w,b
   725  00042A  A0D8               	btfss	status,0,c
   726  00042C  D01E               	goto	l2404
   727                           
   728                           ; BSR set to: 1
   729  00042E  0E20               	movlw	32
   730  000430  0101               	movlb	1	; () banked
   731  000432  5DCD               	subwf	main@CAP1BUF& (0+255),w,b
   732  000434  0E4E               	movlw	78
   733  000436  0101               	movlb	1	; () banked
   734  000438  59CE               	subwfb	(main@CAP1BUF+1)& (0+255),w,b
   735  00043A  B0D8               	btfsc	status,0,c
   736  00043C  D016               	goto	l2404
   737                           
   738                           ; BSR set to: 1
   739                           ;main_1.c: 109: fullSpeedAhead(&motorL, &motorR);
   740  00043E  0E27               	movlw	low _motorL
   741  000440  0100               	movlb	0	; () banked
   742  000442  6F79               	movwf	fullSpeedAhead@m_L& (0+255),b
   743  000444  0E00               	movlw	high _motorL
   744  000446  0100               	movlb	0	; () banked
   745  000448  6F7A               	movwf	(fullSpeedAhead@m_L+1)& (0+255),b
   746  00044A  0E30               	movlw	low _motorR
   747  00044C  0100               	movlb	0	; () banked
   748  00044E  6F7B               	movwf	fullSpeedAhead@m_R& (0+255),b
   749  000450  0E00               	movlw	high _motorR
   750  000452  0100               	movlb	0	; () banked
   751  000454  6F7C               	movwf	(fullSpeedAhead@m_R+1)& (0+255),b
   752  000456  ECD5  F005         	call	_fullSpeedAhead	;wreg free
   753                           
   754                           ;main_1.c: 112: if (FLIP == 1){
   755  00045A  0101               	movlb	1	; () banked
   756  00045C  05D1               	decf	main@FLIP& (0+255),w,b
   757  00045E  A4D8               	btfss	status,2,c
   758  000460  D01C               	goto	l2412
   759                           
   760                           ; BSR set to: 1
   761                           ;main_1.c: 113: FLIP = 0;
   762  000462  0E00               	movlw	0
   763  000464  0101               	movlb	1	; () banked
   764  000466  6FD1               	movwf	main@FLIP& (0+255),b
   765  000468  D015               	goto	l2410
   766  00046A                     l2404:
   767                           
   768                           ; BSR set to: 1
   769                           ;main_1.c: 121: turnRight(&motorL, &motorR);
   770  00046A  0E27               	movlw	low _motorL
   771  00046C  0100               	movlb	0	; () banked
   772  00046E  6F79               	movwf	turnRight@m_L& (0+255),b
   773  000470  0E00               	movlw	high _motorL
   774  000472  0100               	movlb	0	; () banked
   775  000474  6F7A               	movwf	(turnRight@m_L+1)& (0+255),b
   776  000476  0E30               	movlw	low _motorR
   777  000478  0100               	movlb	0	; () banked
   778  00047A  6F7B               	movwf	turnRight@m_R& (0+255),b
   779  00047C  0E00               	movlw	high _motorR
   780  00047E  0100               	movlb	0	; () banked
   781  000480  6F7C               	movwf	(turnRight@m_R+1)& (0+255),b
   782  000482  EC8D  F006         	call	_turnRight	;wreg free
   783                           
   784                           ;main_1.c: 124: if (FLIP == 0){
   785  000486  0101               	movlb	1	; () banked
   786  000488  51D1               	movf	main@FLIP& (0+255),w,b
   787  00048A  0101               	movlb	1	; () banked
   788  00048C  A4D8               	btfss	status,2,c
   789  00048E  D005               	goto	l2412
   790                           
   791                           ; BSR set to: 1
   792                           ;main_1.c: 125: FLIP = 1;
   793  000490  0E01               	movlw	1
   794  000492  D7E8               	goto	L3
   795  000494                     l2410:
   796                           
   797                           ; BSR set to: 1
   798                           ;main_1.c: 126: i++;
   799  000494  0101               	movlb	1	; () banked
   800  000496  4BD2               	infsnz	main@i& (0+255),f,b
   801  000498  2BD3               	incf	(main@i+1)& (0+255),f,b
   802  00049A                     l2412:
   803                           
   804                           ; BSR set to: 1
   805                           ;main_1.c: 127: }
   806                           ;main_1.c: 129: LOG[i]++;
   807  00049A  90D8               	bcf	status,0,c
   808  00049C  0101               	movlb	1	; () banked
   809  00049E  35D2               	rlcf	main@i& (0+255),w,b
   810  0004A0  6ED9               	movwf	fsr2l,c
   811  0004A2  0101               	movlb	1	; () banked
   812  0004A4  35D3               	rlcf	(main@i+1)& (0+255),w,b
   813  0004A6  6EDA               	movwf	fsr2h,c
   814  0004A8  0E00               	movlw	low main@LOG
   815  0004AA  26D9               	addwf	fsr2l,f,c
   816  0004AC  0E01               	movlw	high main@LOG
   817  0004AE  22DA               	addwfc	fsr2h,f,c
   818  0004B0  2ADE               	incf	postinc2,f,c
   819  0004B2  0E00               	movlw	0
   820  0004B4  22DD               	addwfc	postdec2,f,c
   821                           
   822                           ; BSR set to: 1
   823                           ;main_1.c: 185: break;
   824                           
   825                           ;main_1.c: 145: case 1:
   826                           
   827                           ; BSR set to: 1
   828                           ;main_1.c: 130: }
   829                           ;main_1.c: 143: break;
   830  0004B6  D77D               	goto	l240
   831  0004B8                     l2414:
   832                           
   833                           ; BSR set to: 1
   834  0004B8  0101               	movlb	1	; () banked
   835  0004BA  BFD3               	btfsc	(main@i+1)& (0+255),7,b
   836  0004BC  D064               	goto	l2444
   837                           
   838                           ; BSR set to: 1
   839                           ;main_1.c: 193: for (int j=0; j<LOG[i]; j++ ){
   840                           
   841                           ; BSR set to: 1
   842                           
   843                           ; BSR set to: 1
   844  0004BE  0E00               	movlw	0
   845  0004C0  0101               	movlb	1	; () banked
   846  0004C2  6FCC               	movwf	(main@j+1)& (0+255),b
   847  0004C4  0E00               	movlw	0
   848  0004C6  6FCB               	movwf	main@j& (0+255),b
   849  0004C8  D036               	goto	l2432
   850  0004CA                     l2420:
   851                           
   852                           ;main_1.c: 195: if (FLIP == 0){
   853  0004CA  0101               	movlb	1	; () banked
   854  0004CC  51D1               	movf	main@FLIP& (0+255),w,b
   855  0004CE  0101               	movlb	1	; () banked
   856  0004D0  A4D8               	btfss	status,2,c
   857  0004D2  D017               	goto	l2426
   858                           
   859                           ; BSR set to: 1
   860                           ;main_1.c: 197: fullSpeedBack(&motorL, &motorR);
   861  0004D4  0E27               	movlw	low _motorL
   862  0004D6  0100               	movlb	0	; () banked
   863  0004D8  6F79               	movwf	fullSpeedBack@m_L& (0+255),b
   864  0004DA  0E00               	movlw	high _motorL
   865  0004DC  0100               	movlb	0	; () banked
   866  0004DE  6F7A               	movwf	(fullSpeedBack@m_L+1)& (0+255),b
   867  0004E0  0E30               	movlw	low _motorR
   868  0004E2  0100               	movlb	0	; () banked
   869  0004E4  6F7B               	movwf	fullSpeedBack@m_R& (0+255),b
   870  0004E6  0E00               	movlw	high _motorR
   871  0004E8  0100               	movlb	0	; () banked
   872  0004EA  6F7C               	movwf	(fullSpeedBack@m_R+1)& (0+255),b
   873  0004EC  EC95  F005         	call	_fullSpeedBack	;wreg free
   874                           
   875                           ;main_1.c: 198: _delay((unsigned long)((17)*(8000000/4000.0)));
   876  0004F0  0E2D               	movlw	45
   877  0004F2  0100               	movlb	0	; () banked
   878  0004F4  6F7E               	movwf	??_main& (0+255),b
   879  0004F6  0E26               	movlw	38
   880  0004F8                     u1497:
   881  0004F8  2EE8               	decfsz	wreg,f,c
   882  0004FA  D7FE               	goto	u1497
   883  0004FC  2F7E               	decfsz	??_main& (0+255),f,b
   884  0004FE  D7FC               	goto	u1497
   885  000500  D016               	goto	L1
   886  000502                     l2426:
   887                           
   888                           ;main_1.c: 202: turnLeft(&motorL, &motorR);
   889  000502  0E27               	movlw	low _motorL
   890  000504  0100               	movlb	0	; () banked
   891  000506  6F79               	movwf	turnLeft@m_L& (0+255),b
   892  000508  0E00               	movlw	high _motorL
   893  00050A  0100               	movlb	0	; () banked
   894  00050C  6F7A               	movwf	(turnLeft@m_L+1)& (0+255),b
   895  00050E  0E30               	movlw	low _motorR
   896  000510  0100               	movlb	0	; () banked
   897  000512  6F7B               	movwf	turnLeft@m_R& (0+255),b
   898  000514  0E00               	movlw	high _motorR
   899  000516  0100               	movlb	0	; () banked
   900  000518  6F7C               	movwf	(turnLeft@m_R+1)& (0+255),b
   901  00051A  ECC4  F006         	call	_turnLeft	;wreg free
   902                           
   903                           ;main_1.c: 203: _delay((unsigned long)((17)*(8000000/4000.0)));
   904  00051E  0E2D               	movlw	45
   905  000520  0100               	movlb	0	; () banked
   906  000522  6F7E               	movwf	??_main& (0+255),b
   907  000524  0E26               	movlw	38
   908  000526                     u1507:
   909  000526  2EE8               	decfsz	wreg,f,c
   910  000528  D7FE               	goto	u1507
   911  00052A  2F7E               	decfsz	??_main& (0+255),f,b
   912  00052C  D7FC               	goto	u1507
   913  00052E                     L1:
   914  00052E  D000               	nop2	
   915  000530  0101               	movlb	1	; () banked
   916  000532  4BCB               	infsnz	main@j& (0+255),f,b
   917  000534  2BCC               	incf	(main@j+1)& (0+255),f,b
   918  000536                     l2432:
   919                           
   920                           ; BSR set to: 1
   921  000536  90D8               	bcf	status,0,c
   922  000538  0101               	movlb	1	; () banked
   923  00053A  35D2               	rlcf	main@i& (0+255),w,b
   924  00053C  6ED9               	movwf	fsr2l,c
   925  00053E  0101               	movlb	1	; () banked
   926  000540  35D3               	rlcf	(main@i+1)& (0+255),w,b
   927  000542  6EDA               	movwf	fsr2h,c
   928  000544  0E00               	movlw	low main@LOG
   929  000546  26D9               	addwf	fsr2l,f,c
   930  000548  0E01               	movlw	high main@LOG
   931  00054A  22DA               	addwfc	fsr2h,f,c
   932  00054C  50DE               	movf	postinc2,w,c
   933  00054E  0101               	movlb	1	; () banked
   934  000550  5DCB               	subwf	main@j& (0+255),w,b
   935  000552  0101               	movlb	1	; () banked
   936  000554  51CC               	movf	(main@j+1)& (0+255),w,b
   937  000556  0A80               	xorlw	128
   938  000558  0100               	movlb	0	; () banked
   939  00055A  6F80               	movwf	(??_main+2)& (0+255),b
   940  00055C  50DE               	movf	postinc2,w,c
   941  00055E  0A80               	xorlw	128
   942  000560  0100               	movlb	0	; () banked
   943  000562  5980               	subwfb	(??_main+2)& (0+255),w,b
   944  000564  A0D8               	btfss	status,0,c
   945  000566  D7B1               	goto	l2420
   946                           
   947                           ; BSR set to: 0
   948                           ;main_1.c: 204: }
   949                           ;main_1.c: 206: }
   950                           ;main_1.c: 208: if (FLIP == 0){
   951                           
   952                           ; BSR set to: 0
   953  000568  0101               	movlb	1	; () banked
   954  00056A  51D1               	movf	main@FLIP& (0+255),w,b
   955  00056C  0101               	movlb	1	; () banked
   956  00056E  A4D8               	btfss	status,2,c
   957  000570  D002               	goto	l2438
   958                           
   959                           ; BSR set to: 1
   960                           ;main_1.c: 209: FLIP = 1;
   961  000572  0E01               	movlw	1
   962  000574  D001               	goto	L2
   963  000576                     l2438:
   964                           
   965                           ; BSR set to: 1
   966                           ;main_1.c: 211: FLIP =0;
   967  000576  0E00               	movlw	0
   968  000578                     L2:
   969  000578  0101               	movlb	1	; () banked
   970  00057A  6FD1               	movwf	main@FLIP& (0+255),b
   971                           
   972                           ; BSR set to: 1
   973                           
   974                           ; BSR set to: 1
   975  00057C  0101               	movlb	1	; () banked
   976  00057E  07D2               	decf	main@i& (0+255),f,b
   977  000580  A0D8               	btfss	status,0,c
   978  000582  07D3               	decf	(main@i+1)& (0+255),f,b
   979  000584  D799               	goto	l2414
   980  000586                     l2444:
   981                           
   982                           ; BSR set to: 1
   983                           ;main_1.c: 212: }
   984                           ;main_1.c: 213: }
   985                           ;main_1.c: 217: if (i<0){stop(&motorL, &motorR);}
   986  000586  0101               	movlb	1	; () banked
   987  000588  AFD3               	btfss	(main@i+1)& (0+255),7,b
   988  00058A  D713               	goto	l240
   989                           
   990                           ; BSR set to: 1
   991  00058C  0E27               	movlw	low _motorL
   992  00058E  0100               	movlb	0	; () banked
   993  000590  6F75               	movwf	stop@m_L& (0+255),b
   994  000592  0E00               	movlw	high _motorL
   995  000594  0100               	movlb	0	; () banked
   996  000596  6F76               	movwf	(stop@m_L+1)& (0+255),b
   997  000598  0E30               	movlw	low _motorR
   998  00059A  0100               	movlb	0	; () banked
   999  00059C  6F77               	movwf	stop@m_R& (0+255),b
  1000  00059E  0E00               	movlw	high _motorR
  1001  0005A0  0100               	movlb	0	; () banked
  1002  0005A2  6F78               	movwf	(stop@m_R+1)& (0+255),b
  1003  0005A4  EC61  F007         	call	_stop	;wreg free
  1004                           
  1005                           ;main_1.c: 225: }
  1006                           
  1007                           ;main_1.c: 224: break;
  1008                           
  1009                           ;main_1.c: 221: case 3:
  1010                           
  1011                           ;main_1.c: 219: break;
  1012  0005A8  D704               	goto	l240
  1013  0005AA                     l2450:
  1014  0005AA  0101               	movlb	1	; () banked
  1015  0005AC  51D4               	movf	_state& (0+255),w,b	;volatile
  1016                           
  1017                           ; Switch size 1, requested type "space"
  1018                           ; Number of cases is 4, Range of values is 0 to 3
  1019                           ; switch strategies available:
  1020                           ; Name         Instructions Cycles
  1021                           ; simple_byte           13     7 (average)
  1022                           ;	Chosen strategy is simple_byte
  1023  0005AE  0A00               	xorlw	0	; case 0
  1024  0005B0  B4D8               	btfsc	status,2,c
  1025  0005B2  D708               	goto	l2380
  1026  0005B4  0A01               	xorlw	1	; case 1
  1027  0005B6  B4D8               	btfsc	status,2,c
  1028  0005B8  D6FC               	goto	l240
  1029  0005BA  0A03               	xorlw	3	; case 2
  1030  0005BC  B4D8               	btfsc	status,2,c
  1031  0005BE  D77C               	goto	l2414
  1032  0005C0  0A01               	xorlw	1	; case 3
  1033                           
  1034                           ; BSR set to: 1
  1035                           
  1036                           ; BSR set to: 1
  1037  0005C2  D6F7               	goto	l240
  1038  0005C4                     __end_of_main:
  1039                           	opt stack 0
  1040                           tblptru	equ	0xFF8
  1041                           intcon	equ	0xFF2
  1042                           postinc0	equ	0xFEE
  1043                           wreg	equ	0xFE8
  1044                           postinc2	equ	0xFDE
  1045                           postdec2	equ	0xFDD
  1046                           fsr2h	equ	0xFDA
  1047                           fsr2l	equ	0xFD9
  1048                           status	equ	0xFD8
  1049                           
  1050 ;; *************** function _turnRight *****************
  1051 ;; Defined at:
  1052 ;;		line 128 in file "source_motor_1.c"
  1053 ;; Parameters:    Size  Location     Type
  1054 ;;  m_L             2   25[BANK0 ] PTR struct DC_motor
  1055 ;;		 -> motorL(9), 
  1056 ;;  m_R             2   27[BANK0 ] PTR struct DC_motor
  1057 ;;		 -> motorR(9), 
  1058 ;; Auto vars:     Size  Location     Type
  1059 ;;		None
  1060 ;; Return value:  Size  Location     Type
  1061 ;;		None               void
  1062 ;; Registers used:
  1063 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1064 ;; Tracked objects:
  1065 ;;		On entry : 0/0
  1066 ;;		On exit  : 0/0
  1067 ;;		Unchanged: 0/0
  1068 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1069 ;;      Params:         0       4       0       0
  1070 ;;      Locals:         0       0       0       0
  1071 ;;      Temps:          0       1       0       0
  1072 ;;      Totals:         0       5       0       0
  1073 ;;Total ram usage:        5 bytes
  1074 ;; Hardware stack levels used:    1
  1075 ;; Hardware stack levels required when called:    8
  1076 ;; This function calls:
  1077 ;;		_setMotorPWM
  1078 ;;		_stop
  1079 ;; This function is called by:
  1080 ;;		_main
  1081 ;; This function uses a non-reentrant model
  1082 ;;
  1083                           
  1084                           	psect	text1
  1085  000D1A                     __ptext1:
  1086                           	opt stack 0
  1087  000D1A                     _turnRight:
  1088                           	opt stack 22
  1089                           
  1090                           ;source_motor_1.c: 130: stop(&motorL, &motorR);
  1091                           
  1092                           ; BSR set to: 1
  1093                           ;incstack = 0
  1094  000D1A  0E27               	movlw	low _motorL
  1095  000D1C  0100               	movlb	0	; () banked
  1096  000D1E  6F75               	movwf	stop@m_L& (0+255),b
  1097  000D20  0E00               	movlw	high _motorL
  1098  000D22  0100               	movlb	0	; () banked
  1099  000D24  6F76               	movwf	(stop@m_L+1)& (0+255),b
  1100  000D26  0E30               	movlw	low _motorR
  1101  000D28  0100               	movlb	0	; () banked
  1102  000D2A  6F77               	movwf	stop@m_R& (0+255),b
  1103  000D2C  0E00               	movlw	high _motorR
  1104  000D2E  0100               	movlb	0	; () banked
  1105  000D30  6F78               	movwf	(stop@m_R+1)& (0+255),b
  1106  000D32  EC61  F007         	call	_stop	;wreg free
  1107                           
  1108                           ;source_motor_1.c: 131: m_R->direction = 0;
  1109  000D36  0100               	movlb	0	; () banked
  1110  000D38  EE20 F001          	lfsr	2,1
  1111  000D3C  517B               	movf	turnRight@m_R& (0+255),w,b
  1112  000D3E  26D9               	addwf	fsr2l,f,c
  1113  000D40  517C               	movf	(turnRight@m_R+1)& (0+255),w,b
  1114  000D42  22DA               	addwfc	fsr2h,f,c
  1115  000D44  0E00               	movlw	0
  1116  000D46  6EDF               	movwf	indf2,c
  1117  000D48  D016               	goto	l2230
  1118  000D4A                     l2224:
  1119                           
  1120                           ;source_motor_1.c: 134: setMotorPWM(m_L);
  1121  000D4A  C079  F06E         	movff	turnRight@m_L,setMotorPWM@m
  1122  000D4E  C07A  F06F         	movff	turnRight@m_L+1,setMotorPWM@m+1
  1123  000D52  ECE2  F002         	call	_setMotorPWM	;wreg free
  1124                           
  1125                           ;source_motor_1.c: 135: setMotorPWM(m_R);
  1126  000D56  C07B  F06E         	movff	turnRight@m_R,setMotorPWM@m
  1127  000D5A  C07C  F06F         	movff	turnRight@m_R+1,setMotorPWM@m+1
  1128  000D5E  ECE2  F002         	call	_setMotorPWM	;wreg free
  1129                           
  1130                           ;source_motor_1.c: 136: (m_R->power)++;
  1131  000D62  C07B  FFD9         	movff	turnRight@m_R,fsr2l
  1132  000D66  C07C  FFDA         	movff	turnRight@m_R+1,fsr2h
  1133  000D6A  2ADF               	incf	indf2,f,c
  1134                           
  1135                           ;source_motor_1.c: 137: (m_L->power)++;
  1136  000D6C  C079  FFD9         	movff	turnRight@m_L,fsr2l
  1137  000D70  C07A  FFDA         	movff	turnRight@m_L+1,fsr2h
  1138  000D74  2ADF               	incf	indf2,f,c
  1139  000D76                     l2230:
  1140                           
  1141                           ;source_motor_1.c: 138: _delay((unsigned long)((1)*(8000000/4000000.0)));
  1142  000D76  D000               	nop2		;2 cycle nop
  1143  000D78  C07B  FFD9         	movff	turnRight@m_R,fsr2l
  1144  000D7C  C07C  FFDA         	movff	turnRight@m_R+1,fsr2h
  1145  000D80  0E46               	movlw	70
  1146  000D82  64DF               	cpfsgt	indf2,c
  1147  000D84  D7E2               	goto	l2224
  1148  000D86  0012               	return	
  1149  000D88                     __end_of_turnRight:
  1150                           	opt stack 0
  1151                           tblptru	equ	0xFF8
  1152                           intcon	equ	0xFF2
  1153                           postinc0	equ	0xFEE
  1154                           wreg	equ	0xFE8
  1155                           indf2	equ	0xFDF
  1156                           postinc2	equ	0xFDE
  1157                           postdec2	equ	0xFDD
  1158                           fsr2h	equ	0xFDA
  1159                           fsr2l	equ	0xFD9
  1160                           status	equ	0xFD8
  1161                           
  1162 ;; *************** function _turnLeft *****************
  1163 ;; Defined at:
  1164 ;;		line 100 in file "source_motor_1.c"
  1165 ;; Parameters:    Size  Location     Type
  1166 ;;  m_L             2   25[BANK0 ] PTR struct DC_motor
  1167 ;;		 -> motorL(9), 
  1168 ;;  m_R             2   27[BANK0 ] PTR struct DC_motor
  1169 ;;		 -> motorR(9), 
  1170 ;; Auto vars:     Size  Location     Type
  1171 ;;		None
  1172 ;; Return value:  Size  Location     Type
  1173 ;;		None               void
  1174 ;; Registers used:
  1175 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1176 ;; Tracked objects:
  1177 ;;		On entry : 0/0
  1178 ;;		On exit  : 0/0
  1179 ;;		Unchanged: 0/0
  1180 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1181 ;;      Params:         0       4       0       0
  1182 ;;      Locals:         0       0       0       0
  1183 ;;      Temps:          0       1       0       0
  1184 ;;      Totals:         0       5       0       0
  1185 ;;Total ram usage:        5 bytes
  1186 ;; Hardware stack levels used:    1
  1187 ;; Hardware stack levels required when called:    8
  1188 ;; This function calls:
  1189 ;;		_setMotorPWM
  1190 ;;		_stop
  1191 ;; This function is called by:
  1192 ;;		_main
  1193 ;; This function uses a non-reentrant model
  1194 ;;
  1195                           
  1196                           	psect	text2
  1197  000D88                     __ptext2:
  1198                           	opt stack 0
  1199  000D88                     _turnLeft:
  1200                           	opt stack 22
  1201                           
  1202                           ;source_motor_1.c: 102: stop(&motorL, &motorR);
  1203                           
  1204                           ;incstack = 0
  1205  000D88  0E27               	movlw	low _motorL
  1206  000D8A  0100               	movlb	0	; () banked
  1207  000D8C  6F75               	movwf	stop@m_L& (0+255),b
  1208  000D8E  0E00               	movlw	high _motorL
  1209  000D90  0100               	movlb	0	; () banked
  1210  000D92  6F76               	movwf	(stop@m_L+1)& (0+255),b
  1211  000D94  0E30               	movlw	low _motorR
  1212  000D96  0100               	movlb	0	; () banked
  1213  000D98  6F77               	movwf	stop@m_R& (0+255),b
  1214  000D9A  0E00               	movlw	high _motorR
  1215  000D9C  0100               	movlb	0	; () banked
  1216  000D9E  6F78               	movwf	(stop@m_R+1)& (0+255),b
  1217  000DA0  EC61  F007         	call	_stop	;wreg free
  1218                           
  1219                           ;source_motor_1.c: 103: m_L->direction = 0;
  1220  000DA4  0100               	movlb	0	; () banked
  1221  000DA6  EE20 F001          	lfsr	2,1
  1222  000DAA  5179               	movf	turnLeft@m_L& (0+255),w,b
  1223  000DAC  26D9               	addwf	fsr2l,f,c
  1224  000DAE  517A               	movf	(turnLeft@m_L+1)& (0+255),w,b
  1225  000DB0  22DA               	addwfc	fsr2h,f,c
  1226  000DB2  0E00               	movlw	0
  1227  000DB4  6EDF               	movwf	indf2,c
  1228  000DB6  D016               	goto	l2214
  1229  000DB8                     l2208:
  1230                           
  1231                           ;source_motor_1.c: 106: setMotorPWM(m_L);
  1232  000DB8  C079  F06E         	movff	turnLeft@m_L,setMotorPWM@m
  1233  000DBC  C07A  F06F         	movff	turnLeft@m_L+1,setMotorPWM@m+1
  1234  000DC0  ECE2  F002         	call	_setMotorPWM	;wreg free
  1235                           
  1236                           ;source_motor_1.c: 107: setMotorPWM(m_R);
  1237  000DC4  C07B  F06E         	movff	turnLeft@m_R,setMotorPWM@m
  1238  000DC8  C07C  F06F         	movff	turnLeft@m_R+1,setMotorPWM@m+1
  1239  000DCC  ECE2  F002         	call	_setMotorPWM	;wreg free
  1240                           
  1241                           ;source_motor_1.c: 108: (m_R->power)++;
  1242  000DD0  C07B  FFD9         	movff	turnLeft@m_R,fsr2l
  1243  000DD4  C07C  FFDA         	movff	turnLeft@m_R+1,fsr2h
  1244  000DD8  2ADF               	incf	indf2,f,c
  1245                           
  1246                           ;source_motor_1.c: 109: (m_L->power)++;
  1247  000DDA  C079  FFD9         	movff	turnLeft@m_L,fsr2l
  1248  000DDE  C07A  FFDA         	movff	turnLeft@m_L+1,fsr2h
  1249  000DE2  2ADF               	incf	indf2,f,c
  1250  000DE4                     l2214:
  1251                           
  1252                           ;source_motor_1.c: 110: _delay((unsigned long)((1)*(8000000/4000000.0)));
  1253  000DE4  D000               	nop2		;2 cycle nop
  1254  000DE6  C079  FFD9         	movff	turnLeft@m_L,fsr2l
  1255  000DEA  C07A  FFDA         	movff	turnLeft@m_L+1,fsr2h
  1256  000DEE  0E41               	movlw	65
  1257  000DF0  64DF               	cpfsgt	indf2,c
  1258  000DF2  D7E2               	goto	l2208
  1259  000DF4  0012               	return	
  1260  000DF6                     __end_of_turnLeft:
  1261                           	opt stack 0
  1262                           tblptru	equ	0xFF8
  1263                           intcon	equ	0xFF2
  1264                           postinc0	equ	0xFEE
  1265                           wreg	equ	0xFE8
  1266                           indf2	equ	0xFDF
  1267                           postinc2	equ	0xFDE
  1268                           postdec2	equ	0xFDD
  1269                           fsr2h	equ	0xFDA
  1270                           fsr2l	equ	0xFD9
  1271                           status	equ	0xFD8
  1272                           
  1273 ;; *************** function _sprintf *****************
  1274 ;; Defined at:
  1275 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\doprnt.c"
  1276 ;; Parameters:    Size  Location     Type
  1277 ;;  sp              2   12[BANK0 ] PTR unsigned char 
  1278 ;;		 -> buf1(16), 
  1279 ;;  f               2   14[BANK0 ] PTR const unsigned char 
  1280 ;;		 -> STR_1(8), 
  1281 ;; Auto vars:     Size  Location     Type
  1282 ;;  tmpval          4    0        struct .
  1283 ;;  cp              3    0        PTR const unsigned char 
  1284 ;;  val             2   21[BANK0 ] unsigned int 
  1285 ;;  ap              2   19[BANK0 ] PTR void [1]
  1286 ;;		 -> ?_sprintf(2), 
  1287 ;;  len             2    0        unsigned int 
  1288 ;;  c               1   24[BANK0 ] char 
  1289 ;;  prec            1   23[BANK0 ] char 
  1290 ;;  flag            1   18[BANK0 ] unsigned char 
  1291 ;; Return value:  Size  Location     Type
  1292 ;;                  2   12[BANK0 ] int 
  1293 ;; Registers used:
  1294 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1295 ;; Tracked objects:
  1296 ;;		On entry : 0/0
  1297 ;;		On exit  : 0/0
  1298 ;;		Unchanged: 0/0
  1299 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1300 ;;      Params:         0       6       0       0
  1301 ;;      Locals:         0       7       0       0
  1302 ;;      Temps:          0       0       0       0
  1303 ;;      Totals:         0      13       0       0
  1304 ;;Total ram usage:       13 bytes
  1305 ;; Hardware stack levels used:    1
  1306 ;; Hardware stack levels required when called:    6
  1307 ;; This function calls:
  1308 ;;		___lwdiv
  1309 ;;		___lwmod
  1310 ;; This function is called by:
  1311 ;;		_main
  1312 ;; This function uses a non-reentrant model
  1313 ;;
  1314                           
  1315                           	psect	text3
  1316  000798                     __ptext3:
  1317                           	opt stack 0
  1318  000798                     _sprintf:
  1319                           	opt stack 24
  1320                           
  1321                           ;doprnt.c: 494: va_list ap;
  1322                           ;doprnt.c: 499: signed char c;
  1323                           ;doprnt.c: 506: signed char prec;
  1324                           ;doprnt.c: 508: unsigned char flag;
  1325                           ;doprnt.c: 523: union {
  1326                           ;doprnt.c: 524: unsigned long vd;
  1327                           ;doprnt.c: 525: double integ;
  1328                           ;doprnt.c: 526: } tmpval;
  1329                           ;doprnt.c: 528: unsigned int val;
  1330                           ;doprnt.c: 529: unsigned len;
  1331                           ;doprnt.c: 530: const char * cp;
  1332                           ;doprnt.c: 533: *ap = __va_start();
  1333                           
  1334                           ;incstack = 0
  1335  000798  0E70               	movlw	low (?_sprintf+4)
  1336  00079A  0100               	movlb	0	; () banked
  1337  00079C  6F73               	movwf	sprintf@ap& (0+255),b
  1338  00079E  0E00               	movlw	high (?_sprintf+4)
  1339  0007A0  0100               	movlb	0	; () banked
  1340  0007A2  6F74               	movwf	(sprintf@ap+1)& (0+255),b
  1341                           
  1342                           ;doprnt.c: 536: while(c = *f++) {
  1343  0007A4  D08C               	goto	l2312
  1344  0007A6                     l2272:
  1345                           
  1346                           ; BSR set to: 0
  1347                           ;doprnt.c: 538: if(c != '%')
  1348  0007A6  0E25               	movlw	37
  1349  0007A8  0100               	movlb	0	; () banked
  1350  0007AA  1978               	xorwf	sprintf@c& (0+255),w,b
  1351  0007AC  B4D8               	btfsc	status,2,c
  1352  0007AE  D00A               	goto	l2278
  1353                           
  1354                           ; BSR set to: 0
  1355                           ;doprnt.c: 540: {
  1356                           ;doprnt.c: 541: ((*sp++ = (c)));
  1357  0007B0  C06C  FFD9         	movff	sprintf@sp,fsr2l
  1358  0007B4  C06D  FFDA         	movff	sprintf@sp+1,fsr2h
  1359  0007B8  C078  FFDF         	movff	sprintf@c,indf2
  1360                           
  1361                           ; BSR set to: 0
  1362  0007BC  0100               	movlb	0	; () banked
  1363  0007BE  4B6C               	infsnz	sprintf@sp& (0+255),f,b
  1364  0007C0  2B6D               	incf	(sprintf@sp+1)& (0+255),f,b
  1365                           
  1366                           ;doprnt.c: 542: continue;
  1367  0007C2  D07D               	goto	l2312
  1368  0007C4                     l2278:
  1369                           
  1370                           ; BSR set to: 0
  1371                           ;doprnt.c: 543: }
  1372                           ;doprnt.c: 548: flag = 0;
  1373  0007C4  0E00               	movlw	0
  1374  0007C6  0100               	movlb	0	; () banked
  1375  0007C8  6F72               	movwf	sprintf@flag& (0+255),b
  1376                           
  1377                           ;doprnt.c: 635: switch(c = *f++) {
  1378  0007CA  D004               	goto	l2284
  1379  0007CC                     l2280:
  1380                           
  1381                           ; BSR set to: 0
  1382                           ;doprnt.c: 818: flag |= 0xC0;
  1383  0007CC  0EC0               	movlw	192
  1384  0007CE  0100               	movlb	0	; () banked
  1385  0007D0  1372               	iorwf	sprintf@flag& (0+255),f,b
  1386                           
  1387                           ; BSR set to: 0
  1388                           ;doprnt.c: 822: }
  1389                           
  1390                           ;doprnt.c: 819: break;
  1391  0007D2  D013               	goto	l2286
  1392  0007D4                     l2284:
  1393                           
  1394                           ; BSR set to: 0
  1395  0007D4  C06E  FFF6         	movff	sprintf@f,tblptrl
  1396  0007D8  C06F  FFF7         	movff	sprintf@f+1,tblptrh
  1397  0007DC  0100               	movlb	0	; () banked
  1398  0007DE  4B6E               	infsnz	sprintf@f& (0+255),f,b
  1399  0007E0  2B6F               	incf	(sprintf@f+1)& (0+255),f,b
  1400  0007E2                     	if	0	;tblptru may be non-zero
  1401  0007E2                     	endif
  1402  0007E2                     	if	0	;tblptru may be non-zero
  1403  0007E2                     	endif
  1404  0007E2  0008               	tblrd		*
  1405  0007E4  CFF5 F078          	movff	tablat,sprintf@c
  1406  0007E8  0100               	movlb	0	; () banked
  1407  0007EA  5178               	movf	sprintf@c& (0+255),w,b
  1408                           
  1409                           ; Switch size 1, requested type "space"
  1410                           ; Number of cases is 2, Range of values is 0 to 117
  1411                           ; switch strategies available:
  1412                           ; Name         Instructions Cycles
  1413                           ; simple_byte            7     4 (average)
  1414                           ;	Chosen strategy is simple_byte
  1415  0007EC  0A00               	xorlw	0	; case 0
  1416  0007EE  B4D8               	btfsc	status,2,c
  1417  0007F0  D074               	goto	l2314
  1418  0007F2  0A75               	xorlw	117	; case 117
  1419  0007F4  B4D8               	btfsc	status,2,c
  1420  0007F6  D7EA               	goto	l2280
  1421  0007F8  D062               	goto	l2312
  1422  0007FA                     l2286:
  1423                           
  1424                           ; BSR set to: 0
  1425                           ;doprnt.c: 1273: {
  1426                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  1427  0007FA  C073  FFD9         	movff	sprintf@ap,fsr2l
  1428  0007FE  C074  FFDA         	movff	sprintf@ap+1,fsr2h
  1429  000802  CFDE F075          	movff	postinc2,sprintf@val
  1430  000806  CFDD F076          	movff	postdec2,sprintf@val+1
  1431                           
  1432                           ; BSR set to: 0
  1433  00080A  0E02               	movlw	2
  1434  00080C  0100               	movlb	0	; () banked
  1435  00080E  2773               	addwf	sprintf@ap& (0+255),f,b
  1436  000810  0E00               	movlw	0
  1437  000812  2374               	addwfc	(sprintf@ap+1)& (0+255),f,b
  1438                           
  1439                           ; BSR set to: 0
  1440                           ;doprnt.c: 1287: }
  1441                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  1442  000814  0E01               	movlw	1
  1443  000816  0100               	movlb	0	; () banked
  1444  000818  6F78               	movwf	sprintf@c& (0+255),b
  1445  00081A                     l2292:
  1446                           
  1447                           ; BSR set to: 0
  1448  00081A  0E05               	movlw	5
  1449  00081C  0100               	movlb	0	; () banked
  1450  00081E  1978               	xorwf	sprintf@c& (0+255),w,b
  1451  000820  B4D8               	btfsc	status,2,c
  1452  000822  D016               	goto	l290
  1453                           
  1454                           ; BSR set to: 0
  1455                           ;doprnt.c: 1306: if(val < dpowers[c])
  1456                           
  1457                           ; BSR set to: 0
  1458                           
  1459                           ; BSR set to: 0
  1460  000824  0100               	movlb	0	; () banked
  1461  000826  5178               	movf	sprintf@c& (0+255),w,b
  1462  000828  0D02               	mullw	2
  1463  00082A  0E01               	movlw	low _dpowers
  1464  00082C  24F3               	addwf	prodl,w,c
  1465  00082E  6EF6               	movwf	tblptrl,c
  1466  000830  0E03               	movlw	high _dpowers
  1467  000832  20F4               	addwfc	prodh,w,c
  1468  000834  6EF7               	movwf	tblptrh,c
  1469  000836                     	if	0	;There are less than 3 active tblptr bytes
  1470  000836                     	endif
  1471  000836  0009               	tblrd		*+
  1472  000838  50F5               	movf	tablat,w,c
  1473  00083A  0100               	movlb	0	; () banked
  1474  00083C  5D75               	subwf	sprintf@val& (0+255),w,b
  1475  00083E  0009               	tblrd		*+
  1476  000840  50F5               	movf	tablat,w,c
  1477  000842  0100               	movlb	0	; () banked
  1478  000844  5976               	subwfb	(sprintf@val+1)& (0+255),w,b
  1479  000846  A0D8               	btfss	status,0,c
  1480  000848  D003               	goto	l290
  1481                           
  1482                           ; BSR set to: 0
  1483                           
  1484                           ; BSR set to: 0
  1485                           
  1486                           ; BSR set to: 0
  1487                           ;doprnt.c: 1307: break;
  1488  00084A  0100               	movlb	0	; () banked
  1489  00084C  2B78               	incf	sprintf@c& (0+255),f,b
  1490  00084E  D7E5               	goto	l2292
  1491  000850                     l290:
  1492                           
  1493                           ; BSR set to: 0
  1494                           ;doprnt.c: 1422: {
  1495                           ;doprnt.c: 1469: }
  1496                           ;doprnt.c: 1472: prec = c;
  1497  000850  C078  F077         	movff	sprintf@c,sprintf@prec
  1498                           
  1499                           ;doprnt.c: 1474: while(prec--) {
  1500  000854  D02E               	goto	l2310
  1501  000856                     l2304:
  1502                           
  1503                           ; BSR set to: 0
  1504                           ;doprnt.c: 1478: {
  1505                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  1506  000856  0100               	movlb	0	; () banked
  1507  000858  5177               	movf	sprintf@prec& (0+255),w,b
  1508  00085A  0D02               	mullw	2
  1509  00085C  0E01               	movlw	low _dpowers
  1510  00085E  24F3               	addwf	prodl,w,c
  1511  000860  6EF6               	movwf	tblptrl,c
  1512  000862  0E03               	movlw	high _dpowers
  1513  000864  20F4               	addwfc	prodh,w,c
  1514  000866  6EF7               	movwf	tblptrh,c
  1515  000868                     	if	0	;There are less than 3 active tblptr bytes
  1516  000868                     	endif
  1517  000868  0009               	tblrd		*+
  1518  00086A  CFF5 F062          	movff	tablat,___lwdiv@divisor
  1519  00086E  000A               	tblrd		*-
  1520  000870  CFF5 F063          	movff	tablat,___lwdiv@divisor+1
  1521  000874  C075  F060         	movff	sprintf@val,___lwdiv@dividend
  1522  000878  C076  F061         	movff	sprintf@val+1,___lwdiv@dividend+1
  1523  00087C  EC15  F006         	call	___lwdiv	;wreg free
  1524  000880  C060  F067         	movff	?___lwdiv,___lwmod@dividend
  1525  000884  C061  F068         	movff	?___lwdiv+1,___lwmod@dividend+1
  1526  000888  0E00               	movlw	0
  1527  00088A  0100               	movlb	0	; () banked
  1528  00088C  6F6A               	movwf	(___lwmod@divisor+1)& (0+255),b
  1529  00088E  0E0A               	movlw	10
  1530  000890  6F69               	movwf	___lwmod@divisor& (0+255),b
  1531  000892  EC30  F007         	call	___lwmod	;wreg free
  1532  000896  0100               	movlb	0	; () banked
  1533  000898  5167               	movf	?___lwmod& (0+255),w,b
  1534  00089A  0F30               	addlw	48
  1535  00089C  0100               	movlb	0	; () banked
  1536  00089E  6F78               	movwf	sprintf@c& (0+255),b
  1537                           
  1538                           ; BSR set to: 0
  1539                           ;doprnt.c: 1523: }
  1540                           ;doprnt.c: 1524: ((*sp++ = (c)));
  1541  0008A0  C06C  FFD9         	movff	sprintf@sp,fsr2l
  1542  0008A4  C06D  FFDA         	movff	sprintf@sp+1,fsr2h
  1543  0008A8  C078  FFDF         	movff	sprintf@c,indf2
  1544                           
  1545                           ; BSR set to: 0
  1546  0008AC  0100               	movlb	0	; () banked
  1547  0008AE  4B6C               	infsnz	sprintf@sp& (0+255),f,b
  1548  0008B0  2B6D               	incf	(sprintf@sp+1)& (0+255),f,b
  1549  0008B2                     l2310:
  1550                           
  1551                           ; BSR set to: 0
  1552  0008B2  0100               	movlb	0	; () banked
  1553  0008B4  0777               	decf	sprintf@prec& (0+255),f,b
  1554  0008B6  0100               	movlb	0	; () banked
  1555  0008B8  2977               	incf	sprintf@prec& (0+255),w,b
  1556  0008BA  A4D8               	btfss	status,2,c
  1557  0008BC  D7CC               	goto	l2304
  1558  0008BE                     l2312:
  1559                           
  1560                           ; BSR set to: 0
  1561  0008BE  C06E  FFF6         	movff	sprintf@f,tblptrl
  1562  0008C2  C06F  FFF7         	movff	sprintf@f+1,tblptrh
  1563  0008C6  0100               	movlb	0	; () banked
  1564  0008C8  4B6E               	infsnz	sprintf@f& (0+255),f,b
  1565  0008CA  2B6F               	incf	(sprintf@f+1)& (0+255),f,b
  1566  0008CC                     	if	0	;tblptru may be non-zero
  1567  0008CC                     	endif
  1568  0008CC                     	if	0	;tblptru may be non-zero
  1569  0008CC                     	endif
  1570  0008CC  0008               	tblrd		*
  1571  0008CE  CFF5 F078          	movff	tablat,sprintf@c
  1572  0008D2  0100               	movlb	0	; () banked
  1573  0008D4  5178               	movf	sprintf@c& (0+255),w,b
  1574  0008D6  A4D8               	btfss	status,2,c
  1575  0008D8  D766               	goto	l2272
  1576  0008DA                     l2314:
  1577                           
  1578                           ; BSR set to: 0
  1579                           ;doprnt.c: 1538: *sp = 0;
  1580  0008DA  C06C  FFD9         	movff	sprintf@sp,fsr2l
  1581  0008DE  C06D  FFDA         	movff	sprintf@sp+1,fsr2h
  1582  0008E2  0E00               	movlw	0
  1583  0008E4  6EDF               	movwf	indf2,c
  1584  0008E6  0012               	return	
  1585  0008E8                     __end_of_sprintf:
  1586                           	opt stack 0
  1587                           tblptru	equ	0xFF8
  1588                           tblptrh	equ	0xFF7
  1589                           tblptrl	equ	0xFF6
  1590                           tablat	equ	0xFF5
  1591                           prodh	equ	0xFF4
  1592                           prodl	equ	0xFF3
  1593                           intcon	equ	0xFF2
  1594                           postinc0	equ	0xFEE
  1595                           wreg	equ	0xFE8
  1596                           indf2	equ	0xFDF
  1597                           postinc2	equ	0xFDE
  1598                           postdec2	equ	0xFDD
  1599                           fsr2h	equ	0xFDA
  1600                           fsr2l	equ	0xFD9
  1601                           status	equ	0xFD8
  1602                           
  1603 ;; *************** function ___lwmod *****************
  1604 ;; Defined at:
  1605 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lwmod.c"
  1606 ;; Parameters:    Size  Location     Type
  1607 ;;  dividend        2    7[BANK0 ] unsigned int 
  1608 ;;  divisor         2    9[BANK0 ] unsigned int 
  1609 ;; Auto vars:     Size  Location     Type
  1610 ;;  counter         1   11[BANK0 ] unsigned char 
  1611 ;; Return value:  Size  Location     Type
  1612 ;;                  2    7[BANK0 ] unsigned int 
  1613 ;; Registers used:
  1614 ;;		wreg, status,2, status,0
  1615 ;; Tracked objects:
  1616 ;;		On entry : 0/0
  1617 ;;		On exit  : 0/0
  1618 ;;		Unchanged: 0/0
  1619 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1620 ;;      Params:         0       4       0       0
  1621 ;;      Locals:         0       1       0       0
  1622 ;;      Temps:          0       0       0       0
  1623 ;;      Totals:         0       5       0       0
  1624 ;;Total ram usage:        5 bytes
  1625 ;; Hardware stack levels used:    1
  1626 ;; Hardware stack levels required when called:    5
  1627 ;; This function calls:
  1628 ;;		Nothing
  1629 ;; This function is called by:
  1630 ;;		_sprintf
  1631 ;; This function uses a non-reentrant model
  1632 ;;
  1633                           
  1634                           	psect	text4
  1635  000E60                     __ptext4:
  1636                           	opt stack 0
  1637  000E60                     ___lwmod:
  1638                           	opt stack 24
  1639                           
  1640                           ; BSR set to: 0
  1641                           ;incstack = 0
  1642  000E60  0100               	movlb	0	; () banked
  1643  000E62  5169               	movf	___lwmod@divisor& (0+255),w,b
  1644  000E64  0100               	movlb	0	; () banked
  1645  000E66  116A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  1646  000E68  B4D8               	btfsc	status,2,c
  1647  000E6A  D026               	goto	l709
  1648                           
  1649                           ; BSR set to: 0
  1650  000E6C  0E01               	movlw	1
  1651  000E6E  0100               	movlb	0	; () banked
  1652  000E70  6F6B               	movwf	___lwmod@counter& (0+255),b
  1653  000E72  D006               	goto	l2118
  1654  000E74                     l2116:
  1655                           
  1656                           ; BSR set to: 0
  1657  000E74  0100               	movlb	0	; () banked
  1658  000E76  90D8               	bcf	status,0,c
  1659  000E78  3769               	rlcf	___lwmod@divisor& (0+255),f,b
  1660  000E7A  376A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  1661  000E7C  0100               	movlb	0	; () banked
  1662  000E7E  2B6B               	incf	___lwmod@counter& (0+255),f,b
  1663  000E80                     l2118:
  1664                           
  1665                           ; BSR set to: 0
  1666  000E80  0100               	movlb	0	; () banked
  1667  000E82  AF6A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  1668  000E84  D7F7               	goto	l2116
  1669  000E86                     l2120:
  1670                           
  1671                           ; BSR set to: 0
  1672  000E86  0100               	movlb	0	; () banked
  1673  000E88  5169               	movf	___lwmod@divisor& (0+255),w,b
  1674  000E8A  0100               	movlb	0	; () banked
  1675  000E8C  5D67               	subwf	___lwmod@dividend& (0+255),w,b
  1676  000E8E  0100               	movlb	0	; () banked
  1677  000E90  516A               	movf	(___lwmod@divisor+1)& (0+255),w,b
  1678  000E92  0100               	movlb	0	; () banked
  1679  000E94  5968               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  1680  000E96  A0D8               	btfss	status,0,c
  1681  000E98  D008               	goto	l2124
  1682                           
  1683                           ; BSR set to: 0
  1684  000E9A  0100               	movlb	0	; () banked
  1685  000E9C  5169               	movf	___lwmod@divisor& (0+255),w,b
  1686  000E9E  0100               	movlb	0	; () banked
  1687  000EA0  5F67               	subwf	___lwmod@dividend& (0+255),f,b
  1688  000EA2  0100               	movlb	0	; () banked
  1689  000EA4  516A               	movf	(___lwmod@divisor+1)& (0+255),w,b
  1690  000EA6  0100               	movlb	0	; () banked
  1691  000EA8  5B68               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  1692  000EAA                     l2124:
  1693                           
  1694                           ; BSR set to: 0
  1695  000EAA  0100               	movlb	0	; () banked
  1696  000EAC  90D8               	bcf	status,0,c
  1697  000EAE  336A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  1698  000EB0  3369               	rrcf	___lwmod@divisor& (0+255),f,b
  1699                           
  1700                           ; BSR set to: 0
  1701  000EB2  0100               	movlb	0	; () banked
  1702  000EB4  2F6B               	decfsz	___lwmod@counter& (0+255),f,b
  1703  000EB6  D7E7               	goto	l2120
  1704  000EB8                     l709:
  1705                           
  1706                           ; BSR set to: 0
  1707  000EB8  C067  F067         	movff	___lwmod@dividend,?___lwmod
  1708  000EBC  C068  F068         	movff	___lwmod@dividend+1,?___lwmod+1
  1709                           
  1710                           ; BSR set to: 0
  1711  000EC0  0012               	return		;funcret
  1712  000EC2                     __end_of___lwmod:
  1713                           	opt stack 0
  1714                           tblptru	equ	0xFF8
  1715                           tblptrh	equ	0xFF7
  1716                           tblptrl	equ	0xFF6
  1717                           tablat	equ	0xFF5
  1718                           prodh	equ	0xFF4
  1719                           prodl	equ	0xFF3
  1720                           intcon	equ	0xFF2
  1721                           postinc0	equ	0xFEE
  1722                           wreg	equ	0xFE8
  1723                           indf2	equ	0xFDF
  1724                           postinc2	equ	0xFDE
  1725                           postdec2	equ	0xFDD
  1726                           fsr2h	equ	0xFDA
  1727                           fsr2l	equ	0xFD9
  1728                           status	equ	0xFD8
  1729                           
  1730 ;; *************** function ___lwdiv *****************
  1731 ;; Defined at:
  1732 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lwdiv.c"
  1733 ;; Parameters:    Size  Location     Type
  1734 ;;  dividend        2    0[BANK0 ] unsigned int 
  1735 ;;  divisor         2    2[BANK0 ] unsigned int 
  1736 ;; Auto vars:     Size  Location     Type
  1737 ;;  quotient        2    5[BANK0 ] unsigned int 
  1738 ;;  counter         1    4[BANK0 ] unsigned char 
  1739 ;; Return value:  Size  Location     Type
  1740 ;;                  2    0[BANK0 ] unsigned int 
  1741 ;; Registers used:
  1742 ;;		wreg, status,2, status,0
  1743 ;; Tracked objects:
  1744 ;;		On entry : 0/0
  1745 ;;		On exit  : 0/0
  1746 ;;		Unchanged: 0/0
  1747 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1748 ;;      Params:         0       4       0       0
  1749 ;;      Locals:         0       3       0       0
  1750 ;;      Temps:          0       0       0       0
  1751 ;;      Totals:         0       7       0       0
  1752 ;;Total ram usage:        7 bytes
  1753 ;; Hardware stack levels used:    1
  1754 ;; Hardware stack levels required when called:    5
  1755 ;; This function calls:
  1756 ;;		Nothing
  1757 ;; This function is called by:
  1758 ;;		_sprintf
  1759 ;; This function uses a non-reentrant model
  1760 ;;
  1761                           
  1762                           	psect	text5
  1763  000C2A                     __ptext5:
  1764                           	opt stack 0
  1765  000C2A                     ___lwdiv:
  1766                           	opt stack 24
  1767                           
  1768                           ; BSR set to: 0
  1769                           ;incstack = 0
  1770  000C2A  0E00               	movlw	0
  1771  000C2C  0100               	movlb	0	; () banked
  1772  000C2E  6F66               	movwf	(___lwdiv@quotient+1)& (0+255),b
  1773  000C30  0E00               	movlw	0
  1774  000C32  6F65               	movwf	___lwdiv@quotient& (0+255),b
  1775                           
  1776                           ; BSR set to: 0
  1777  000C34  0100               	movlb	0	; () banked
  1778  000C36  5162               	movf	___lwdiv@divisor& (0+255),w,b
  1779  000C38  0100               	movlb	0	; () banked
  1780  000C3A  1163               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  1781  000C3C  B4D8               	btfsc	status,2,c
  1782  000C3E  D02C               	goto	l699
  1783                           
  1784                           ; BSR set to: 0
  1785  000C40  0E01               	movlw	1
  1786  000C42  0100               	movlb	0	; () banked
  1787  000C44  6F64               	movwf	___lwdiv@counter& (0+255),b
  1788  000C46  D006               	goto	l2098
  1789  000C48                     l2096:
  1790                           
  1791                           ; BSR set to: 0
  1792  000C48  0100               	movlb	0	; () banked
  1793  000C4A  90D8               	bcf	status,0,c
  1794  000C4C  3762               	rlcf	___lwdiv@divisor& (0+255),f,b
  1795  000C4E  3763               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  1796  000C50  0100               	movlb	0	; () banked
  1797  000C52  2B64               	incf	___lwdiv@counter& (0+255),f,b
  1798  000C54                     l2098:
  1799                           
  1800                           ; BSR set to: 0
  1801  000C54  0100               	movlb	0	; () banked
  1802  000C56  AF63               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  1803  000C58  D7F7               	goto	l2096
  1804  000C5A                     l2100:
  1805                           
  1806                           ; BSR set to: 0
  1807  000C5A  0100               	movlb	0	; () banked
  1808  000C5C  90D8               	bcf	status,0,c
  1809  000C5E  3765               	rlcf	___lwdiv@quotient& (0+255),f,b
  1810  000C60  3766               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  1811                           
  1812                           ; BSR set to: 0
  1813  000C62  0100               	movlb	0	; () banked
  1814  000C64  5162               	movf	___lwdiv@divisor& (0+255),w,b
  1815  000C66  0100               	movlb	0	; () banked
  1816  000C68  5D60               	subwf	___lwdiv@dividend& (0+255),w,b
  1817  000C6A  0100               	movlb	0	; () banked
  1818  000C6C  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  1819  000C6E  0100               	movlb	0	; () banked
  1820  000C70  5961               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  1821  000C72  A0D8               	btfss	status,0,c
  1822  000C74  D00A               	goto	l2108
  1823                           
  1824                           ; BSR set to: 0
  1825  000C76  0100               	movlb	0	; () banked
  1826  000C78  5162               	movf	___lwdiv@divisor& (0+255),w,b
  1827  000C7A  0100               	movlb	0	; () banked
  1828  000C7C  5F60               	subwf	___lwdiv@dividend& (0+255),f,b
  1829  000C7E  0100               	movlb	0	; () banked
  1830  000C80  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  1831  000C82  0100               	movlb	0	; () banked
  1832  000C84  5B61               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  1833                           
  1834                           ; BSR set to: 0
  1835  000C86  0100               	movlb	0	; () banked
  1836  000C88  8165               	bsf	___lwdiv@quotient& (0+255),0,b
  1837  000C8A                     l2108:
  1838                           
  1839                           ; BSR set to: 0
  1840  000C8A  0100               	movlb	0	; () banked
  1841  000C8C  90D8               	bcf	status,0,c
  1842  000C8E  3363               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  1843  000C90  3362               	rrcf	___lwdiv@divisor& (0+255),f,b
  1844                           
  1845                           ; BSR set to: 0
  1846  000C92  0100               	movlb	0	; () banked
  1847  000C94  2F64               	decfsz	___lwdiv@counter& (0+255),f,b
  1848  000C96  D7E1               	goto	l2100
  1849  000C98                     l699:
  1850                           
  1851                           ; BSR set to: 0
  1852  000C98  C065  F060         	movff	___lwdiv@quotient,?___lwdiv
  1853  000C9C  C066  F061         	movff	___lwdiv@quotient+1,?___lwdiv+1
  1854                           
  1855                           ; BSR set to: 0
  1856  000CA0  0012               	return		;funcret
  1857  000CA2                     __end_of___lwdiv:
  1858                           	opt stack 0
  1859                           tblptru	equ	0xFF8
  1860                           tblptrh	equ	0xFF7
  1861                           tblptrl	equ	0xFF6
  1862                           tablat	equ	0xFF5
  1863                           prodh	equ	0xFF4
  1864                           prodl	equ	0xFF3
  1865                           intcon	equ	0xFF2
  1866                           postinc0	equ	0xFEE
  1867                           wreg	equ	0xFE8
  1868                           indf2	equ	0xFDF
  1869                           postinc2	equ	0xFDE
  1870                           postdec2	equ	0xFDD
  1871                           fsr2h	equ	0xFDA
  1872                           fsr2l	equ	0xFD9
  1873                           status	equ	0xFD8
  1874                           
  1875 ;; *************** function _initPWM *****************
  1876 ;; Defined at:
  1877 ;;		line 46 in file "source_motor_1.c"
  1878 ;; Parameters:    Size  Location     Type
  1879 ;;		None
  1880 ;; Auto vars:     Size  Location     Type
  1881 ;;		None
  1882 ;; Return value:  Size  Location     Type
  1883 ;;		None               void
  1884 ;; Registers used:
  1885 ;;		wreg, status,2
  1886 ;; Tracked objects:
  1887 ;;		On entry : 0/0
  1888 ;;		On exit  : 0/0
  1889 ;;		Unchanged: 0/0
  1890 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1891 ;;      Params:         0       0       0       0
  1892 ;;      Locals:         0       0       0       0
  1893 ;;      Temps:          0       0       0       0
  1894 ;;      Totals:         0       0       0       0
  1895 ;;Total ram usage:        0 bytes
  1896 ;; Hardware stack levels used:    1
  1897 ;; Hardware stack levels required when called:    5
  1898 ;; This function calls:
  1899 ;;		Nothing
  1900 ;; This function is called by:
  1901 ;;		_main
  1902 ;; This function uses a non-reentrant model
  1903 ;;
  1904                           
  1905                           	psect	text6
  1906  0010AA                     __ptext6:
  1907                           	opt stack 0
  1908  0010AA                     _initPWM:
  1909                           	opt stack 25
  1910                           
  1911                           ;source_motor_1.c: 48: TRISBbits.TRISB0 = 0;
  1912                           
  1913                           ; BSR set to: 0
  1914                           ;incstack = 0
  1915  0010AA  9093               	bcf	3987,0,c	;volatile
  1916                           
  1917                           ;source_motor_1.c: 50: PTCON0 = 0b00000000;
  1918  0010AC  0E00               	movlw	0
  1919  0010AE  6E7F               	movwf	3967,c	;volatile
  1920                           
  1921                           ;source_motor_1.c: 51: PTCON1 = 0b10000000;
  1922  0010B0  0E80               	movlw	128
  1923  0010B2  6E7E               	movwf	3966,c	;volatile
  1924                           
  1925                           ;source_motor_1.c: 53: PWMCON0 = 0b01101111;
  1926  0010B4  0E6F               	movlw	111
  1927  0010B6  6E6F               	movwf	3951,c	;volatile
  1928                           
  1929                           ;source_motor_1.c: 54: PWMCON1 = 0x00;
  1930  0010B8  0E00               	movlw	0
  1931  0010BA  6E6E               	movwf	3950,c	;volatile
  1932                           
  1933                           ;source_motor_1.c: 56: PTPERL = 199;
  1934  0010BC  0EC7               	movlw	199
  1935  0010BE  6E7B               	movwf	3963,c	;volatile
  1936                           
  1937                           ;source_motor_1.c: 57: PTPERH = 0x00;
  1938  0010C0  0E00               	movlw	0
  1939  0010C2  6E7A               	movwf	3962,c	;volatile
  1940  0010C4  0012               	return		;funcret
  1941  0010C6                     __end_of_initPWM:
  1942                           	opt stack 0
  1943                           tblptru	equ	0xFF8
  1944                           tblptrh	equ	0xFF7
  1945                           tblptrl	equ	0xFF6
  1946                           tablat	equ	0xFF5
  1947                           prodh	equ	0xFF4
  1948                           prodl	equ	0xFF3
  1949                           intcon	equ	0xFF2
  1950                           postinc0	equ	0xFEE
  1951                           wreg	equ	0xFE8
  1952                           indf2	equ	0xFDF
  1953                           postinc2	equ	0xFDE
  1954                           postdec2	equ	0xFDD
  1955                           fsr2h	equ	0xFDA
  1956                           fsr2l	equ	0xFD9
  1957                           status	equ	0xFD8
  1958                           
  1959 ;; *************** function _initMotor *****************
  1960 ;; Defined at:
  1961 ;;		line 67 in file "source_motor_1.c"
  1962 ;; Parameters:    Size  Location     Type
  1963 ;;		None
  1964 ;; Auto vars:     Size  Location     Type
  1965 ;;		None
  1966 ;; Return value:  Size  Location     Type
  1967 ;;		None               void
  1968 ;; Registers used:
  1969 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1970 ;; Tracked objects:
  1971 ;;		On entry : 0/0
  1972 ;;		On exit  : 0/0
  1973 ;;		Unchanged: 0/0
  1974 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1975 ;;      Params:         0       0       0       0
  1976 ;;      Locals:         0       0       0       0
  1977 ;;      Temps:          0       0       0       0
  1978 ;;      Totals:         0       0       0       0
  1979 ;;Total ram usage:        0 bytes
  1980 ;; Hardware stack levels used:    1
  1981 ;; Hardware stack levels required when called:    7
  1982 ;; This function calls:
  1983 ;;		_setMotorPWM
  1984 ;; This function is called by:
  1985 ;;		_main
  1986 ;; This function uses a non-reentrant model
  1987 ;;
  1988                           
  1989                           	psect	text7
  1990  000DF6                     __ptext7:
  1991                           	opt stack 0
  1992  000DF6                     _initMotor:
  1993                           	opt stack 23
  1994                           
  1995                           ;source_motor_1.c: 68: motorL.power=0;
  1996                           
  1997                           ;incstack = 0
  1998  000DF6  0E00               	movlw	0
  1999  000DF8  6E27               	movwf	_motorL,c
  2000                           
  2001                           ;source_motor_1.c: 69: motorL.direction=1;
  2002  000DFA  0E01               	movlw	1
  2003  000DFC  6E28               	movwf	_motorL+1,c
  2004                           
  2005                           ;source_motor_1.c: 70: motorL.dutyLowByte=(unsigned char *)(&PDC0L);
  2006  000DFE  0E79               	movlw	121
  2007  000E00  6E29               	movwf	_motorL+2,c
  2008  000E02  0E0F               	movlw	15
  2009  000E04  6E2A               	movwf	_motorL+3,c
  2010                           
  2011                           ;source_motor_1.c: 71: motorL.dutyHighByte=(unsigned char *)(&PDC0H);
  2012  000E06  0E78               	movlw	120
  2013  000E08  6E2B               	movwf	_motorL+4,c
  2014  000E0A  0E0F               	movlw	15
  2015  000E0C  6E2C               	movwf	_motorL+5,c
  2016                           
  2017                           ;source_motor_1.c: 72: motorL.dir_pin=0;
  2018  000E0E  0E00               	movlw	0
  2019  000E10  6E2D               	movwf	_motorL+6,c
  2020                           
  2021                           ;source_motor_1.c: 73: motorL.PWMperiod=199;
  2022  000E12  0E00               	movlw	0
  2023  000E14  6E2F               	movwf	_motorL+8,c
  2024  000E16  0EC7               	movlw	199
  2025  000E18  6E2E               	movwf	_motorL+7,c
  2026                           
  2027                           ;source_motor_1.c: 75: motorR.power=0;
  2028  000E1A  0E00               	movlw	0
  2029  000E1C  6E30               	movwf	_motorR,c
  2030                           
  2031                           ;source_motor_1.c: 76: motorR.direction=1;
  2032  000E1E  0E01               	movlw	1
  2033  000E20  6E31               	movwf	_motorR+1,c
  2034                           
  2035                           ;source_motor_1.c: 77: motorR.dutyLowByte=(unsigned char *)(&PDC1L);
  2036  000E22  0E77               	movlw	119
  2037  000E24  6E32               	movwf	_motorR+2,c
  2038  000E26  0E0F               	movlw	15
  2039  000E28  6E33               	movwf	_motorR+3,c
  2040                           
  2041                           ;source_motor_1.c: 78: motorR.dutyHighByte=(unsigned char *)(&PDC1H);
  2042  000E2A  0E76               	movlw	118
  2043  000E2C  6E34               	movwf	_motorR+4,c
  2044  000E2E  0E0F               	movlw	15
  2045  000E30  6E35               	movwf	_motorR+5,c
  2046                           
  2047                           ;source_motor_1.c: 79: motorR.dir_pin=2;
  2048  000E32  0E02               	movlw	2
  2049  000E34  6E36               	movwf	_motorR+6,c
  2050                           
  2051                           ;source_motor_1.c: 80: motorR.PWMperiod=199;
  2052  000E36  0E00               	movlw	0
  2053  000E38  6E38               	movwf	_motorR+8,c
  2054  000E3A  0EC7               	movlw	199
  2055  000E3C  6E37               	movwf	_motorR+7,c
  2056                           
  2057                           ;source_motor_1.c: 83: setMotorPWM(&motorL);
  2058  000E3E  0E27               	movlw	low _motorL
  2059  000E40  0100               	movlb	0	; () banked
  2060  000E42  6F6E               	movwf	setMotorPWM@m& (0+255),b
  2061  000E44  0E00               	movlw	high _motorL
  2062  000E46  0100               	movlb	0	; () banked
  2063  000E48  6F6F               	movwf	(setMotorPWM@m+1)& (0+255),b
  2064  000E4A  ECE2  F002         	call	_setMotorPWM	;wreg free
  2065                           
  2066                           ;source_motor_1.c: 84: setMotorPWM(&motorR);
  2067  000E4E  0E30               	movlw	low _motorR
  2068  000E50  0100               	movlb	0	; () banked
  2069  000E52  6F6E               	movwf	setMotorPWM@m& (0+255),b
  2070  000E54  0E00               	movlw	high _motorR
  2071  000E56  0100               	movlb	0	; () banked
  2072  000E58  6F6F               	movwf	(setMotorPWM@m+1)& (0+255),b
  2073  000E5A  ECE2  F002         	call	_setMotorPWM	;wreg free
  2074  000E5E  0012               	return		;funcret
  2075  000E60                     __end_of_initMotor:
  2076                           	opt stack 0
  2077                           tblptru	equ	0xFF8
  2078                           tblptrh	equ	0xFF7
  2079                           tblptrl	equ	0xFF6
  2080                           tablat	equ	0xFF5
  2081                           prodh	equ	0xFF4
  2082                           prodl	equ	0xFF3
  2083                           intcon	equ	0xFF2
  2084                           postinc0	equ	0xFEE
  2085                           wreg	equ	0xFE8
  2086                           indf2	equ	0xFDF
  2087                           postinc2	equ	0xFDE
  2088                           postdec2	equ	0xFDD
  2089                           fsr2h	equ	0xFDA
  2090                           fsr2l	equ	0xFD9
  2091                           status	equ	0xFD8
  2092                           
  2093 ;; *************** function _initBITS *****************
  2094 ;; Defined at:
  2095 ;;		line 124 in file "source_LCD.c"
  2096 ;; Parameters:    Size  Location     Type
  2097 ;;		None
  2098 ;; Auto vars:     Size  Location     Type
  2099 ;;		None
  2100 ;; Return value:  Size  Location     Type
  2101 ;;		None               void
  2102 ;; Registers used:
  2103 ;;		wreg, status,2
  2104 ;; Tracked objects:
  2105 ;;		On entry : 0/0
  2106 ;;		On exit  : 0/0
  2107 ;;		Unchanged: 0/0
  2108 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2109 ;;      Params:         0       0       0       0
  2110 ;;      Locals:         0       0       0       0
  2111 ;;      Temps:          0       0       0       0
  2112 ;;      Totals:         0       0       0       0
  2113 ;;Total ram usage:        0 bytes
  2114 ;; Hardware stack levels used:    1
  2115 ;; Hardware stack levels required when called:    5
  2116 ;; This function calls:
  2117 ;;		Nothing
  2118 ;; This function is called by:
  2119 ;;		_main
  2120 ;; This function uses a non-reentrant model
  2121 ;;
  2122                           
  2123                           	psect	text8
  2124  00106A                     __ptext8:
  2125                           	opt stack 0
  2126  00106A                     _initBITS:
  2127                           	opt stack 25
  2128                           
  2129                           ;source_LCD.c: 125: TRISC = 0b11000000;
  2130                           
  2131                           ;incstack = 0
  2132  00106A  0EC0               	movlw	192
  2133  00106C  6E94               	movwf	3988,c	;volatile
  2134                           
  2135                           ;source_LCD.c: 128: OSCCON = 0b11110010;
  2136  00106E  0EF2               	movlw	242
  2137  001070  6ED3               	movwf	4051,c	;volatile
  2138  001072                     l74:
  2139  001072  A4D3               	btfss	4051,2,c	;volatile
  2140  001074  D7FE               	goto	l74
  2141                           
  2142                           ;source_LCD.c: 131: SPBRG = 205;
  2143  001076  0ECD               	movlw	205
  2144  001078  6EAF               	movwf	4015,c	;volatile
  2145                           
  2146                           ;source_LCD.c: 132: SPBRGH = 0;
  2147  00107A  0E00               	movlw	0
  2148  00107C  6EB0               	movwf	4016,c	;volatile
  2149                           
  2150                           ;source_LCD.c: 133: BAUDCONbits.BRG16 = 1;
  2151  00107E  86AA               	bsf	4010,3,c	;volatile
  2152                           
  2153                           ;source_LCD.c: 134: TXSTAbits.BRGH = 1;
  2154  001080  84AC               	bsf	4012,2,c	;volatile
  2155                           
  2156                           ;source_LCD.c: 135: RCSTAbits.CREN = 1;
  2157  001082  88AB               	bsf	4011,4,c	;volatile
  2158                           
  2159                           ;source_LCD.c: 136: RCSTAbits.SPEN = 1;
  2160  001084  8EAB               	bsf	4011,7,c	;volatile
  2161                           
  2162                           ;source_LCD.c: 137: TXSTAbits.TXEN = 1;
  2163  001086  8AAC               	bsf	4012,5,c	;volatile
  2164  001088  0012               	return		;funcret
  2165  00108A                     __end_of_initBITS:
  2166                           	opt stack 0
  2167                           tblptru	equ	0xFF8
  2168                           tblptrh	equ	0xFF7
  2169                           tblptrl	equ	0xFF6
  2170                           tablat	equ	0xFF5
  2171                           prodh	equ	0xFF4
  2172                           prodl	equ	0xFF3
  2173                           intcon	equ	0xFF2
  2174                           postinc0	equ	0xFEE
  2175                           wreg	equ	0xFE8
  2176                           indf2	equ	0xFDF
  2177                           postinc2	equ	0xFDE
  2178                           postdec2	equ	0xFDD
  2179                           fsr2h	equ	0xFDA
  2180                           fsr2l	equ	0xFD9
  2181                           status	equ	0xFD8
  2182                           
  2183 ;; *************** function _fullSpeedBack *****************
  2184 ;; Defined at:
  2185 ;;		line 156 in file "source_motor_1.c"
  2186 ;; Parameters:    Size  Location     Type
  2187 ;;  m_L             2   25[BANK0 ] PTR struct DC_motor
  2188 ;;		 -> motorL(9), 
  2189 ;;  m_R             2   27[BANK0 ] PTR struct DC_motor
  2190 ;;		 -> motorR(9), 
  2191 ;; Auto vars:     Size  Location     Type
  2192 ;;		None
  2193 ;; Return value:  Size  Location     Type
  2194 ;;		None               void
  2195 ;; Registers used:
  2196 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2197 ;; Tracked objects:
  2198 ;;		On entry : 0/0
  2199 ;;		On exit  : 0/0
  2200 ;;		Unchanged: 0/0
  2201 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2202 ;;      Params:         0       4       0       0
  2203 ;;      Locals:         0       0       0       0
  2204 ;;      Temps:          0       1       0       0
  2205 ;;      Totals:         0       5       0       0
  2206 ;;Total ram usage:        5 bytes
  2207 ;; Hardware stack levels used:    1
  2208 ;; Hardware stack levels required when called:    8
  2209 ;; This function calls:
  2210 ;;		_setMotorPWM
  2211 ;;		_stop
  2212 ;; This function is called by:
  2213 ;;		_main
  2214 ;; This function uses a non-reentrant model
  2215 ;;
  2216                           
  2217                           	psect	text9
  2218  000B2A                     __ptext9:
  2219                           	opt stack 0
  2220  000B2A                     _fullSpeedBack:
  2221                           	opt stack 22
  2222                           
  2223                           ;source_motor_1.c: 158: stop(&motorL, &motorR);
  2224                           
  2225                           ;incstack = 0
  2226  000B2A  0E27               	movlw	low _motorL
  2227  000B2C  0100               	movlb	0	; () banked
  2228  000B2E  6F75               	movwf	stop@m_L& (0+255),b
  2229  000B30  0E00               	movlw	high _motorL
  2230  000B32  0100               	movlb	0	; () banked
  2231  000B34  6F76               	movwf	(stop@m_L+1)& (0+255),b
  2232  000B36  0E30               	movlw	low _motorR
  2233  000B38  0100               	movlb	0	; () banked
  2234  000B3A  6F77               	movwf	stop@m_R& (0+255),b
  2235  000B3C  0E00               	movlw	high _motorR
  2236  000B3E  0100               	movlb	0	; () banked
  2237  000B40  6F78               	movwf	(stop@m_R+1)& (0+255),b
  2238  000B42  EC61  F007         	call	_stop	;wreg free
  2239                           
  2240                           ;source_motor_1.c: 159: m_R->direction = 0;
  2241  000B46  0100               	movlb	0	; () banked
  2242  000B48  EE20 F001          	lfsr	2,1
  2243  000B4C  517B               	movf	fullSpeedBack@m_R& (0+255),w,b
  2244  000B4E  26D9               	addwf	fsr2l,f,c
  2245  000B50  517C               	movf	(fullSpeedBack@m_R+1)& (0+255),w,b
  2246  000B52  22DA               	addwfc	fsr2h,f,c
  2247  000B54  0E00               	movlw	0
  2248  000B56  6EDF               	movwf	indf2,c
  2249                           
  2250                           ; BSR set to: 0
  2251                           ;source_motor_1.c: 160: m_L->direction = 0;
  2252  000B58  0100               	movlb	0	; () banked
  2253  000B5A  EE20 F001          	lfsr	2,1
  2254  000B5E  5179               	movf	fullSpeedBack@m_L& (0+255),w,b
  2255  000B60  26D9               	addwf	fsr2l,f,c
  2256  000B62  517A               	movf	(fullSpeedBack@m_L+1)& (0+255),w,b
  2257  000B64  22DA               	addwfc	fsr2h,f,c
  2258  000B66  0E00               	movlw	0
  2259  000B68  6EDF               	movwf	indf2,c
  2260  000B6A  D016               	goto	l2266
  2261  000B6C                     l2260:
  2262                           
  2263                           ;source_motor_1.c: 163: setMotorPWM(m_L);
  2264  000B6C  C079  F06E         	movff	fullSpeedBack@m_L,setMotorPWM@m
  2265  000B70  C07A  F06F         	movff	fullSpeedBack@m_L+1,setMotorPWM@m+1
  2266  000B74  ECE2  F002         	call	_setMotorPWM	;wreg free
  2267                           
  2268                           ;source_motor_1.c: 164: setMotorPWM(m_R);
  2269  000B78  C07B  F06E         	movff	fullSpeedBack@m_R,setMotorPWM@m
  2270  000B7C  C07C  F06F         	movff	fullSpeedBack@m_R+1,setMotorPWM@m+1
  2271  000B80  ECE2  F002         	call	_setMotorPWM	;wreg free
  2272                           
  2273                           ;source_motor_1.c: 165: (m_R->power)++;
  2274  000B84  C07B  FFD9         	movff	fullSpeedBack@m_R,fsr2l
  2275  000B88  C07C  FFDA         	movff	fullSpeedBack@m_R+1,fsr2h
  2276  000B8C  2ADF               	incf	indf2,f,c
  2277                           
  2278                           ;source_motor_1.c: 166: (m_L->power)++;
  2279  000B8E  C079  FFD9         	movff	fullSpeedBack@m_L,fsr2l
  2280  000B92  C07A  FFDA         	movff	fullSpeedBack@m_L+1,fsr2h
  2281  000B96  2ADF               	incf	indf2,f,c
  2282  000B98                     l2266:
  2283                           
  2284                           ;source_motor_1.c: 167: _delay((unsigned long)((1)*(8000000/4000000.0)));
  2285  000B98  D000               	nop2		;2 cycle nop
  2286  000B9A  C07B  FFD9         	movff	fullSpeedBack@m_R,fsr2l
  2287  000B9E  C07C  FFDA         	movff	fullSpeedBack@m_R+1,fsr2h
  2288  000BA2  0E46               	movlw	70
  2289  000BA4  64DF               	cpfsgt	indf2,c
  2290  000BA6  D7E2               	goto	l2260
  2291  000BA8  0012               	return	
  2292  000BAA                     __end_of_fullSpeedBack:
  2293                           	opt stack 0
  2294                           tblptru	equ	0xFF8
  2295                           tblptrh	equ	0xFF7
  2296                           tblptrl	equ	0xFF6
  2297                           tablat	equ	0xFF5
  2298                           prodh	equ	0xFF4
  2299                           prodl	equ	0xFF3
  2300                           intcon	equ	0xFF2
  2301                           postinc0	equ	0xFEE
  2302                           wreg	equ	0xFE8
  2303                           indf2	equ	0xFDF
  2304                           postinc2	equ	0xFDE
  2305                           postdec2	equ	0xFDD
  2306                           fsr2h	equ	0xFDA
  2307                           fsr2l	equ	0xFD9
  2308                           status	equ	0xFD8
  2309                           
  2310 ;; *************** function _fullSpeedAhead *****************
  2311 ;; Defined at:
  2312 ;;		line 141 in file "source_motor_1.c"
  2313 ;; Parameters:    Size  Location     Type
  2314 ;;  m_L             2   25[BANK0 ] PTR struct DC_motor
  2315 ;;		 -> motorL(9), 
  2316 ;;  m_R             2   27[BANK0 ] PTR struct DC_motor
  2317 ;;		 -> motorR(9), 
  2318 ;; Auto vars:     Size  Location     Type
  2319 ;;		None
  2320 ;; Return value:  Size  Location     Type
  2321 ;;		None               void
  2322 ;; Registers used:
  2323 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2324 ;; Tracked objects:
  2325 ;;		On entry : 0/0
  2326 ;;		On exit  : 0/0
  2327 ;;		Unchanged: 0/0
  2328 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2329 ;;      Params:         0       4       0       0
  2330 ;;      Locals:         0       0       0       0
  2331 ;;      Temps:          0       1       0       0
  2332 ;;      Totals:         0       5       0       0
  2333 ;;Total ram usage:        5 bytes
  2334 ;; Hardware stack levels used:    1
  2335 ;; Hardware stack levels required when called:    8
  2336 ;; This function calls:
  2337 ;;		_setMotorPWM
  2338 ;;		_stop
  2339 ;; This function is called by:
  2340 ;;		_main
  2341 ;; This function uses a non-reentrant model
  2342 ;;
  2343                           
  2344                           	psect	text10
  2345  000BAA                     __ptext10:
  2346                           	opt stack 0
  2347  000BAA                     _fullSpeedAhead:
  2348                           	opt stack 22
  2349                           
  2350                           ;source_motor_1.c: 143: stop(&motorL, &motorR);
  2351                           
  2352                           ;incstack = 0
  2353  000BAA  0E27               	movlw	low _motorL
  2354  000BAC  0100               	movlb	0	; () banked
  2355  000BAE  6F75               	movwf	stop@m_L& (0+255),b
  2356  000BB0  0E00               	movlw	high _motorL
  2357  000BB2  0100               	movlb	0	; () banked
  2358  000BB4  6F76               	movwf	(stop@m_L+1)& (0+255),b
  2359  000BB6  0E30               	movlw	low _motorR
  2360  000BB8  0100               	movlb	0	; () banked
  2361  000BBA  6F77               	movwf	stop@m_R& (0+255),b
  2362  000BBC  0E00               	movlw	high _motorR
  2363  000BBE  0100               	movlb	0	; () banked
  2364  000BC0  6F78               	movwf	(stop@m_R+1)& (0+255),b
  2365  000BC2  EC61  F007         	call	_stop	;wreg free
  2366                           
  2367                           ;source_motor_1.c: 144: m_R->direction = 1;
  2368  000BC6  0100               	movlb	0	; () banked
  2369  000BC8  EE20 F001          	lfsr	2,1
  2370  000BCC  517B               	movf	fullSpeedAhead@m_R& (0+255),w,b
  2371  000BCE  26D9               	addwf	fsr2l,f,c
  2372  000BD0  517C               	movf	(fullSpeedAhead@m_R+1)& (0+255),w,b
  2373  000BD2  22DA               	addwfc	fsr2h,f,c
  2374  000BD4  0E01               	movlw	1
  2375  000BD6  6EDF               	movwf	indf2,c
  2376                           
  2377                           ; BSR set to: 0
  2378                           ;source_motor_1.c: 145: m_L->direction = 1;
  2379  000BD8  0100               	movlb	0	; () banked
  2380  000BDA  EE20 F001          	lfsr	2,1
  2381  000BDE  5179               	movf	fullSpeedAhead@m_L& (0+255),w,b
  2382  000BE0  26D9               	addwf	fsr2l,f,c
  2383  000BE2  517A               	movf	(fullSpeedAhead@m_L+1)& (0+255),w,b
  2384  000BE4  22DA               	addwfc	fsr2h,f,c
  2385  000BE6  0E01               	movlw	1
  2386  000BE8  6EDF               	movwf	indf2,c
  2387  000BEA  D016               	goto	l2248
  2388  000BEC                     l2242:
  2389                           
  2390                           ;source_motor_1.c: 148: setMotorPWM(m_L);
  2391  000BEC  C079  F06E         	movff	fullSpeedAhead@m_L,setMotorPWM@m
  2392  000BF0  C07A  F06F         	movff	fullSpeedAhead@m_L+1,setMotorPWM@m+1
  2393  000BF4  ECE2  F002         	call	_setMotorPWM	;wreg free
  2394                           
  2395                           ;source_motor_1.c: 149: setMotorPWM(m_R);
  2396  000BF8  C07B  F06E         	movff	fullSpeedAhead@m_R,setMotorPWM@m
  2397  000BFC  C07C  F06F         	movff	fullSpeedAhead@m_R+1,setMotorPWM@m+1
  2398  000C00  ECE2  F002         	call	_setMotorPWM	;wreg free
  2399                           
  2400                           ;source_motor_1.c: 150: (m_R->power)++;
  2401  000C04  C07B  FFD9         	movff	fullSpeedAhead@m_R,fsr2l
  2402  000C08  C07C  FFDA         	movff	fullSpeedAhead@m_R+1,fsr2h
  2403  000C0C  2ADF               	incf	indf2,f,c
  2404                           
  2405                           ;source_motor_1.c: 151: (m_L->power)++;
  2406  000C0E  C079  FFD9         	movff	fullSpeedAhead@m_L,fsr2l
  2407  000C12  C07A  FFDA         	movff	fullSpeedAhead@m_L+1,fsr2h
  2408  000C16  2ADF               	incf	indf2,f,c
  2409  000C18                     l2248:
  2410                           
  2411                           ;source_motor_1.c: 152: _delay((unsigned long)((1)*(8000000/4000000.0)));
  2412  000C18  D000               	nop2		;2 cycle nop
  2413  000C1A  C07B  FFD9         	movff	fullSpeedAhead@m_R,fsr2l
  2414  000C1E  C07C  FFDA         	movff	fullSpeedAhead@m_R+1,fsr2h
  2415  000C22  0E46               	movlw	70
  2416  000C24  64DF               	cpfsgt	indf2,c
  2417  000C26  D7E2               	goto	l2242
  2418  000C28  0012               	return	
  2419  000C2A                     __end_of_fullSpeedAhead:
  2420                           	opt stack 0
  2421                           tblptru	equ	0xFF8
  2422                           tblptrh	equ	0xFF7
  2423                           tblptrl	equ	0xFF6
  2424                           tablat	equ	0xFF5
  2425                           prodh	equ	0xFF4
  2426                           prodl	equ	0xFF3
  2427                           intcon	equ	0xFF2
  2428                           postinc0	equ	0xFEE
  2429                           wreg	equ	0xFE8
  2430                           indf2	equ	0xFDF
  2431                           postinc2	equ	0xFDE
  2432                           postdec2	equ	0xFDD
  2433                           fsr2h	equ	0xFDA
  2434                           fsr2l	equ	0xFD9
  2435                           status	equ	0xFD8
  2436                           
  2437 ;; *************** function _stop *****************
  2438 ;; Defined at:
  2439 ;;		line 90 in file "source_motor_1.c"
  2440 ;; Parameters:    Size  Location     Type
  2441 ;;  m_L             2   21[BANK0 ] PTR struct DC_motor
  2442 ;;		 -> motorL(9), 
  2443 ;;  m_R             2   23[BANK0 ] PTR struct DC_motor
  2444 ;;		 -> motorR(9), 
  2445 ;; Auto vars:     Size  Location     Type
  2446 ;;		None
  2447 ;; Return value:  Size  Location     Type
  2448 ;;		None               void
  2449 ;; Registers used:
  2450 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2451 ;; Tracked objects:
  2452 ;;		On entry : 0/0
  2453 ;;		On exit  : 0/0
  2454 ;;		Unchanged: 0/0
  2455 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2456 ;;      Params:         0       4       0       0
  2457 ;;      Locals:         0       0       0       0
  2458 ;;      Temps:          0       0       0       0
  2459 ;;      Totals:         0       4       0       0
  2460 ;;Total ram usage:        4 bytes
  2461 ;; Hardware stack levels used:    1
  2462 ;; Hardware stack levels required when called:    7
  2463 ;; This function calls:
  2464 ;;		_setMotorPWM
  2465 ;; This function is called by:
  2466 ;;		_turnLeft
  2467 ;;		_turnRight
  2468 ;;		_fullSpeedAhead
  2469 ;;		_fullSpeedBack
  2470 ;;		_main
  2471 ;; This function uses a non-reentrant model
  2472 ;;
  2473                           
  2474                           	psect	text11
  2475  000EC2                     __ptext11:
  2476                           	opt stack 0
  2477  000EC2                     _stop:
  2478                           	opt stack 22
  2479                           
  2480                           ;source_motor_1.c: 92: m_L->power = 0;
  2481                           
  2482                           ;incstack = 0
  2483  000EC2  C075  FFD9         	movff	stop@m_L,fsr2l
  2484  000EC6  C076  FFDA         	movff	stop@m_L+1,fsr2h
  2485  000ECA  0E00               	movlw	0
  2486  000ECC  6EDF               	movwf	indf2,c
  2487                           
  2488                           ;source_motor_1.c: 93: m_R->power = 0;
  2489  000ECE  C077  FFD9         	movff	stop@m_R,fsr2l
  2490  000ED2  C078  FFDA         	movff	stop@m_R+1,fsr2h
  2491  000ED6  0E00               	movlw	0
  2492  000ED8  6EDF               	movwf	indf2,c
  2493                           
  2494                           ;source_motor_1.c: 94: m_L->direction = 1;
  2495  000EDA  0100               	movlb	0	; () banked
  2496  000EDC  EE20 F001          	lfsr	2,1
  2497  000EE0  5175               	movf	stop@m_L& (0+255),w,b
  2498  000EE2  26D9               	addwf	fsr2l,f,c
  2499  000EE4  5176               	movf	(stop@m_L+1)& (0+255),w,b
  2500  000EE6  22DA               	addwfc	fsr2h,f,c
  2501  000EE8  0E01               	movlw	1
  2502  000EEA  6EDF               	movwf	indf2,c
  2503                           
  2504                           ; BSR set to: 0
  2505                           ;source_motor_1.c: 95: m_R->direction = 1;
  2506  000EEC  0100               	movlb	0	; () banked
  2507  000EEE  EE20 F001          	lfsr	2,1
  2508  000EF2  5177               	movf	stop@m_R& (0+255),w,b
  2509  000EF4  26D9               	addwf	fsr2l,f,c
  2510  000EF6  5178               	movf	(stop@m_R+1)& (0+255),w,b
  2511  000EF8  22DA               	addwfc	fsr2h,f,c
  2512  000EFA  0E01               	movlw	1
  2513  000EFC  6EDF               	movwf	indf2,c
  2514                           
  2515                           ; BSR set to: 0
  2516                           ;source_motor_1.c: 96: setMotorPWM(m_L);
  2517  000EFE  C075  F06E         	movff	stop@m_L,setMotorPWM@m
  2518  000F02  C076  F06F         	movff	stop@m_L+1,setMotorPWM@m+1
  2519  000F06  ECE2  F002         	call	_setMotorPWM	;wreg free
  2520                           
  2521                           ;source_motor_1.c: 97: setMotorPWM(m_R);
  2522  000F0A  C077  F06E         	movff	stop@m_R,setMotorPWM@m
  2523  000F0E  C078  F06F         	movff	stop@m_R+1,setMotorPWM@m+1
  2524  000F12  ECE2  F002         	call	_setMotorPWM	;wreg free
  2525  000F16  0012               	return		;funcret
  2526  000F18                     __end_of_stop:
  2527                           	opt stack 0
  2528                           tblptru	equ	0xFF8
  2529                           tblptrh	equ	0xFF7
  2530                           tblptrl	equ	0xFF6
  2531                           tablat	equ	0xFF5
  2532                           prodh	equ	0xFF4
  2533                           prodl	equ	0xFF3
  2534                           intcon	equ	0xFF2
  2535                           postinc0	equ	0xFEE
  2536                           wreg	equ	0xFE8
  2537                           indf2	equ	0xFDF
  2538                           postinc2	equ	0xFDE
  2539                           postdec2	equ	0xFDD
  2540                           fsr2h	equ	0xFDA
  2541                           fsr2l	equ	0xFD9
  2542                           status	equ	0xFD8
  2543                           
  2544 ;; *************** function _setMotorPWM *****************
  2545 ;; Defined at:
  2546 ;;		line 16 in file "source_motor_1.c"
  2547 ;; Parameters:    Size  Location     Type
  2548 ;;  m               2   14[BANK0 ] PTR struct DC_motor
  2549 ;;		 -> motorR(9), motorL(9), 
  2550 ;; Auto vars:     Size  Location     Type
  2551 ;;  PWMduty         2   19[BANK0 ] int 
  2552 ;; Return value:  Size  Location     Type
  2553 ;;		None               void
  2554 ;; Registers used:
  2555 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2556 ;; Tracked objects:
  2557 ;;		On entry : 0/0
  2558 ;;		On exit  : 0/0
  2559 ;;		Unchanged: 0/0
  2560 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2561 ;;      Params:         0       2       0       0
  2562 ;;      Locals:         0       2       0       0
  2563 ;;      Temps:          0       3       0       0
  2564 ;;      Totals:         0       7       0       0
  2565 ;;Total ram usage:        7 bytes
  2566 ;; Hardware stack levels used:    1
  2567 ;; Hardware stack levels required when called:    6
  2568 ;; This function calls:
  2569 ;;		___awdiv
  2570 ;;		___wmul
  2571 ;; This function is called by:
  2572 ;;		_initMotor
  2573 ;;		_stop
  2574 ;;		_turnLeft
  2575 ;;		_turnRight
  2576 ;;		_fullSpeedAhead
  2577 ;;		_fullSpeedBack
  2578 ;;		_setMotorFullSpeed
  2579 ;; This function uses a non-reentrant model
  2580 ;;
  2581                           
  2582                           	psect	text12
  2583  0005C4                     __ptext12:
  2584                           	opt stack 0
  2585  0005C4                     _setMotorPWM:
  2586                           	opt stack 22
  2587                           
  2588                           ;source_motor_1.c: 18: int PWMduty;
  2589                           ;source_motor_1.c: 19: if (m->direction){
  2590                           
  2591                           ;incstack = 0
  2592  0005C4  0100               	movlb	0	; () banked
  2593  0005C6  EE20 F001          	lfsr	2,1
  2594  0005CA  516E               	movf	setMotorPWM@m& (0+255),w,b
  2595  0005CC  26D9               	addwf	fsr2l,f,c
  2596  0005CE  516F               	movf	(setMotorPWM@m+1)& (0+255),w,b
  2597  0005D0  22DA               	addwfc	fsr2h,f,c
  2598  0005D2  50DF               	movf	indf2,w,c
  2599  0005D4  B4D8               	btfsc	status,2,c
  2600  0005D6  D043               	goto	l2058
  2601                           
  2602                           ; BSR set to: 0
  2603                           ;source_motor_1.c: 21: PWMduty=m->PWMperiod - ((int)(m->power)*(m->PWMperiod))/100;
  2604  0005D8  0100               	movlb	0	; () banked
  2605  0005DA  EE20 F007          	lfsr	2,7
  2606  0005DE  516E               	movf	setMotorPWM@m& (0+255),w,b
  2607  0005E0  26D9               	addwf	fsr2l,f,c
  2608  0005E2  516F               	movf	(setMotorPWM@m+1)& (0+255),w,b
  2609  0005E4  22DA               	addwfc	fsr2h,f,c
  2610  0005E6  CFDE F070          	movff	postinc2,??_setMotorPWM
  2611  0005EA  CFDD F071          	movff	postdec2,??_setMotorPWM+1
  2612  0005EE  C06E  FFD9         	movff	setMotorPWM@m,fsr2l
  2613  0005F2  C06F  FFDA         	movff	setMotorPWM@m+1,fsr2h
  2614  0005F6  50DF               	movf	indf2,w,c
  2615  0005F8  0100               	movlb	0	; () banked
  2616  0005FA  6F72               	movwf	(??_setMotorPWM+2)& (0+255),b
  2617  0005FC  0100               	movlb	0	; () banked
  2618  0005FE  5172               	movf	(??_setMotorPWM+2)& (0+255),w,b
  2619  000600  0100               	movlb	0	; () banked
  2620  000602  6F60               	movwf	___wmul@multiplier& (0+255),b
  2621  000604  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
  2622  000606  0100               	movlb	0	; () banked
  2623  000608  EE20 F007          	lfsr	2,7
  2624  00060C  516E               	movf	setMotorPWM@m& (0+255),w,b
  2625  00060E  26D9               	addwf	fsr2l,f,c
  2626  000610  516F               	movf	(setMotorPWM@m+1)& (0+255),w,b
  2627  000612  22DA               	addwfc	fsr2h,f,c
  2628  000614  CFDE F062          	movff	postinc2,___wmul@multiplicand
  2629  000618  CFDD F063          	movff	postdec2,___wmul@multiplicand+1
  2630  00061C  ECA9  F007         	call	___wmul	;wreg free
  2631  000620  C060  F066         	movff	?___wmul,___awdiv@dividend
  2632  000624  C061  F067         	movff	?___wmul+1,___awdiv@dividend+1
  2633  000628  0E00               	movlw	0
  2634  00062A  0100               	movlb	0	; () banked
  2635  00062C  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  2636  00062E  0E64               	movlw	100
  2637  000630  6F68               	movwf	___awdiv@divisor& (0+255),b
  2638  000632  ECE8  F004         	call	___awdiv	;wreg free
  2639  000636  0100               	movlb	0	; () banked
  2640  000638  1F66               	comf	?___awdiv& (0+255),f,b
  2641  00063A  0100               	movlb	0	; () banked
  2642  00063C  1F67               	comf	(?___awdiv+1)& (0+255),f,b
  2643  00063E  0100               	movlb	0	; () banked
  2644  000640  4B66               	infsnz	?___awdiv& (0+255),f,b
  2645  000642  2B67               	incf	(?___awdiv+1)& (0+255),f,b
  2646  000644  0100               	movlb	0	; () banked
  2647  000646  5170               	movf	??_setMotorPWM& (0+255),w,b
  2648  000648  0100               	movlb	0	; () banked
  2649  00064A  2566               	addwf	?___awdiv& (0+255),w,b
  2650  00064C  0100               	movlb	0	; () banked
  2651  00064E  6F73               	movwf	setMotorPWM@PWMduty& (0+255),b
  2652  000650  0100               	movlb	0	; () banked
  2653  000652  5171               	movf	(??_setMotorPWM+1)& (0+255),w,b
  2654  000654  0100               	movlb	0	; () banked
  2655  000656  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
  2656  000658  0100               	movlb	0	; () banked
  2657  00065A  6F74               	movwf	(setMotorPWM@PWMduty+1)& (0+255),b
  2658                           
  2659                           ;source_motor_1.c: 22: }
  2660  00065C  D028               	goto	l2060
  2661  00065E                     l2058:
  2662                           
  2663                           ; BSR set to: 0
  2664                           ;source_motor_1.c: 23: else {
  2665                           ;source_motor_1.c: 25: PWMduty=((int)(m->power)*(m->PWMperiod))/100;
  2666  00065E  C06E  FFD9         	movff	setMotorPWM@m,fsr2l
  2667  000662  C06F  FFDA         	movff	setMotorPWM@m+1,fsr2h
  2668  000666  50DF               	movf	indf2,w,c
  2669  000668  0100               	movlb	0	; () banked
  2670  00066A  6F70               	movwf	??_setMotorPWM& (0+255),b
  2671  00066C  0100               	movlb	0	; () banked
  2672  00066E  5170               	movf	??_setMotorPWM& (0+255),w,b
  2673  000670  0100               	movlb	0	; () banked
  2674  000672  6F60               	movwf	___wmul@multiplier& (0+255),b
  2675  000674  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
  2676  000676  0100               	movlb	0	; () banked
  2677  000678  EE20 F007          	lfsr	2,7
  2678  00067C  516E               	movf	setMotorPWM@m& (0+255),w,b
  2679  00067E  26D9               	addwf	fsr2l,f,c
  2680  000680  516F               	movf	(setMotorPWM@m+1)& (0+255),w,b
  2681  000682  22DA               	addwfc	fsr2h,f,c
  2682  000684  CFDE F062          	movff	postinc2,___wmul@multiplicand
  2683  000688  CFDD F063          	movff	postdec2,___wmul@multiplicand+1
  2684  00068C  ECA9  F007         	call	___wmul	;wreg free
  2685  000690  C060  F066         	movff	?___wmul,___awdiv@dividend
  2686  000694  C061  F067         	movff	?___wmul+1,___awdiv@dividend+1
  2687  000698  0E00               	movlw	0
  2688  00069A  0100               	movlb	0	; () banked
  2689  00069C  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  2690  00069E  0E64               	movlw	100
  2691  0006A0  6F68               	movwf	___awdiv@divisor& (0+255),b
  2692  0006A2  ECE8  F004         	call	___awdiv	;wreg free
  2693  0006A6  C066  F073         	movff	?___awdiv,setMotorPWM@PWMduty
  2694  0006AA  C067  F074         	movff	?___awdiv+1,setMotorPWM@PWMduty+1
  2695  0006AE                     l2060:
  2696                           
  2697                           ;source_motor_1.c: 26: }
  2698                           ;source_motor_1.c: 27: PWMduty = (PWMduty << 2);
  2699  0006AE  C073  F070         	movff	setMotorPWM@PWMduty,??_setMotorPWM
  2700  0006B2  C074  F071         	movff	setMotorPWM@PWMduty+1,??_setMotorPWM+1
  2701  0006B6  0100               	movlb	0	; () banked
  2702  0006B8  90D8               	bcf	status,0,c
  2703  0006BA  3770               	rlcf	??_setMotorPWM& (0+255),f,b
  2704  0006BC  3771               	rlcf	(??_setMotorPWM+1)& (0+255),f,b
  2705  0006BE  0100               	movlb	0	; () banked
  2706  0006C0  90D8               	bcf	status,0,c
  2707  0006C2  3770               	rlcf	??_setMotorPWM& (0+255),f,b
  2708  0006C4  3771               	rlcf	(??_setMotorPWM+1)& (0+255),f,b
  2709  0006C6  C070  F073         	movff	??_setMotorPWM,setMotorPWM@PWMduty
  2710  0006CA  C071  F074         	movff	??_setMotorPWM+1,setMotorPWM@PWMduty+1
  2711                           
  2712                           ; BSR set to: 0
  2713                           ;source_motor_1.c: 28: *(m->dutyLowByte) = PWMduty & 0xFF;
  2714  0006CE  0100               	movlb	0	; () banked
  2715  0006D0  EE20 F002          	lfsr	2,2
  2716  0006D4  516E               	movf	setMotorPWM@m& (0+255),w,b
  2717  0006D6  26D9               	addwf	fsr2l,f,c
  2718  0006D8  516F               	movf	(setMotorPWM@m+1)& (0+255),w,b
  2719  0006DA  22DA               	addwfc	fsr2h,f,c
  2720  0006DC  CFDE F070          	movff	postinc2,??_setMotorPWM
  2721  0006E0  CFDD F071          	movff	postdec2,??_setMotorPWM+1
  2722  0006E4  C070  FFD9         	movff	??_setMotorPWM,fsr2l
  2723  0006E8  C071  FFDA         	movff	??_setMotorPWM+1,fsr2h
  2724  0006EC  C073  FFDF         	movff	setMotorPWM@PWMduty,indf2
  2725                           
  2726                           ; BSR set to: 0
  2727                           ;source_motor_1.c: 29: *(m->dutyHighByte) = (PWMduty >> 8) & 0x3F;
  2728  0006F0  0100               	movlb	0	; () banked
  2729  0006F2  EE20 F004          	lfsr	2,4
  2730  0006F6  516E               	movf	setMotorPWM@m& (0+255),w,b
  2731  0006F8  26D9               	addwf	fsr2l,f,c
  2732  0006FA  516F               	movf	(setMotorPWM@m+1)& (0+255),w,b
  2733  0006FC  22DA               	addwfc	fsr2h,f,c
  2734  0006FE  CFDE F070          	movff	postinc2,??_setMotorPWM
  2735  000702  CFDD F071          	movff	postdec2,??_setMotorPWM+1
  2736  000706  C070  FFD9         	movff	??_setMotorPWM,fsr2l
  2737  00070A  C071  FFDA         	movff	??_setMotorPWM+1,fsr2h
  2738  00070E  0100               	movlb	0	; () banked
  2739  000710  5174               	movf	(setMotorPWM@PWMduty+1)& (0+255),w,b
  2740  000712  0B3F               	andlw	63
  2741  000714  6EDF               	movwf	indf2,c
  2742                           
  2743                           ; BSR set to: 0
  2744                           ;source_motor_1.c: 31: if (m->direction){
  2745  000716  0100               	movlb	0	; () banked
  2746  000718  EE20 F001          	lfsr	2,1
  2747  00071C  516E               	movf	setMotorPWM@m& (0+255),w,b
  2748  00071E  26D9               	addwf	fsr2l,f,c
  2749  000720  516F               	movf	(setMotorPWM@m+1)& (0+255),w,b
  2750  000722  22DA               	addwfc	fsr2h,f,c
  2751  000724  50DF               	movf	indf2,w,c
  2752  000726  B4D8               	btfsc	status,2,c
  2753  000728  D01B               	goto	l2070
  2754                           
  2755                           ; BSR set to: 0
  2756                           ;source_motor_1.c: 32: LATB=LATB | (1<<(m->dir_pin));
  2757  00072A  0100               	movlb	0	; () banked
  2758  00072C  EE20 F006          	lfsr	2,6
  2759  000730  516E               	movf	setMotorPWM@m& (0+255),w,b
  2760  000732  26D9               	addwf	fsr2l,f,c
  2761  000734  516F               	movf	(setMotorPWM@m+1)& (0+255),w,b
  2762  000736  22DA               	addwfc	fsr2h,f,c
  2763  000738  50DF               	movf	indf2,w,c
  2764  00073A  0100               	movlb	0	; () banked
  2765  00073C  6F70               	movwf	??_setMotorPWM& (0+255),b
  2766  00073E  0E01               	movlw	1
  2767  000740  0100               	movlb	0	; () banked
  2768  000742  6F71               	movwf	(??_setMotorPWM+1)& (0+255),b
  2769  000744  0100               	movlb	0	; () banked
  2770  000746  2B70               	incf	??_setMotorPWM& (0+255),f,b
  2771  000748  D003               	goto	u1134
  2772  00074A                     u1135:
  2773  00074A  0100               	movlb	0	; () banked
  2774  00074C  90D8               	bcf	status,0,c
  2775  00074E  3771               	rlcf	(??_setMotorPWM+1)& (0+255),f,b
  2776  000750                     u1134:
  2777  000750  0100               	movlb	0	; () banked
  2778  000752  2F70               	decfsz	??_setMotorPWM& (0+255),f,b
  2779  000754  D7FA               	goto	u1135
  2780  000756  0100               	movlb	0	; () banked
  2781  000758  5171               	movf	(??_setMotorPWM+1)& (0+255),w,b
  2782  00075A  108A               	iorwf	3978,w,c	;volatile
  2783  00075C  6E8A               	movwf	3978,c	;volatile
  2784                           
  2785                           ;source_motor_1.c: 33: } else {
  2786  00075E  0012               	return	
  2787  000760                     l2070:
  2788                           
  2789                           ; BSR set to: 0
  2790                           ;source_motor_1.c: 34: LATB=LATB & (~(1<<(m->dir_pin)));
  2791  000760  0100               	movlb	0	; () banked
  2792  000762  EE20 F006          	lfsr	2,6
  2793  000766  516E               	movf	setMotorPWM@m& (0+255),w,b
  2794  000768  26D9               	addwf	fsr2l,f,c
  2795  00076A  516F               	movf	(setMotorPWM@m+1)& (0+255),w,b
  2796  00076C  22DA               	addwfc	fsr2h,f,c
  2797  00076E  50DF               	movf	indf2,w,c
  2798  000770  0100               	movlb	0	; () banked
  2799  000772  6F70               	movwf	??_setMotorPWM& (0+255),b
  2800  000774  0E01               	movlw	1
  2801  000776  0100               	movlb	0	; () banked
  2802  000778  6F71               	movwf	(??_setMotorPWM+1)& (0+255),b
  2803  00077A  0100               	movlb	0	; () banked
  2804  00077C  2B70               	incf	??_setMotorPWM& (0+255),f,b
  2805  00077E  D003               	goto	u1144
  2806  000780                     u1145:
  2807  000780  0100               	movlb	0	; () banked
  2808  000782  90D8               	bcf	status,0,c
  2809  000784  3771               	rlcf	(??_setMotorPWM+1)& (0+255),f,b
  2810  000786                     u1144:
  2811  000786  0100               	movlb	0	; () banked
  2812  000788  2F70               	decfsz	??_setMotorPWM& (0+255),f,b
  2813  00078A  D7FA               	goto	u1145
  2814  00078C  0100               	movlb	0	; () banked
  2815  00078E  5171               	movf	(??_setMotorPWM+1)& (0+255),w,b
  2816  000790  0AFF               	xorlw	255
  2817  000792  148A               	andwf	3978,w,c	;volatile
  2818  000794  6E8A               	movwf	3978,c	;volatile
  2819  000796  0012               	return	
  2820  000798                     __end_of_setMotorPWM:
  2821                           	opt stack 0
  2822                           tblptru	equ	0xFF8
  2823                           tblptrh	equ	0xFF7
  2824                           tblptrl	equ	0xFF6
  2825                           tablat	equ	0xFF5
  2826                           prodh	equ	0xFF4
  2827                           prodl	equ	0xFF3
  2828                           intcon	equ	0xFF2
  2829                           postinc0	equ	0xFEE
  2830                           wreg	equ	0xFE8
  2831                           indf2	equ	0xFDF
  2832                           postinc2	equ	0xFDE
  2833                           postdec2	equ	0xFDD
  2834                           fsr2h	equ	0xFDA
  2835                           fsr2l	equ	0xFD9
  2836                           status	equ	0xFD8
  2837                           
  2838 ;; *************** function ___wmul *****************
  2839 ;; Defined at:
  2840 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\Umul16.c"
  2841 ;; Parameters:    Size  Location     Type
  2842 ;;  multiplier      2    0[BANK0 ] unsigned int 
  2843 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  2844 ;; Auto vars:     Size  Location     Type
  2845 ;;  product         2    4[BANK0 ] unsigned int 
  2846 ;; Return value:  Size  Location     Type
  2847 ;;                  2    0[BANK0 ] unsigned int 
  2848 ;; Registers used:
  2849 ;;		wreg, status,2, status,0, prodl, prodh
  2850 ;; Tracked objects:
  2851 ;;		On entry : 0/0
  2852 ;;		On exit  : 0/0
  2853 ;;		Unchanged: 0/0
  2854 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2855 ;;      Params:         0       4       0       0
  2856 ;;      Locals:         0       2       0       0
  2857 ;;      Temps:          0       0       0       0
  2858 ;;      Totals:         0       6       0       0
  2859 ;;Total ram usage:        6 bytes
  2860 ;; Hardware stack levels used:    1
  2861 ;; Hardware stack levels required when called:    5
  2862 ;; This function calls:
  2863 ;;		Nothing
  2864 ;; This function is called by:
  2865 ;;		_setMotorPWM
  2866 ;; This function uses a non-reentrant model
  2867 ;;
  2868                           
  2869                           	psect	text13
  2870  000F52                     __ptext13:
  2871                           	opt stack 0
  2872  000F52                     ___wmul:
  2873                           	opt stack 22
  2874                           
  2875                           ; BSR set to: 0
  2876                           ;incstack = 0
  2877  000F52  0100               	movlb	0	; () banked
  2878  000F54  5160               	movf	___wmul@multiplier& (0+255),w,b
  2879  000F56  0100               	movlb	0	; () banked
  2880  000F58  0362               	mulwf	___wmul@multiplicand& (0+255),b
  2881  000F5A  CFF3 F064          	movff	prodl,___wmul@product
  2882  000F5E  CFF4 F065          	movff	prodh,___wmul@product+1
  2883  000F62  0100               	movlb	0	; () banked
  2884  000F64  5160               	movf	___wmul@multiplier& (0+255),w,b
  2885  000F66  0100               	movlb	0	; () banked
  2886  000F68  0363               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  2887  000F6A  50F3               	movf	prodl,w,c
  2888  000F6C  0100               	movlb	0	; () banked
  2889  000F6E  2765               	addwf	(___wmul@product+1)& (0+255),f,b
  2890  000F70  0100               	movlb	0	; () banked
  2891  000F72  5161               	movf	(___wmul@multiplier+1)& (0+255),w,b
  2892  000F74  0100               	movlb	0	; () banked
  2893  000F76  0362               	mulwf	___wmul@multiplicand& (0+255),b
  2894  000F78  50F3               	movf	prodl,w,c
  2895  000F7A  0100               	movlb	0	; () banked
  2896  000F7C  2765               	addwf	(___wmul@product+1)& (0+255),f,b
  2897                           
  2898                           ; BSR set to: 0
  2899  000F7E  C064  F060         	movff	___wmul@product,?___wmul
  2900  000F82  C065  F061         	movff	___wmul@product+1,?___wmul+1
  2901  000F86  0012               	return	
  2902  000F88                     __end_of___wmul:
  2903                           	opt stack 0
  2904                           tblptru	equ	0xFF8
  2905                           tblptrh	equ	0xFF7
  2906                           tblptrl	equ	0xFF6
  2907                           tablat	equ	0xFF5
  2908                           prodh	equ	0xFF4
  2909                           prodl	equ	0xFF3
  2910                           intcon	equ	0xFF2
  2911                           postinc0	equ	0xFEE
  2912                           wreg	equ	0xFE8
  2913                           indf2	equ	0xFDF
  2914                           postinc2	equ	0xFDE
  2915                           postdec2	equ	0xFDD
  2916                           fsr2h	equ	0xFDA
  2917                           fsr2l	equ	0xFD9
  2918                           status	equ	0xFD8
  2919                           
  2920 ;; *************** function ___awdiv *****************
  2921 ;; Defined at:
  2922 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\awdiv.c"
  2923 ;; Parameters:    Size  Location     Type
  2924 ;;  dividend        2    6[BANK0 ] int 
  2925 ;;  divisor         2    8[BANK0 ] int 
  2926 ;; Auto vars:     Size  Location     Type
  2927 ;;  quotient        2   12[BANK0 ] int 
  2928 ;;  sign            1   11[BANK0 ] unsigned char 
  2929 ;;  counter         1   10[BANK0 ] unsigned char 
  2930 ;; Return value:  Size  Location     Type
  2931 ;;                  2    6[BANK0 ] int 
  2932 ;; Registers used:
  2933 ;;		wreg, status,2, status,0
  2934 ;; Tracked objects:
  2935 ;;		On entry : 0/0
  2936 ;;		On exit  : 0/0
  2937 ;;		Unchanged: 0/0
  2938 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2939 ;;      Params:         0       4       0       0
  2940 ;;      Locals:         0       4       0       0
  2941 ;;      Temps:          0       0       0       0
  2942 ;;      Totals:         0       8       0       0
  2943 ;;Total ram usage:        8 bytes
  2944 ;; Hardware stack levels used:    1
  2945 ;; Hardware stack levels required when called:    5
  2946 ;; This function calls:
  2947 ;;		Nothing
  2948 ;; This function is called by:
  2949 ;;		_setMotorPWM
  2950 ;; This function uses a non-reentrant model
  2951 ;;
  2952                           
  2953                           	psect	text14
  2954  0009D0                     __ptext14:
  2955                           	opt stack 0
  2956  0009D0                     ___awdiv:
  2957                           	opt stack 22
  2958                           
  2959                           ; BSR set to: 0
  2960                           ;incstack = 0
  2961  0009D0  0E00               	movlw	0
  2962  0009D2  0100               	movlb	0	; () banked
  2963  0009D4  6F6B               	movwf	___awdiv@sign& (0+255),b
  2964                           
  2965                           ; BSR set to: 0
  2966  0009D6  0100               	movlb	0	; () banked
  2967  0009D8  AF69               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  2968  0009DA  D008               	goto	l2012
  2969                           
  2970                           ; BSR set to: 0
  2971  0009DC  0100               	movlb	0	; () banked
  2972  0009DE  6D68               	negf	___awdiv@divisor& (0+255),b
  2973  0009E0  1F69               	comf	(___awdiv@divisor+1)& (0+255),f,b
  2974  0009E2  B0D8               	btfsc	status,0,c
  2975  0009E4  2B69               	incf	(___awdiv@divisor+1)& (0+255),f,b
  2976                           
  2977                           ; BSR set to: 0
  2978  0009E6  0E01               	movlw	1
  2979  0009E8  0100               	movlb	0	; () banked
  2980  0009EA  6F6B               	movwf	___awdiv@sign& (0+255),b
  2981  0009EC                     l2012:
  2982                           
  2983                           ; BSR set to: 0
  2984  0009EC  0100               	movlb	0	; () banked
  2985  0009EE  AF67               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  2986  0009F0  D008               	goto	l2018
  2987                           
  2988                           ; BSR set to: 0
  2989  0009F2  0100               	movlb	0	; () banked
  2990  0009F4  6D66               	negf	___awdiv@dividend& (0+255),b
  2991  0009F6  1F67               	comf	(___awdiv@dividend+1)& (0+255),f,b
  2992  0009F8  B0D8               	btfsc	status,0,c
  2993  0009FA  2B67               	incf	(___awdiv@dividend+1)& (0+255),f,b
  2994                           
  2995                           ; BSR set to: 0
  2996  0009FC  0E01               	movlw	1
  2997  0009FE  0100               	movlb	0	; () banked
  2998  000A00  1B6B               	xorwf	___awdiv@sign& (0+255),f,b
  2999  000A02                     l2018:
  3000                           
  3001                           ; BSR set to: 0
  3002  000A02  0E00               	movlw	0
  3003  000A04  0100               	movlb	0	; () banked
  3004  000A06  6F6D               	movwf	(___awdiv@quotient+1)& (0+255),b
  3005  000A08  0E00               	movlw	0
  3006  000A0A  6F6C               	movwf	___awdiv@quotient& (0+255),b
  3007                           
  3008                           ; BSR set to: 0
  3009  000A0C  0100               	movlb	0	; () banked
  3010  000A0E  5168               	movf	___awdiv@divisor& (0+255),w,b
  3011  000A10  0100               	movlb	0	; () banked
  3012  000A12  1169               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  3013  000A14  B4D8               	btfsc	status,2,c
  3014  000A16  D02C               	goto	l2040
  3015                           
  3016                           ; BSR set to: 0
  3017  000A18  0E01               	movlw	1
  3018  000A1A  0100               	movlb	0	; () banked
  3019  000A1C  6F6A               	movwf	___awdiv@counter& (0+255),b
  3020  000A1E  D006               	goto	l2026
  3021  000A20                     l2024:
  3022                           
  3023                           ; BSR set to: 0
  3024  000A20  0100               	movlb	0	; () banked
  3025  000A22  90D8               	bcf	status,0,c
  3026  000A24  3768               	rlcf	___awdiv@divisor& (0+255),f,b
  3027  000A26  3769               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  3028  000A28  0100               	movlb	0	; () banked
  3029  000A2A  2B6A               	incf	___awdiv@counter& (0+255),f,b
  3030  000A2C                     l2026:
  3031                           
  3032                           ; BSR set to: 0
  3033  000A2C  0100               	movlb	0	; () banked
  3034  000A2E  AF69               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  3035  000A30  D7F7               	goto	l2024
  3036  000A32                     l2028:
  3037                           
  3038                           ; BSR set to: 0
  3039  000A32  0100               	movlb	0	; () banked
  3040  000A34  90D8               	bcf	status,0,c
  3041  000A36  376C               	rlcf	___awdiv@quotient& (0+255),f,b
  3042  000A38  376D               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  3043                           
  3044                           ; BSR set to: 0
  3045  000A3A  0100               	movlb	0	; () banked
  3046  000A3C  5168               	movf	___awdiv@divisor& (0+255),w,b
  3047  000A3E  0100               	movlb	0	; () banked
  3048  000A40  5D66               	subwf	___awdiv@dividend& (0+255),w,b
  3049  000A42  0100               	movlb	0	; () banked
  3050  000A44  5169               	movf	(___awdiv@divisor+1)& (0+255),w,b
  3051  000A46  0100               	movlb	0	; () banked
  3052  000A48  5967               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  3053  000A4A  A0D8               	btfss	status,0,c
  3054  000A4C  D00A               	goto	l2036
  3055                           
  3056                           ; BSR set to: 0
  3057  000A4E  0100               	movlb	0	; () banked
  3058  000A50  5168               	movf	___awdiv@divisor& (0+255),w,b
  3059  000A52  0100               	movlb	0	; () banked
  3060  000A54  5F66               	subwf	___awdiv@dividend& (0+255),f,b
  3061  000A56  0100               	movlb	0	; () banked
  3062  000A58  5169               	movf	(___awdiv@divisor+1)& (0+255),w,b
  3063  000A5A  0100               	movlb	0	; () banked
  3064  000A5C  5B67               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  3065                           
  3066                           ; BSR set to: 0
  3067  000A5E  0100               	movlb	0	; () banked
  3068  000A60  816C               	bsf	___awdiv@quotient& (0+255),0,b
  3069  000A62                     l2036:
  3070                           
  3071                           ; BSR set to: 0
  3072  000A62  0100               	movlb	0	; () banked
  3073  000A64  90D8               	bcf	status,0,c
  3074  000A66  3369               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  3075  000A68  3368               	rrcf	___awdiv@divisor& (0+255),f,b
  3076                           
  3077                           ; BSR set to: 0
  3078  000A6A  0100               	movlb	0	; () banked
  3079  000A6C  2F6A               	decfsz	___awdiv@counter& (0+255),f,b
  3080  000A6E  D7E1               	goto	l2028
  3081  000A70                     l2040:
  3082                           
  3083                           ; BSR set to: 0
  3084  000A70  0100               	movlb	0	; () banked
  3085  000A72  516B               	movf	___awdiv@sign& (0+255),w,b
  3086  000A74  0100               	movlb	0	; () banked
  3087  000A76  B4D8               	btfsc	status,2,c
  3088  000A78  D005               	goto	l2044
  3089                           
  3090                           ; BSR set to: 0
  3091  000A7A  0100               	movlb	0	; () banked
  3092  000A7C  6D6C               	negf	___awdiv@quotient& (0+255),b
  3093  000A7E  1F6D               	comf	(___awdiv@quotient+1)& (0+255),f,b
  3094  000A80  B0D8               	btfsc	status,0,c
  3095  000A82  2B6D               	incf	(___awdiv@quotient+1)& (0+255),f,b
  3096  000A84                     l2044:
  3097                           
  3098                           ; BSR set to: 0
  3099  000A84  C06C  F066         	movff	___awdiv@quotient,?___awdiv
  3100  000A88  C06D  F067         	movff	___awdiv@quotient+1,?___awdiv+1
  3101  000A8C  0012               	return	
  3102  000A8E                     __end_of___awdiv:
  3103                           	opt stack 0
  3104                           tblptru	equ	0xFF8
  3105                           tblptrh	equ	0xFF7
  3106                           tblptrl	equ	0xFF6
  3107                           tablat	equ	0xFF5
  3108                           prodh	equ	0xFF4
  3109                           prodl	equ	0xFF3
  3110                           intcon	equ	0xFF2
  3111                           postinc0	equ	0xFEE
  3112                           wreg	equ	0xFE8
  3113                           indf2	equ	0xFDF
  3114                           postinc2	equ	0xFDE
  3115                           postdec2	equ	0xFDD
  3116                           fsr2h	equ	0xFDA
  3117                           fsr2l	equ	0xFD9
  3118                           status	equ	0xFD8
  3119                           
  3120 ;; *************** function _SetLine *****************
  3121 ;; Defined at:
  3122 ;;		line 87 in file "source_LCD.c"
  3123 ;; Parameters:    Size  Location     Type
  3124 ;;  line            1    wreg     unsigned char 
  3125 ;; Auto vars:     Size  Location     Type
  3126 ;;  line            1    4[BANK0 ] unsigned char 
  3127 ;; Return value:  Size  Location     Type
  3128 ;;		None               void
  3129 ;; Registers used:
  3130 ;;		wreg, status,2, status,0, cstack
  3131 ;; Tracked objects:
  3132 ;;		On entry : 0/0
  3133 ;;		On exit  : 0/0
  3134 ;;		Unchanged: 0/0
  3135 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3136 ;;      Params:         0       0       0       0
  3137 ;;      Locals:         0       1       0       0
  3138 ;;      Temps:          0       0       0       0
  3139 ;;      Totals:         0       1       0       0
  3140 ;;Total ram usage:        1 bytes
  3141 ;; Hardware stack levels used:    1
  3142 ;; Hardware stack levels required when called:    8
  3143 ;; This function calls:
  3144 ;;		_SendLCD
  3145 ;; This function is called by:
  3146 ;;		_main
  3147 ;; This function uses a non-reentrant model
  3148 ;;
  3149                           
  3150                           	psect	text15
  3151  000F18                     __ptext15:
  3152                           	opt stack 0
  3153  000F18                     _SetLine:
  3154                           	opt stack 22
  3155                           
  3156                           ; BSR set to: 0
  3157                           ;incstack = 0
  3158                           ;SetLine@line stored from wreg
  3159  000F18  0100               	movlb	0	; () banked
  3160  000F1A  6F64               	movwf	SetLine@line& (0+255),b
  3161                           
  3162                           ;source_LCD.c: 88: if (line==1){
  3163  000F1C  0100               	movlb	0	; () banked
  3164  000F1E  0564               	decf	SetLine@line& (0+255),w,b
  3165  000F20  A4D8               	btfss	status,2,c
  3166  000F22  D007               	goto	l2168
  3167                           
  3168                           ; BSR set to: 0
  3169                           ;source_LCD.c: 89: SendLCD(0x80,0);
  3170  000F24  0E00               	movlw	0
  3171  000F26  0100               	movlb	0	; () banked
  3172  000F28  6F62               	movwf	SendLCD@type& (0+255),b
  3173  000F2A  0E80               	movlw	128
  3174  000F2C  ECDE  F007         	call	_SendLCD
  3175                           
  3176                           ;source_LCD.c: 90: }
  3177  000F30  D00B               	goto	l2172
  3178  000F32                     l2168:
  3179                           
  3180                           ;source_LCD.c: 91: else if(line==2){
  3181  000F32  0E02               	movlw	2
  3182  000F34  0100               	movlb	0	; () banked
  3183  000F36  1964               	xorwf	SetLine@line& (0+255),w,b
  3184  000F38  A4D8               	btfss	status,2,c
  3185  000F3A  D006               	goto	l2172
  3186                           
  3187                           ; BSR set to: 0
  3188                           ;source_LCD.c: 92: SendLCD(0xC0,0);
  3189  000F3C  0E00               	movlw	0
  3190  000F3E  0100               	movlb	0	; () banked
  3191  000F40  6F62               	movwf	SendLCD@type& (0+255),b
  3192  000F42  0EC0               	movlw	192
  3193  000F44  ECDE  F007         	call	_SendLCD
  3194  000F48                     l2172:
  3195                           
  3196                           ;source_LCD.c: 93: }
  3197                           ;source_LCD.c: 95: _delay((unsigned long)((50)*(8000000/4000000.0)));
  3198  000F48  0E21               	movlw	33
  3199  000F4A                     u1517:
  3200  000F4A  2EE8               	decfsz	wreg,f,c
  3201  000F4C  D7FE               	goto	u1517
  3202  000F4E  F000               	nop	
  3203  000F50  0012               	return		;funcret
  3204  000F52                     __end_of_SetLine:
  3205                           	opt stack 0
  3206                           tblptru	equ	0xFF8
  3207                           tblptrh	equ	0xFF7
  3208                           tblptrl	equ	0xFF6
  3209                           tablat	equ	0xFF5
  3210                           prodh	equ	0xFF4
  3211                           prodl	equ	0xFF3
  3212                           intcon	equ	0xFF2
  3213                           postinc0	equ	0xFEE
  3214                           wreg	equ	0xFE8
  3215                           indf2	equ	0xFDF
  3216                           postinc2	equ	0xFDE
  3217                           postdec2	equ	0xFDD
  3218                           fsr2h	equ	0xFDA
  3219                           fsr2l	equ	0xFD9
  3220                           status	equ	0xFD8
  3221                           
  3222 ;; *************** function _LCD_String *****************
  3223 ;; Defined at:
  3224 ;;		line 100 in file "source_LCD.c"
  3225 ;; Parameters:    Size  Location     Type
  3226 ;;  string          2    4[BANK0 ] PTR unsigned char 
  3227 ;;		 -> InterruptHandlerHigh@buf(12), buf1(16), 
  3228 ;; Auto vars:     Size  Location     Type
  3229 ;;		None
  3230 ;; Return value:  Size  Location     Type
  3231 ;;		None               void
  3232 ;; Registers used:
  3233 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3234 ;; Tracked objects:
  3235 ;;		On entry : 0/0
  3236 ;;		On exit  : 0/0
  3237 ;;		Unchanged: 0/0
  3238 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3239 ;;      Params:         0       2       0       0
  3240 ;;      Locals:         0       0       0       0
  3241 ;;      Temps:          0       0       0       0
  3242 ;;      Totals:         0       2       0       0
  3243 ;;Total ram usage:        2 bytes
  3244 ;; Hardware stack levels used:    1
  3245 ;; Hardware stack levels required when called:    8
  3246 ;; This function calls:
  3247 ;;		_SendLCD
  3248 ;; This function is called by:
  3249 ;;		_main
  3250 ;; This function uses a non-reentrant model
  3251 ;;
  3252                           
  3253                           	psect	text16
  3254  000F88                     __ptext16:
  3255                           	opt stack 0
  3256  000F88                     _LCD_String:
  3257                           	opt stack 22
  3258                           
  3259                           ;source_LCD.c: 102: while(*string != 0){
  3260                           
  3261                           ;incstack = 0
  3262  000F88  D011               	goto	l2182
  3263  000F8A                     l2176:
  3264                           
  3265                           ;source_LCD.c: 105: SendLCD(*string++,1);
  3266  000F8A  0E01               	movlw	1
  3267  000F8C  0100               	movlb	0	; () banked
  3268  000F8E  6F62               	movwf	SendLCD@type& (0+255),b
  3269  000F90  C064  FFD9         	movff	LCD_String@string,fsr2l
  3270  000F94  C065  FFDA         	movff	LCD_String@string+1,fsr2h
  3271  000F98  50DF               	movf	indf2,w,c
  3272  000F9A  ECDE  F007         	call	_SendLCD
  3273  000F9E  0100               	movlb	0	; () banked
  3274  000FA0  4B64               	infsnz	LCD_String@string& (0+255),f,b
  3275  000FA2  2B65               	incf	(LCD_String@string+1)& (0+255),f,b
  3276                           
  3277                           ; BSR set to: 0
  3278                           ;source_LCD.c: 106: _delay((unsigned long)((50)*(8000000/4000000.0)));
  3279  000FA4  0E21               	movlw	33
  3280  000FA6                     u1527:
  3281  000FA6  2EE8               	decfsz	wreg,f,c
  3282  000FA8  D7FE               	goto	u1527
  3283  000FAA  F000               	nop	
  3284  000FAC                     l2182:
  3285  000FAC  C064  FFD9         	movff	LCD_String@string,fsr2l
  3286  000FB0  C065  FFDA         	movff	LCD_String@string+1,fsr2h
  3287  000FB4  50DF               	movf	indf2,w,c
  3288  000FB6  B4D8               	btfsc	status,2,c
  3289  000FB8  0012               	return	
  3290  000FBA  D7E7               	goto	l2176
  3291  000FBC                     __end_of_LCD_String:
  3292                           	opt stack 0
  3293                           tblptru	equ	0xFF8
  3294                           tblptrh	equ	0xFF7
  3295                           tblptrl	equ	0xFF6
  3296                           tablat	equ	0xFF5
  3297                           prodh	equ	0xFF4
  3298                           prodl	equ	0xFF3
  3299                           intcon	equ	0xFF2
  3300                           postinc0	equ	0xFEE
  3301                           wreg	equ	0xFE8
  3302                           indf2	equ	0xFDF
  3303                           postinc2	equ	0xFDE
  3304                           postdec2	equ	0xFDD
  3305                           fsr2h	equ	0xFDA
  3306                           fsr2l	equ	0xFD9
  3307                           status	equ	0xFD8
  3308                           
  3309 ;; *************** function _LCD_Init *****************
  3310 ;; Defined at:
  3311 ;;		line 47 in file "source_LCD.c"
  3312 ;; Parameters:    Size  Location     Type
  3313 ;;		None
  3314 ;; Auto vars:     Size  Location     Type
  3315 ;;		None
  3316 ;; Return value:  Size  Location     Type
  3317 ;;		None               void
  3318 ;; Registers used:
  3319 ;;		wreg, status,2, status,0, cstack
  3320 ;; Tracked objects:
  3321 ;;		On entry : 0/0
  3322 ;;		On exit  : 0/0
  3323 ;;		Unchanged: 0/0
  3324 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3325 ;;      Params:         0       0       0       0
  3326 ;;      Locals:         0       0       0       0
  3327 ;;      Temps:          0       1       0       0
  3328 ;;      Totals:         0       1       0       0
  3329 ;;Total ram usage:        1 bytes
  3330 ;; Hardware stack levels used:    1
  3331 ;; Hardware stack levels required when called:    8
  3332 ;; This function calls:
  3333 ;;		_LCDout
  3334 ;;		_SendLCD
  3335 ;; This function is called by:
  3336 ;;		_main
  3337 ;; This function uses a non-reentrant model
  3338 ;;
  3339                           
  3340                           	psect	text17
  3341  0008E8                     __ptext17:
  3342                           	opt stack 0
  3343  0008E8                     _LCD_Init:
  3344                           	opt stack 22
  3345                           
  3346                           ;source_LCD.c: 49: LATA = 0;
  3347                           
  3348                           ;incstack = 0
  3349  0008E8  0E00               	movlw	0
  3350  0008EA  6E89               	movwf	3977,c	;volatile
  3351                           
  3352                           ;source_LCD.c: 50: LATD = 0;
  3353  0008EC  0E00               	movlw	0
  3354  0008EE  6E8C               	movwf	3980,c	;volatile
  3355                           
  3356                           ;source_LCD.c: 51: LATC = 0;
  3357  0008F0  0E00               	movlw	0
  3358  0008F2  6E8B               	movwf	3979,c	;volatile
  3359                           
  3360                           ;source_LCD.c: 53: TRISA = 0;
  3361  0008F4  0E00               	movlw	0
  3362  0008F6  6E92               	movwf	3986,c	;volatile
  3363                           
  3364                           ;source_LCD.c: 54: TRISC = 0;
  3365  0008F8  0E00               	movlw	0
  3366  0008FA  6E94               	movwf	3988,c	;volatile
  3367                           
  3368                           ;source_LCD.c: 55: TRISD = 0;
  3369  0008FC  0E00               	movlw	0
  3370  0008FE  6E95               	movwf	3989,c	;volatile
  3371                           
  3372                           ;source_LCD.c: 59: _delay((unsigned long)((15)*(8000000/4000.0)));
  3373  000900  0E27               	movlw	39
  3374  000902  0100               	movlb	0	; () banked
  3375  000904  6F64               	movwf	??_LCD_Init& (0+255),b
  3376  000906  0EF5               	movlw	245
  3377  000908                     u1537:
  3378  000908  2EE8               	decfsz	wreg,f,c
  3379  00090A  D7FE               	goto	u1537
  3380  00090C  2F64               	decfsz	??_LCD_Init& (0+255),f,b
  3381  00090E  D7FC               	goto	u1537
  3382  000910  F000               	nop	
  3383                           
  3384                           ;source_LCD.c: 61: LCDout(0b0011);
  3385  000912  0E03               	movlw	3
  3386  000914  EC47  F005         	call	_LCDout
  3387                           
  3388                           ;source_LCD.c: 63: _delay((unsigned long)((5)*(8000000/4000.0)));
  3389  000918  0E0D               	movlw	13
  3390  00091A  0100               	movlb	0	; () banked
  3391  00091C  6F64               	movwf	??_LCD_Init& (0+255),b
  3392  00091E  0EFC               	movlw	252
  3393  000920                     u1547:
  3394  000920  2EE8               	decfsz	wreg,f,c
  3395  000922  D7FE               	goto	u1547
  3396  000924  2F64               	decfsz	??_LCD_Init& (0+255),f,b
  3397  000926  D7FC               	goto	u1547
  3398                           
  3399                           ;source_LCD.c: 65: LCDout(0b0011);
  3400  000928  0E03               	movlw	3
  3401  00092A  EC47  F005         	call	_LCDout
  3402                           
  3403                           ;source_LCD.c: 67: _delay((unsigned long)((200)*(8000000/4000000.0)));
  3404  00092E  0E85               	movlw	133
  3405  000930                     u1557:
  3406  000930  2EE8               	decfsz	wreg,f,c
  3407  000932  D7FE               	goto	u1557
  3408  000934  F000               	nop	
  3409                           
  3410                           ;source_LCD.c: 69: LCDout(0b0011);
  3411  000936  0E03               	movlw	3
  3412  000938  EC47  F005         	call	_LCDout
  3413                           
  3414                           ;source_LCD.c: 71: _delay((unsigned long)((50)*(8000000/4000000.0)));
  3415  00093C  0E21               	movlw	33
  3416  00093E                     u1567:
  3417  00093E  2EE8               	decfsz	wreg,f,c
  3418  000940  D7FE               	goto	u1567
  3419  000942  F000               	nop	
  3420                           
  3421                           ;source_LCD.c: 73: LCDout(0b0010);
  3422  000944  0E02               	movlw	2
  3423  000946  EC47  F005         	call	_LCDout
  3424                           
  3425                           ;source_LCD.c: 76: SendLCD(0b00101100,0);
  3426  00094A  0E00               	movlw	0
  3427  00094C  0100               	movlb	0	; () banked
  3428  00094E  6F62               	movwf	SendLCD@type& (0+255),b
  3429  000950  0E2C               	movlw	44
  3430  000952  ECDE  F007         	call	_SendLCD
  3431                           
  3432                           ;source_LCD.c: 77: _delay((unsigned long)((10)*(8000000/4000.0)));
  3433  000956  0E1A               	movlw	26
  3434  000958  0100               	movlb	0	; () banked
  3435  00095A  6F64               	movwf	??_LCD_Init& (0+255),b
  3436  00095C  0EF8               	movlw	248
  3437  00095E                     u1577:
  3438  00095E  2EE8               	decfsz	wreg,f,c
  3439  000960  D7FE               	goto	u1577
  3440  000962  2F64               	decfsz	??_LCD_Init& (0+255),f,b
  3441  000964  D7FC               	goto	u1577
  3442  000966  D000               	nop2	
  3443                           
  3444                           ;source_LCD.c: 78: SendLCD(0b00001000,0);
  3445  000968  0E00               	movlw	0
  3446  00096A  0100               	movlb	0	; () banked
  3447  00096C  6F62               	movwf	SendLCD@type& (0+255),b
  3448  00096E  0E08               	movlw	8
  3449  000970  ECDE  F007         	call	_SendLCD
  3450                           
  3451                           ;source_LCD.c: 79: _delay((unsigned long)((10)*(8000000/4000.0)));
  3452  000974  0E1A               	movlw	26
  3453  000976  0100               	movlb	0	; () banked
  3454  000978  6F64               	movwf	??_LCD_Init& (0+255),b
  3455  00097A  0EF8               	movlw	248
  3456  00097C                     u1587:
  3457  00097C  2EE8               	decfsz	wreg,f,c
  3458  00097E  D7FE               	goto	u1587
  3459  000980  2F64               	decfsz	??_LCD_Init& (0+255),f,b
  3460  000982  D7FC               	goto	u1587
  3461  000984  D000               	nop2	
  3462                           
  3463                           ;source_LCD.c: 80: SendLCD(0b00000001,0);
  3464  000986  0E00               	movlw	0
  3465  000988  0100               	movlb	0	; () banked
  3466  00098A  6F62               	movwf	SendLCD@type& (0+255),b
  3467  00098C  0E01               	movlw	1
  3468  00098E  ECDE  F007         	call	_SendLCD
  3469                           
  3470                           ;source_LCD.c: 81: _delay((unsigned long)((10)*(8000000/4000.0)));
  3471  000992  0E1A               	movlw	26
  3472  000994  0100               	movlb	0	; () banked
  3473  000996  6F64               	movwf	??_LCD_Init& (0+255),b
  3474  000998  0EF8               	movlw	248
  3475  00099A                     u1597:
  3476  00099A  2EE8               	decfsz	wreg,f,c
  3477  00099C  D7FE               	goto	u1597
  3478  00099E  2F64               	decfsz	??_LCD_Init& (0+255),f,b
  3479  0009A0  D7FC               	goto	u1597
  3480  0009A2  D000               	nop2	
  3481                           
  3482                           ;source_LCD.c: 82: SendLCD(0b00000000,0);
  3483  0009A4  0E00               	movlw	0
  3484  0009A6  0100               	movlb	0	; () banked
  3485  0009A8  6F62               	movwf	SendLCD@type& (0+255),b
  3486  0009AA  0E00               	movlw	0
  3487  0009AC  ECDE  F007         	call	_SendLCD
  3488                           
  3489                           ;source_LCD.c: 83: _delay((unsigned long)((10)*(8000000/4000.0)));
  3490  0009B0  0E1A               	movlw	26
  3491  0009B2  0100               	movlb	0	; () banked
  3492  0009B4  6F64               	movwf	??_LCD_Init& (0+255),b
  3493  0009B6  0EF8               	movlw	248
  3494  0009B8                     u1607:
  3495  0009B8  2EE8               	decfsz	wreg,f,c
  3496  0009BA  D7FE               	goto	u1607
  3497  0009BC  2F64               	decfsz	??_LCD_Init& (0+255),f,b
  3498  0009BE  D7FC               	goto	u1607
  3499  0009C0  D000               	nop2	
  3500                           
  3501                           ;source_LCD.c: 84: SendLCD(0b00001101,0);
  3502  0009C2  0E00               	movlw	0
  3503  0009C4  0100               	movlb	0	; () banked
  3504  0009C6  6F62               	movwf	SendLCD@type& (0+255),b
  3505  0009C8  0E0D               	movlw	13
  3506  0009CA  ECDE  F007         	call	_SendLCD
  3507  0009CE  0012               	return		;funcret
  3508  0009D0                     __end_of_LCD_Init:
  3509                           	opt stack 0
  3510                           tblptru	equ	0xFF8
  3511                           tblptrh	equ	0xFF7
  3512                           tblptrl	equ	0xFF6
  3513                           tablat	equ	0xFF5
  3514                           prodh	equ	0xFF4
  3515                           prodl	equ	0xFF3
  3516                           intcon	equ	0xFF2
  3517                           postinc0	equ	0xFEE
  3518                           wreg	equ	0xFE8
  3519                           indf2	equ	0xFDF
  3520                           postinc2	equ	0xFDE
  3521                           postdec2	equ	0xFDD
  3522                           fsr2h	equ	0xFDA
  3523                           fsr2l	equ	0xFD9
  3524                           status	equ	0xFD8
  3525                           
  3526 ;; *************** function _LCD_Clear *****************
  3527 ;; Defined at:
  3528 ;;		line 112 in file "source_LCD.c"
  3529 ;; Parameters:    Size  Location     Type
  3530 ;;		None
  3531 ;; Auto vars:     Size  Location     Type
  3532 ;;		None
  3533 ;; Return value:  Size  Location     Type
  3534 ;;		None               void
  3535 ;; Registers used:
  3536 ;;		wreg, status,2, status,0, cstack
  3537 ;; Tracked objects:
  3538 ;;		On entry : 0/0
  3539 ;;		On exit  : 0/0
  3540 ;;		Unchanged: 0/0
  3541 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3542 ;;      Params:         0       0       0       0
  3543 ;;      Locals:         0       0       0       0
  3544 ;;      Temps:          0       1       0       0
  3545 ;;      Totals:         0       1       0       0
  3546 ;;Total ram usage:        1 bytes
  3547 ;; Hardware stack levels used:    1
  3548 ;; Hardware stack levels required when called:    8
  3549 ;; This function calls:
  3550 ;;		_SendLCD
  3551 ;; This function is called by:
  3552 ;;		_main
  3553 ;; This function uses a non-reentrant model
  3554 ;;
  3555                           
  3556                           	psect	text18
  3557  00108A                     __ptext18:
  3558                           	opt stack 0
  3559  00108A                     _LCD_Clear:
  3560                           	opt stack 22
  3561                           
  3562                           ;source_LCD.c: 114: SendLCD(0b00000001,0);
  3563                           
  3564                           ;incstack = 0
  3565  00108A  0E00               	movlw	0
  3566  00108C  0100               	movlb	0	; () banked
  3567  00108E  6F62               	movwf	SendLCD@type& (0+255),b
  3568  001090  0E01               	movlw	1
  3569  001092  ECDE  F007         	call	_SendLCD
  3570                           
  3571                           ;source_LCD.c: 115: _delay((unsigned long)((10)*(8000000/4000.0)));
  3572  001096  0E1A               	movlw	26
  3573  001098  0100               	movlb	0	; () banked
  3574  00109A  6F64               	movwf	??_LCD_Clear& (0+255),b
  3575  00109C  0EF8               	movlw	248
  3576  00109E                     u1617:
  3577  00109E  2EE8               	decfsz	wreg,f,c
  3578  0010A0  D7FE               	goto	u1617
  3579  0010A2  2F64               	decfsz	??_LCD_Clear& (0+255),f,b
  3580  0010A4  D7FC               	goto	u1617
  3581  0010A6  D000               	nop2	
  3582  0010A8  0012               	return		;funcret
  3583  0010AA                     __end_of_LCD_Clear:
  3584                           	opt stack 0
  3585                           tblptru	equ	0xFF8
  3586                           tblptrh	equ	0xFF7
  3587                           tblptrl	equ	0xFF6
  3588                           tablat	equ	0xFF5
  3589                           prodh	equ	0xFF4
  3590                           prodl	equ	0xFF3
  3591                           intcon	equ	0xFF2
  3592                           postinc0	equ	0xFEE
  3593                           wreg	equ	0xFE8
  3594                           indf2	equ	0xFDF
  3595                           postinc2	equ	0xFDE
  3596                           postdec2	equ	0xFDD
  3597                           fsr2h	equ	0xFDA
  3598                           fsr2l	equ	0xFD9
  3599                           status	equ	0xFD8
  3600                           
  3601 ;; *************** function _SendLCD *****************
  3602 ;; Defined at:
  3603 ;;		line 39 in file "source_LCD.c"
  3604 ;; Parameters:    Size  Location     Type
  3605 ;;  Byte            1    wreg     unsigned char 
  3606 ;;  type            1    2[BANK0 ] unsigned char 
  3607 ;; Auto vars:     Size  Location     Type
  3608 ;;  Byte            1    3[BANK0 ] unsigned char 
  3609 ;; Return value:  Size  Location     Type
  3610 ;;		None               void
  3611 ;; Registers used:
  3612 ;;		wreg, status,2, status,0, cstack
  3613 ;; Tracked objects:
  3614 ;;		On entry : 0/0
  3615 ;;		On exit  : 0/0
  3616 ;;		Unchanged: 0/0
  3617 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3618 ;;      Params:         0       1       0       0
  3619 ;;      Locals:         0       1       0       0
  3620 ;;      Temps:          0       0       0       0
  3621 ;;      Totals:         0       2       0       0
  3622 ;;Total ram usage:        2 bytes
  3623 ;; Hardware stack levels used:    1
  3624 ;; Hardware stack levels required when called:    7
  3625 ;; This function calls:
  3626 ;;		_LCDout
  3627 ;; This function is called by:
  3628 ;;		_LCD_Init
  3629 ;;		_SetLine
  3630 ;;		_LCD_String
  3631 ;;		_LCD_Clear
  3632 ;; This function uses a non-reentrant model
  3633 ;;
  3634                           
  3635                           	psect	text19
  3636  000FBC                     __ptext19:
  3637                           	opt stack 0
  3638  000FBC                     _SendLCD:
  3639                           	opt stack 22
  3640                           
  3641                           ;incstack = 0
  3642                           ;SendLCD@Byte stored from wreg
  3643  000FBC  0100               	movlb	0	; () banked
  3644  000FBE  6F63               	movwf	SendLCD@Byte& (0+255),b
  3645                           
  3646                           ;source_LCD.c: 40: LATAbits.LATA6 = type;
  3647  000FC0  0100               	movlb	0	; () banked
  3648  000FC2  B162               	btfsc	SendLCD@type& (0+255),0,b
  3649  000FC4  D002               	bra	u1155
  3650  000FC6  9C89               	bcf	3977,6,c	;volatile
  3651  000FC8  D001               	bra	u1156
  3652  000FCA                     u1155:
  3653  000FCA  8C89               	bsf	3977,6,c	;volatile
  3654  000FCC                     u1156:
  3655                           
  3656                           ;source_LCD.c: 42: LCDout((Byte & 0b11110000)>>4);
  3657  000FCC  0100               	movlb	0	; () banked
  3658  000FCE  3963               	swapf	SendLCD@Byte& (0+255),w,b
  3659  000FD0  0B0F               	andlw	15
  3660  000FD2  0B0F               	andlw	15
  3661  000FD4  EC47  F005         	call	_LCDout
  3662                           
  3663                           ;source_LCD.c: 43: _delay((unsigned long)((10)*(8000000/4000000.0)));
  3664  000FD8  0E06               	movlw	6
  3665  000FDA                     u1627:
  3666  000FDA  2EE8               	decfsz	wreg,f,c
  3667  000FDC  D7FE               	goto	u1627
  3668  000FDE  D000               	nop2		;nop
  3669                           
  3670                           ;source_LCD.c: 44: LCDout((Byte & 0b00001111));
  3671  000FE0  0100               	movlb	0	; () banked
  3672  000FE2  5163               	movf	SendLCD@Byte& (0+255),w,b
  3673  000FE4  0B0F               	andlw	15
  3674  000FE6  EC47  F005         	call	_LCDout
  3675  000FEA  0012               	return		;funcret
  3676  000FEC                     __end_of_SendLCD:
  3677                           	opt stack 0
  3678                           tblptru	equ	0xFF8
  3679                           tblptrh	equ	0xFF7
  3680                           tblptrl	equ	0xFF6
  3681                           tablat	equ	0xFF5
  3682                           prodh	equ	0xFF4
  3683                           prodl	equ	0xFF3
  3684                           intcon	equ	0xFF2
  3685                           postinc0	equ	0xFEE
  3686                           wreg	equ	0xFE8
  3687                           indf2	equ	0xFDF
  3688                           postinc2	equ	0xFDE
  3689                           postdec2	equ	0xFDD
  3690                           fsr2h	equ	0xFDA
  3691                           fsr2l	equ	0xFD9
  3692                           status	equ	0xFD8
  3693                           
  3694 ;; *************** function _LCDout *****************
  3695 ;; Defined at:
  3696 ;;		line 27 in file "source_LCD.c"
  3697 ;; Parameters:    Size  Location     Type
  3698 ;;  number          1    wreg     unsigned char 
  3699 ;; Auto vars:     Size  Location     Type
  3700 ;;  number          1    1[BANK0 ] unsigned char 
  3701 ;; Return value:  Size  Location     Type
  3702 ;;		None               void
  3703 ;; Registers used:
  3704 ;;		wreg, status,2, status,0, cstack
  3705 ;; Tracked objects:
  3706 ;;		On entry : 0/0
  3707 ;;		On exit  : 0/0
  3708 ;;		Unchanged: 0/0
  3709 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3710 ;;      Params:         0       0       0       0
  3711 ;;      Locals:         0       1       0       0
  3712 ;;      Temps:          0       1       0       0
  3713 ;;      Totals:         0       2       0       0
  3714 ;;Total ram usage:        2 bytes
  3715 ;; Hardware stack levels used:    1
  3716 ;; Hardware stack levels required when called:    6
  3717 ;; This function calls:
  3718 ;;		_E_TOG
  3719 ;; This function is called by:
  3720 ;;		_SendLCD
  3721 ;;		_LCD_Init
  3722 ;; This function uses a non-reentrant model
  3723 ;;
  3724                           
  3725                           	psect	text20
  3726  000A8E                     __ptext20:
  3727                           	opt stack 0
  3728  000A8E                     _LCDout:
  3729                           	opt stack 22
  3730                           
  3731                           ;incstack = 0
  3732                           ;LCDout@number stored from wreg
  3733  000A8E  0100               	movlb	0	; () banked
  3734  000A90  6F61               	movwf	LCDout@number& (0+255),b
  3735                           
  3736                           ;source_LCD.c: 29: LATCbits.LATC1 = (number & 0b0001);
  3737  000A92  C061  F060         	movff	LCDout@number,??_LCDout
  3738  000A96  0E01               	movlw	1
  3739  000A98  0100               	movlb	0	; () banked
  3740  000A9A  1760               	andwf	??_LCDout& (0+255),f,b
  3741  000A9C  0100               	movlb	0	; () banked
  3742  000A9E  4760               	rlncf	??_LCDout& (0+255),f,b
  3743  000AA0  508B               	movf	3979,w,c	;volatile
  3744  000AA2  0100               	movlb	0	; () banked
  3745  000AA4  1960               	xorwf	??_LCDout& (0+255),w,b
  3746  000AA6  0BFD               	andlw	-3
  3747  000AA8  1960               	xorwf	??_LCDout& (0+255),w,b
  3748  000AAA  6E8B               	movwf	3979,c	;volatile
  3749                           
  3750                           ;source_LCD.c: 30: LATCbits.LATC2 = (number & 0b0010)>>1;
  3751  000AAC  C061  F060         	movff	LCDout@number,??_LCDout
  3752  000AB0  0100               	movlb	0	; () banked
  3753  000AB2  90D8               	bcf	status,0,c
  3754  000AB4  3360               	rrcf	??_LCDout& (0+255),f,b
  3755  000AB6  0E01               	movlw	1
  3756  000AB8  0100               	movlb	0	; () banked
  3757  000ABA  1760               	andwf	??_LCDout& (0+255),f,b
  3758  000ABC  0100               	movlb	0	; () banked
  3759  000ABE  4760               	rlncf	??_LCDout& (0+255),f,b
  3760  000AC0  4760               	rlncf	??_LCDout& (0+255),f,b
  3761  000AC2  508B               	movf	3979,w,c	;volatile
  3762  000AC4  0100               	movlb	0	; () banked
  3763  000AC6  1960               	xorwf	??_LCDout& (0+255),w,b
  3764  000AC8  0BFB               	andlw	-5
  3765  000ACA  1960               	xorwf	??_LCDout& (0+255),w,b
  3766  000ACC  6E8B               	movwf	3979,c	;volatile
  3767                           
  3768                           ;source_LCD.c: 31: LATDbits.LATD0 = (number & 0b0100)>>2;
  3769  000ACE  C061  F060         	movff	LCDout@number,??_LCDout
  3770  000AD2  0100               	movlb	0	; () banked
  3771  000AD4  90D8               	bcf	status,0,c
  3772  000AD6  3360               	rrcf	??_LCDout& (0+255),f,b
  3773  000AD8  0100               	movlb	0	; () banked
  3774  000ADA  90D8               	bcf	status,0,c
  3775  000ADC  3360               	rrcf	??_LCDout& (0+255),f,b
  3776  000ADE  0E01               	movlw	1
  3777  000AE0  0100               	movlb	0	; () banked
  3778  000AE2  1760               	andwf	??_LCDout& (0+255),f,b
  3779  000AE4  508C               	movf	3980,w,c	;volatile
  3780  000AE6  0100               	movlb	0	; () banked
  3781  000AE8  1960               	xorwf	??_LCDout& (0+255),w,b
  3782  000AEA  0BFE               	andlw	-2
  3783  000AEC  1960               	xorwf	??_LCDout& (0+255),w,b
  3784  000AEE  6E8C               	movwf	3980,c	;volatile
  3785                           
  3786                           ;source_LCD.c: 32: LATDbits.LATD1 = (number & 0b1000)>>3;
  3787  000AF0  C061  F060         	movff	LCDout@number,??_LCDout
  3788  000AF4  0100               	movlb	0	; () banked
  3789  000AF6  90D8               	bcf	status,0,c
  3790  000AF8  3360               	rrcf	??_LCDout& (0+255),f,b
  3791  000AFA  0100               	movlb	0	; () banked
  3792  000AFC  90D8               	bcf	status,0,c
  3793  000AFE  3360               	rrcf	??_LCDout& (0+255),f,b
  3794  000B00  0100               	movlb	0	; () banked
  3795  000B02  90D8               	bcf	status,0,c
  3796  000B04  3360               	rrcf	??_LCDout& (0+255),f,b
  3797  000B06  0E01               	movlw	1
  3798  000B08  0100               	movlb	0	; () banked
  3799  000B0A  1760               	andwf	??_LCDout& (0+255),f,b
  3800  000B0C  0100               	movlb	0	; () banked
  3801  000B0E  4760               	rlncf	??_LCDout& (0+255),f,b
  3802  000B10  508C               	movf	3980,w,c	;volatile
  3803  000B12  0100               	movlb	0	; () banked
  3804  000B14  1960               	xorwf	??_LCDout& (0+255),w,b
  3805  000B16  0BFD               	andlw	-3
  3806  000B18  1960               	xorwf	??_LCDout& (0+255),w,b
  3807  000B1A  6E8C               	movwf	3980,c	;volatile
  3808                           
  3809                           ; BSR set to: 0
  3810                           ;source_LCD.c: 34: E_TOG();
  3811  000B1C  EC63  F008         	call	_E_TOG	;wreg free
  3812                           
  3813                           ;source_LCD.c: 35: _delay((unsigned long)((5)*(8000000/4000000.0)));
  3814  000B20  0E03               	movlw	3
  3815  000B22                     u1637:
  3816  000B22  2EE8               	decfsz	wreg,f,c
  3817  000B24  D7FE               	goto	u1637
  3818  000B26  F000               	nop	
  3819  000B28  0012               	return		;funcret
  3820  000B2A                     __end_of_LCDout:
  3821                           	opt stack 0
  3822                           tblptru	equ	0xFF8
  3823                           tblptrh	equ	0xFF7
  3824                           tblptrl	equ	0xFF6
  3825                           tablat	equ	0xFF5
  3826                           prodh	equ	0xFF4
  3827                           prodl	equ	0xFF3
  3828                           intcon	equ	0xFF2
  3829                           postinc0	equ	0xFEE
  3830                           wreg	equ	0xFE8
  3831                           indf2	equ	0xFDF
  3832                           postinc2	equ	0xFDE
  3833                           postdec2	equ	0xFDD
  3834                           fsr2h	equ	0xFDA
  3835                           fsr2l	equ	0xFD9
  3836                           status	equ	0xFD8
  3837                           
  3838 ;; *************** function _E_TOG *****************
  3839 ;; Defined at:
  3840 ;;		line 20 in file "source_LCD.c"
  3841 ;; Parameters:    Size  Location     Type
  3842 ;;		None
  3843 ;; Auto vars:     Size  Location     Type
  3844 ;;		None
  3845 ;; Return value:  Size  Location     Type
  3846 ;;		None               void
  3847 ;; Registers used:
  3848 ;;		wreg
  3849 ;; Tracked objects:
  3850 ;;		On entry : 0/0
  3851 ;;		On exit  : 0/0
  3852 ;;		Unchanged: 0/0
  3853 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3854 ;;      Params:         0       0       0       0
  3855 ;;      Locals:         0       0       0       0
  3856 ;;      Temps:          0       0       0       0
  3857 ;;      Totals:         0       0       0       0
  3858 ;;Total ram usage:        0 bytes
  3859 ;; Hardware stack levels used:    1
  3860 ;; Hardware stack levels required when called:    5
  3861 ;; This function calls:
  3862 ;;		Nothing
  3863 ;; This function is called by:
  3864 ;;		_LCDout
  3865 ;; This function uses a non-reentrant model
  3866 ;;
  3867                           
  3868                           	psect	text21
  3869  0010C6                     __ptext21:
  3870                           	opt stack 0
  3871  0010C6                     _E_TOG:
  3872                           	opt stack 22
  3873                           
  3874                           ;source_LCD.c: 21: LATCbits.LATC0=1;
  3875                           
  3876                           ;incstack = 0
  3877  0010C6  808B               	bsf	3979,0,c	;volatile
  3878                           
  3879                           ;source_LCD.c: 22: _delay((unsigned long)((5)*(8000000/4000000.0)));
  3880  0010C8  0E03               	movlw	3
  3881  0010CA                     u1647:
  3882  0010CA  2EE8               	decfsz	wreg,f,c
  3883  0010CC  D7FE               	goto	u1647
  3884  0010CE  F000               	nop	
  3885                           
  3886                           ;source_LCD.c: 23: LATCbits.LATC0=0;
  3887  0010D0  908B               	bcf	3979,0,c	;volatile
  3888  0010D2  0012               	return		;funcret
  3889  0010D4                     __end_of_E_TOG:
  3890                           	opt stack 0
  3891                           tblptru	equ	0xFF8
  3892                           tblptrh	equ	0xFF7
  3893                           tblptrl	equ	0xFF6
  3894                           tablat	equ	0xFF5
  3895                           prodh	equ	0xFF4
  3896                           prodl	equ	0xFF3
  3897                           intcon	equ	0xFF2
  3898                           postinc0	equ	0xFEE
  3899                           wreg	equ	0xFE8
  3900                           indf2	equ	0xFDF
  3901                           postinc2	equ	0xFDE
  3902                           postdec2	equ	0xFDD
  3903                           fsr2h	equ	0xFDA
  3904                           fsr2l	equ	0xFD9
  3905                           status	equ	0xFD8
  3906                           
  3907 ;; *************** function _InterruptHandlerHigh *****************
  3908 ;; Defined at:
  3909 ;;		line 230 in file "main_1.c"
  3910 ;; Parameters:    Size  Location     Type
  3911 ;;		None
  3912 ;; Auto vars:     Size  Location     Type
  3913 ;;  RFIDa           2   35[COMRAM] int 
  3914 ;;  buf            12   21[COMRAM] unsigned char [12]
  3915 ;;  num             2   33[COMRAM] int 
  3916 ;;  counter         1   37[COMRAM] unsigned char 
  3917 ;; Return value:  Size  Location     Type
  3918 ;;		None               void
  3919 ;; Registers used:
  3920 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3921 ;; Tracked objects:
  3922 ;;		On entry : 0/0
  3923 ;;		On exit  : 0/0
  3924 ;;		Unchanged: 0/0
  3925 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3926 ;;      Params:         0       0       0       0
  3927 ;;      Locals:        17       0       0       0
  3928 ;;      Temps:         15       0       0       0
  3929 ;;      Totals:        32       0       0       0
  3930 ;;Total ram usage:       32 bytes
  3931 ;; Hardware stack levels used:    1
  3932 ;; Hardware stack levels required when called:    4
  3933 ;; This function calls:
  3934 ;;		_getCharSerial
  3935 ;;		i2_LCD_String
  3936 ;;		i2_SendLCD
  3937 ;; This function is called by:
  3938 ;;		Interrupt level 2
  3939 ;; This function uses a non-reentrant model
  3940 ;;
  3941                           
  3942                           	psect	intcode
  3943  000008                     __pintcode:
  3944                           	opt stack 0
  3945  000008                     _InterruptHandlerHigh:
  3946                           	opt stack 22
  3947                           
  3948                           ;incstack = 0
  3949  000008  8239               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  3950  00000A  CFFA F008          	movff	pclath,??_InterruptHandlerHigh+1
  3951  00000E  CFFB F009          	movff	pclatu,??_InterruptHandlerHigh+2
  3952  000012  CFE9 F00A          	movff	fsr0l,??_InterruptHandlerHigh+3
  3953  000016  CFEA F00B          	movff	fsr0h,??_InterruptHandlerHigh+4
  3954  00001A  CFE1 F00C          	movff	fsr1l,??_InterruptHandlerHigh+5
  3955  00001E  CFE2 F00D          	movff	fsr1h,??_InterruptHandlerHigh+6
  3956  000022  CFD9 F00E          	movff	fsr2l,??_InterruptHandlerHigh+7
  3957  000026  CFDA F00F          	movff	fsr2h,??_InterruptHandlerHigh+8
  3958  00002A  CFF3 F010          	movff	prodl,??_InterruptHandlerHigh+9
  3959  00002E  CFF4 F011          	movff	prodh,??_InterruptHandlerHigh+10
  3960  000032  CFF6 F012          	movff	tblptrl,??_InterruptHandlerHigh+11
  3961  000036  CFF7 F013          	movff	tblptrh,??_InterruptHandlerHigh+12
  3962  00003A  CFF8 F014          	movff	tblptru,??_InterruptHandlerHigh+13
  3963  00003E  CFF5 F015          	movff	tablat,??_InterruptHandlerHigh+14
  3964                           
  3965                           ;main_1.c: 231: if (PIR1bits.RCIF) {
  3966  000042  AA9E               	btfss	3998,5,c	;volatile
  3967  000044  D030               	goto	i2l271
  3968                           
  3969                           ;main_1.c: 233: char buf[12];
  3970                           ;main_1.c: 234: char counter = 0;
  3971  000046  0E00               	movlw	0
  3972  000048  6E26               	movwf	InterruptHandlerHigh@counter,c
  3973                           
  3974                           ;main_1.c: 235: int num = getCharSerial();
  3975  00004A  EC71  F008         	call	_getCharSerial	;wreg free
  3976  00004E  6E07               	movwf	??_InterruptHandlerHigh& (0+255),c
  3977  000050  5007               	movf	??_InterruptHandlerHigh,w,c
  3978  000052  6E22               	movwf	InterruptHandlerHigh@num,c
  3979  000054  6A23               	clrf	InterruptHandlerHigh@num+1,c
  3980                           
  3981                           ;main_1.c: 236: if (num == 2) {
  3982  000056  0E02               	movlw	2
  3983  000058  1822               	xorwf	InterruptHandlerHigh@num,w,c
  3984  00005A  1023               	iorwf	InterruptHandlerHigh@num+1,w,c
  3985  00005C  A4D8               	btfss	status,2,c
  3986  00005E  D023               	goto	i2l271
  3987                           
  3988                           ;main_1.c: 237: SendLCD(0b00000001,0);
  3989  000060  0E00               	movlw	0
  3990  000062  6E03               	movwf	i2SendLCD@type,c
  3991  000064  0E01               	movlw	1
  3992  000066  EC0E  F008         	call	i2_SendLCD
  3993                           
  3994                           ;main_1.c: 239: while (counter < 12) {
  3995  00006A  D011               	goto	i2l1986
  3996  00006C                     i2l1980:
  3997                           
  3998                           ;main_1.c: 240: int RFIDa = getCharSerial();
  3999  00006C  EC71  F008         	call	_getCharSerial	;wreg free
  4000  000070  6E07               	movwf	??_InterruptHandlerHigh& (0+255),c
  4001  000072  5007               	movf	??_InterruptHandlerHigh,w,c
  4002  000074  6E24               	movwf	InterruptHandlerHigh@RFIDa,c
  4003  000076  6A25               	clrf	InterruptHandlerHigh@RFIDa+1,c
  4004                           
  4005                           ;main_1.c: 241: buf[counter] = RFIDa;
  4006  000078  5026               	movf	InterruptHandlerHigh@counter,w,c
  4007  00007A  0D01               	mullw	1
  4008  00007C  0E16               	movlw	low InterruptHandlerHigh@buf
  4009  00007E  24F3               	addwf	prodl,w,c
  4010  000080  6ED9               	movwf	fsr2l,c
  4011  000082  0E00               	movlw	high InterruptHandlerHigh@buf
  4012  000084  20F4               	addwfc	prodh,w,c
  4013  000086  6EDA               	movwf	fsr2h,c
  4014  000088  C024  FFDF         	movff	InterruptHandlerHigh@RFIDa,indf2
  4015                           
  4016                           ;main_1.c: 242: counter++;
  4017  00008C  2A26               	incf	InterruptHandlerHigh@counter,f,c
  4018  00008E                     i2l1986:
  4019  00008E  0E0B               	movlw	11
  4020  000090  6426               	cpfsgt	InterruptHandlerHigh@counter,c
  4021  000092  D7EC               	goto	i2l1980
  4022                           
  4023                           ;main_1.c: 243: }
  4024                           ;main_1.c: 244: LCD_String(buf);
  4025  000094  0E16               	movlw	low InterruptHandlerHigh@buf
  4026  000096  6E05               	movwf	i2LCD_String@string,c
  4027  000098  0E00               	movlw	high InterruptHandlerHigh@buf
  4028  00009A  6E06               	movwf	i2LCD_String@string+1,c
  4029  00009C  ECF6  F007         	call	i2_LCD_String	;wreg free
  4030                           
  4031                           ;main_1.c: 245: state = 2 ;
  4032  0000A0  0E02               	movlw	2
  4033  0000A2  0101               	movlb	1	; () banked
  4034  0000A4  6FD4               	movwf	_state& (0+255),b	;volatile
  4035  0000A6                     i2l271:
  4036  0000A6  C015  FFF5         	movff	??_InterruptHandlerHigh+14,tablat
  4037  0000AA  C014  FFF8         	movff	??_InterruptHandlerHigh+13,tblptru
  4038  0000AE  C013  FFF7         	movff	??_InterruptHandlerHigh+12,tblptrh
  4039  0000B2  C012  FFF6         	movff	??_InterruptHandlerHigh+11,tblptrl
  4040  0000B6  C011  FFF4         	movff	??_InterruptHandlerHigh+10,prodh
  4041  0000BA  C010  FFF3         	movff	??_InterruptHandlerHigh+9,prodl
  4042  0000BE  C00F  FFDA         	movff	??_InterruptHandlerHigh+8,fsr2h
  4043  0000C2  C00E  FFD9         	movff	??_InterruptHandlerHigh+7,fsr2l
  4044  0000C6  C00D  FFE2         	movff	??_InterruptHandlerHigh+6,fsr1h
  4045  0000CA  C00C  FFE1         	movff	??_InterruptHandlerHigh+5,fsr1l
  4046  0000CE  C00B  FFEA         	movff	??_InterruptHandlerHigh+4,fsr0h
  4047  0000D2  C00A  FFE9         	movff	??_InterruptHandlerHigh+3,fsr0l
  4048  0000D6  C009  FFFB         	movff	??_InterruptHandlerHigh+2,pclatu
  4049  0000DA  C008  FFFA         	movff	??_InterruptHandlerHigh+1,pclath
  4050  0000DE  9239               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  4051  0000E0  0011               	retfie		f
  4052  0000E2                     __end_of_InterruptHandlerHigh:
  4053                           	opt stack 0
  4054                           pclatu	equ	0xFFB
  4055                           pclath	equ	0xFFA
  4056                           tblptru	equ	0xFF8
  4057                           tblptrh	equ	0xFF7
  4058                           tblptrl	equ	0xFF6
  4059                           tablat	equ	0xFF5
  4060                           prodh	equ	0xFF4
  4061                           prodl	equ	0xFF3
  4062                           intcon	equ	0xFF2
  4063                           postinc0	equ	0xFEE
  4064                           fsr0h	equ	0xFEA
  4065                           fsr0l	equ	0xFE9
  4066                           wreg	equ	0xFE8
  4067                           fsr1h	equ	0xFE2
  4068                           fsr1l	equ	0xFE1
  4069                           indf2	equ	0xFDF
  4070                           postinc2	equ	0xFDE
  4071                           postdec2	equ	0xFDD
  4072                           fsr2h	equ	0xFDA
  4073                           fsr2l	equ	0xFD9
  4074                           status	equ	0xFD8
  4075                           
  4076 ;; *************** function i2_LCD_String *****************
  4077 ;; Defined at:
  4078 ;;		line 100 in file "source_LCD.c"
  4079 ;; Parameters:    Size  Location     Type
  4080 ;;  string          2    4[COMRAM] PTR unsigned char 
  4081 ;;		 -> InterruptHandlerHigh@buf(12), buf1(16), 
  4082 ;; Auto vars:     Size  Location     Type
  4083 ;;		None
  4084 ;; Return value:  Size  Location     Type
  4085 ;;		None               void
  4086 ;; Registers used:
  4087 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4088 ;; Tracked objects:
  4089 ;;		On entry : 0/0
  4090 ;;		On exit  : 0/0
  4091 ;;		Unchanged: 0/0
  4092 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4093 ;;      Params:         2       0       0       0
  4094 ;;      Locals:         0       0       0       0
  4095 ;;      Temps:          0       0       0       0
  4096 ;;      Totals:         2       0       0       0
  4097 ;;Total ram usage:        2 bytes
  4098 ;; Hardware stack levels used:    1
  4099 ;; Hardware stack levels required when called:    3
  4100 ;; This function calls:
  4101 ;;		i2_SendLCD
  4102 ;; This function is called by:
  4103 ;;		_InterruptHandlerHigh
  4104 ;; This function uses a non-reentrant model
  4105 ;;
  4106                           
  4107                           	psect	text23
  4108  000FEC                     __ptext23:
  4109                           	opt stack 0
  4110  000FEC                     i2_LCD_String:
  4111                           	opt stack 22
  4112                           
  4113                           ;source_LCD.c: 102: while(*string != 0){
  4114                           
  4115                           ;incstack = 0
  4116  000FEC  D00F               	goto	i2l1834
  4117  000FEE                     i2l1828:
  4118                           
  4119                           ;source_LCD.c: 105: SendLCD(*string++,1);
  4120  000FEE  0E01               	movlw	1
  4121  000FF0  6E03               	movwf	i2SendLCD@type,c
  4122  000FF2  C005  FFD9         	movff	i2LCD_String@string,fsr2l
  4123  000FF6  C006  FFDA         	movff	i2LCD_String@string+1,fsr2h
  4124  000FFA  50DF               	movf	indf2,w,c
  4125  000FFC  EC0E  F008         	call	i2_SendLCD
  4126  001000  4A05               	infsnz	i2LCD_String@string,f,c
  4127  001002  2A06               	incf	i2LCD_String@string+1,f,c
  4128                           
  4129                           ;source_LCD.c: 106: _delay((unsigned long)((50)*(8000000/4000000.0)));
  4130  001004  0E21               	movlw	33
  4131  001006                     i2u165_47:
  4132  001006  2EE8               	decfsz	wreg,f,c
  4133  001008  D7FE               	goto	i2u165_47
  4134  00100A  F000               	nop	
  4135  00100C                     i2l1834:
  4136  00100C  C005  FFD9         	movff	i2LCD_String@string,fsr2l
  4137  001010  C006  FFDA         	movff	i2LCD_String@string+1,fsr2h
  4138  001014  50DF               	movf	indf2,w,c
  4139  001016  B4D8               	btfsc	status,2,c
  4140  001018  0012               	return	
  4141  00101A  D7E9               	goto	i2l1828
  4142  00101C                     __end_ofi2_LCD_String:
  4143                           	opt stack 0
  4144                           pclatu	equ	0xFFB
  4145                           pclath	equ	0xFFA
  4146                           tblptru	equ	0xFF8
  4147                           tblptrh	equ	0xFF7
  4148                           tblptrl	equ	0xFF6
  4149                           tablat	equ	0xFF5
  4150                           prodh	equ	0xFF4
  4151                           prodl	equ	0xFF3
  4152                           intcon	equ	0xFF2
  4153                           postinc0	equ	0xFEE
  4154                           fsr0h	equ	0xFEA
  4155                           fsr0l	equ	0xFE9
  4156                           wreg	equ	0xFE8
  4157                           fsr1h	equ	0xFE2
  4158                           fsr1l	equ	0xFE1
  4159                           indf2	equ	0xFDF
  4160                           postinc2	equ	0xFDE
  4161                           postdec2	equ	0xFDD
  4162                           fsr2h	equ	0xFDA
  4163                           fsr2l	equ	0xFD9
  4164                           status	equ	0xFD8
  4165                           
  4166 ;; *************** function i2_SendLCD *****************
  4167 ;; Defined at:
  4168 ;;		line 39 in file "source_LCD.c"
  4169 ;; Parameters:    Size  Location     Type
  4170 ;;  Byte            1    wreg     unsigned char 
  4171 ;;  type            1    2[COMRAM] unsigned char 
  4172 ;; Auto vars:     Size  Location     Type
  4173 ;;  Byte            1    3[COMRAM] unsigned char 
  4174 ;; Return value:  Size  Location     Type
  4175 ;;		None               void
  4176 ;; Registers used:
  4177 ;;		wreg, status,2, status,0, cstack
  4178 ;; Tracked objects:
  4179 ;;		On entry : 0/0
  4180 ;;		On exit  : 0/0
  4181 ;;		Unchanged: 0/0
  4182 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4183 ;;      Params:         1       0       0       0
  4184 ;;      Locals:         1       0       0       0
  4185 ;;      Temps:          0       0       0       0
  4186 ;;      Totals:         2       0       0       0
  4187 ;;Total ram usage:        2 bytes
  4188 ;; Hardware stack levels used:    1
  4189 ;; Hardware stack levels required when called:    2
  4190 ;; This function calls:
  4191 ;;		i2_LCDout
  4192 ;; This function is called by:
  4193 ;;		_InterruptHandlerHigh
  4194 ;;		i2_LCD_String
  4195 ;; This function uses a non-reentrant model
  4196 ;;
  4197                           
  4198                           	psect	text24
  4199  00101C                     __ptext24:
  4200                           	opt stack 0
  4201  00101C                     i2_SendLCD:
  4202                           	opt stack 23
  4203                           
  4204                           ;incstack = 0
  4205                           ;i2SendLCD@Byte stored from wreg
  4206  00101C  6E04               	movwf	i2SendLCD@Byte,c
  4207                           
  4208                           ;source_LCD.c: 40: LATAbits.LATA6 = type;
  4209  00101E  B003               	btfsc	i2SendLCD@type,0,c
  4210  001020  D002               	bra	i2u71_45
  4211  001022  9C89               	bcf	3977,6,c	;volatile
  4212  001024  D001               	bra	i2u71_46
  4213  001026                     i2u71_45:
  4214  001026  8C89               	bsf	3977,6,c	;volatile
  4215  001028                     i2u71_46:
  4216                           
  4217                           ;source_LCD.c: 42: LCDout((Byte & 0b11110000)>>4);
  4218  001028  3804               	swapf	i2SendLCD@Byte,w,c
  4219  00102A  0B0F               	andlw	15
  4220  00102C  0B0F               	andlw	15
  4221  00102E  EC51  F006         	call	i2_LCDout
  4222                           
  4223                           ;source_LCD.c: 43: _delay((unsigned long)((10)*(8000000/4000000.0)));
  4224  001032  0E06               	movlw	6
  4225  001034                     i2u166_47:
  4226  001034  2EE8               	decfsz	wreg,f,c
  4227  001036  D7FE               	goto	i2u166_47
  4228  001038  D000               	nop2		;nop
  4229                           
  4230                           ;source_LCD.c: 44: LCDout((Byte & 0b00001111));
  4231  00103A  5004               	movf	i2SendLCD@Byte,w,c
  4232  00103C  0B0F               	andlw	15
  4233  00103E  EC51  F006         	call	i2_LCDout
  4234  001042  0012               	return		;funcret
  4235  001044                     __end_ofi2_SendLCD:
  4236                           	opt stack 0
  4237                           pclatu	equ	0xFFB
  4238                           pclath	equ	0xFFA
  4239                           tblptru	equ	0xFF8
  4240                           tblptrh	equ	0xFF7
  4241                           tblptrl	equ	0xFF6
  4242                           tablat	equ	0xFF5
  4243                           prodh	equ	0xFF4
  4244                           prodl	equ	0xFF3
  4245                           intcon	equ	0xFF2
  4246                           postinc0	equ	0xFEE
  4247                           fsr0h	equ	0xFEA
  4248                           fsr0l	equ	0xFE9
  4249                           wreg	equ	0xFE8
  4250                           fsr1h	equ	0xFE2
  4251                           fsr1l	equ	0xFE1
  4252                           indf2	equ	0xFDF
  4253                           postinc2	equ	0xFDE
  4254                           postdec2	equ	0xFDD
  4255                           fsr2h	equ	0xFDA
  4256                           fsr2l	equ	0xFD9
  4257                           status	equ	0xFD8
  4258                           
  4259 ;; *************** function i2_LCDout *****************
  4260 ;; Defined at:
  4261 ;;		line 27 in file "source_LCD.c"
  4262 ;; Parameters:    Size  Location     Type
  4263 ;;  number          1    wreg     unsigned char 
  4264 ;; Auto vars:     Size  Location     Type
  4265 ;;  number          1    1[COMRAM] unsigned char 
  4266 ;; Return value:  Size  Location     Type
  4267 ;;		None               void
  4268 ;; Registers used:
  4269 ;;		wreg, status,2, status,0, cstack
  4270 ;; Tracked objects:
  4271 ;;		On entry : 0/0
  4272 ;;		On exit  : 0/0
  4273 ;;		Unchanged: 0/0
  4274 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4275 ;;      Params:         0       0       0       0
  4276 ;;      Locals:         1       0       0       0
  4277 ;;      Temps:          1       0       0       0
  4278 ;;      Totals:         2       0       0       0
  4279 ;;Total ram usage:        2 bytes
  4280 ;; Hardware stack levels used:    1
  4281 ;; Hardware stack levels required when called:    1
  4282 ;; This function calls:
  4283 ;;		i2_E_TOG
  4284 ;; This function is called by:
  4285 ;;		i2_SendLCD
  4286 ;; This function uses a non-reentrant model
  4287 ;;
  4288                           
  4289                           	psect	text25
  4290  000CA2                     __ptext25:
  4291                           	opt stack 0
  4292  000CA2                     i2_LCDout:
  4293                           	opt stack 23
  4294                           
  4295                           ;incstack = 0
  4296                           ;i2LCDout@number stored from wreg
  4297  000CA2  6E02               	movwf	i2LCDout@number,c
  4298                           
  4299                           ;source_LCD.c: 29: LATCbits.LATC1 = (number & 0b0001);
  4300  000CA4  C002  F001         	movff	i2LCDout@number,??i2_LCDout
  4301  000CA8  0E01               	movlw	1
  4302  000CAA  1601               	andwf	??i2_LCDout,f,c
  4303  000CAC  4601               	rlncf	??i2_LCDout,f,c
  4304  000CAE  508B               	movf	3979,w,c	;volatile
  4305  000CB0  1801               	xorwf	??i2_LCDout,w,c
  4306  000CB2  0BFD               	andlw	-3
  4307  000CB4  1801               	xorwf	??i2_LCDout,w,c
  4308  000CB6  6E8B               	movwf	3979,c	;volatile
  4309                           
  4310                           ;source_LCD.c: 30: LATCbits.LATC2 = (number & 0b0010)>>1;
  4311  000CB8  C002  F001         	movff	i2LCDout@number,??i2_LCDout
  4312  000CBC  90D8               	bcf	status,0,c
  4313  000CBE  3201               	rrcf	??i2_LCDout,f,c
  4314  000CC0  0E01               	movlw	1
  4315  000CC2  1601               	andwf	??i2_LCDout,f,c
  4316  000CC4  4601               	rlncf	??i2_LCDout,f,c
  4317  000CC6  4601               	rlncf	??i2_LCDout,f,c
  4318  000CC8  508B               	movf	3979,w,c	;volatile
  4319  000CCA  1801               	xorwf	??i2_LCDout,w,c
  4320  000CCC  0BFB               	andlw	-5
  4321  000CCE  1801               	xorwf	??i2_LCDout,w,c
  4322  000CD0  6E8B               	movwf	3979,c	;volatile
  4323                           
  4324                           ;source_LCD.c: 31: LATDbits.LATD0 = (number & 0b0100)>>2;
  4325  000CD2  C002  F001         	movff	i2LCDout@number,??i2_LCDout
  4326  000CD6  90D8               	bcf	status,0,c
  4327  000CD8  3201               	rrcf	??i2_LCDout,f,c
  4328  000CDA  90D8               	bcf	status,0,c
  4329  000CDC  3201               	rrcf	??i2_LCDout,f,c
  4330  000CDE  0E01               	movlw	1
  4331  000CE0  1601               	andwf	??i2_LCDout,f,c
  4332  000CE2  508C               	movf	3980,w,c	;volatile
  4333  000CE4  1801               	xorwf	??i2_LCDout,w,c
  4334  000CE6  0BFE               	andlw	-2
  4335  000CE8  1801               	xorwf	??i2_LCDout,w,c
  4336  000CEA  6E8C               	movwf	3980,c	;volatile
  4337                           
  4338                           ;source_LCD.c: 32: LATDbits.LATD1 = (number & 0b1000)>>3;
  4339  000CEC  C002  F001         	movff	i2LCDout@number,??i2_LCDout
  4340  000CF0  90D8               	bcf	status,0,c
  4341  000CF2  3201               	rrcf	??i2_LCDout,f,c
  4342  000CF4  90D8               	bcf	status,0,c
  4343  000CF6  3201               	rrcf	??i2_LCDout,f,c
  4344  000CF8  90D8               	bcf	status,0,c
  4345  000CFA  3201               	rrcf	??i2_LCDout,f,c
  4346  000CFC  0E01               	movlw	1
  4347  000CFE  1601               	andwf	??i2_LCDout,f,c
  4348  000D00  4601               	rlncf	??i2_LCDout,f,c
  4349  000D02  508C               	movf	3980,w,c	;volatile
  4350  000D04  1801               	xorwf	??i2_LCDout,w,c
  4351  000D06  0BFD               	andlw	-3
  4352  000D08  1801               	xorwf	??i2_LCDout,w,c
  4353  000D0A  6E8C               	movwf	3980,c	;volatile
  4354                           
  4355                           ;source_LCD.c: 34: E_TOG();
  4356  000D0C  EC6A  F008         	call	i2_E_TOG	;wreg free
  4357                           
  4358                           ;source_LCD.c: 35: _delay((unsigned long)((5)*(8000000/4000000.0)));
  4359  000D10  0E03               	movlw	3
  4360  000D12                     i2u167_47:
  4361  000D12  2EE8               	decfsz	wreg,f,c
  4362  000D14  D7FE               	goto	i2u167_47
  4363  000D16  F000               	nop	
  4364  000D18  0012               	return		;funcret
  4365  000D1A                     __end_ofi2_LCDout:
  4366                           	opt stack 0
  4367                           pclatu	equ	0xFFB
  4368                           pclath	equ	0xFFA
  4369                           tblptru	equ	0xFF8
  4370                           tblptrh	equ	0xFF7
  4371                           tblptrl	equ	0xFF6
  4372                           tablat	equ	0xFF5
  4373                           prodh	equ	0xFF4
  4374                           prodl	equ	0xFF3
  4375                           intcon	equ	0xFF2
  4376                           postinc0	equ	0xFEE
  4377                           fsr0h	equ	0xFEA
  4378                           fsr0l	equ	0xFE9
  4379                           wreg	equ	0xFE8
  4380                           fsr1h	equ	0xFE2
  4381                           fsr1l	equ	0xFE1
  4382                           indf2	equ	0xFDF
  4383                           postinc2	equ	0xFDE
  4384                           postdec2	equ	0xFDD
  4385                           fsr2h	equ	0xFDA
  4386                           fsr2l	equ	0xFD9
  4387                           status	equ	0xFD8
  4388                           
  4389 ;; *************** function i2_E_TOG *****************
  4390 ;; Defined at:
  4391 ;;		line 20 in file "source_LCD.c"
  4392 ;; Parameters:    Size  Location     Type
  4393 ;;		None
  4394 ;; Auto vars:     Size  Location     Type
  4395 ;;		None
  4396 ;; Return value:  Size  Location     Type
  4397 ;;		None               void
  4398 ;; Registers used:
  4399 ;;		wreg
  4400 ;; Tracked objects:
  4401 ;;		On entry : 0/0
  4402 ;;		On exit  : 0/0
  4403 ;;		Unchanged: 0/0
  4404 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4405 ;;      Params:         0       0       0       0
  4406 ;;      Locals:         0       0       0       0
  4407 ;;      Temps:          0       0       0       0
  4408 ;;      Totals:         0       0       0       0
  4409 ;;Total ram usage:        0 bytes
  4410 ;; Hardware stack levels used:    1
  4411 ;; This function calls:
  4412 ;;		Nothing
  4413 ;; This function is called by:
  4414 ;;		i2_LCDout
  4415 ;; This function uses a non-reentrant model
  4416 ;;
  4417                           
  4418                           	psect	text26
  4419  0010D4                     __ptext26:
  4420                           	opt stack 0
  4421  0010D4                     i2_E_TOG:
  4422                           	opt stack 23
  4423                           
  4424                           ;source_LCD.c: 21: LATCbits.LATC0=1;
  4425                           
  4426                           ;incstack = 0
  4427  0010D4  808B               	bsf	3979,0,c	;volatile
  4428                           
  4429                           ;source_LCD.c: 22: _delay((unsigned long)((5)*(8000000/4000000.0)));
  4430  0010D6  0E03               	movlw	3
  4431  0010D8                     i2u168_47:
  4432  0010D8  2EE8               	decfsz	wreg,f,c
  4433  0010DA  D7FE               	goto	i2u168_47
  4434  0010DC  F000               	nop	
  4435                           
  4436                           ;source_LCD.c: 23: LATCbits.LATC0=0;
  4437  0010DE  908B               	bcf	3979,0,c	;volatile
  4438  0010E0  0012               	return		;funcret
  4439  0010E2                     __end_ofi2_E_TOG:
  4440                           	opt stack 0
  4441                           pclatu	equ	0xFFB
  4442                           pclath	equ	0xFFA
  4443                           tblptru	equ	0xFF8
  4444                           tblptrh	equ	0xFF7
  4445                           tblptrl	equ	0xFF6
  4446                           tablat	equ	0xFF5
  4447                           prodh	equ	0xFF4
  4448                           prodl	equ	0xFF3
  4449                           intcon	equ	0xFF2
  4450                           postinc0	equ	0xFEE
  4451                           fsr0h	equ	0xFEA
  4452                           fsr0l	equ	0xFE9
  4453                           wreg	equ	0xFE8
  4454                           fsr1h	equ	0xFE2
  4455                           fsr1l	equ	0xFE1
  4456                           indf2	equ	0xFDF
  4457                           postinc2	equ	0xFDE
  4458                           postdec2	equ	0xFDD
  4459                           fsr2h	equ	0xFDA
  4460                           fsr2l	equ	0xFD9
  4461                           status	equ	0xFD8
  4462                           
  4463 ;; *************** function _getCharSerial *****************
  4464 ;; Defined at:
  4465 ;;		line 118 in file "source_LCD.c"
  4466 ;; Parameters:    Size  Location     Type
  4467 ;;		None
  4468 ;; Auto vars:     Size  Location     Type
  4469 ;;		None
  4470 ;; Return value:  Size  Location     Type
  4471 ;;                  1    wreg      unsigned char 
  4472 ;; Registers used:
  4473 ;;		wreg, status,2
  4474 ;; Tracked objects:
  4475 ;;		On entry : 0/0
  4476 ;;		On exit  : 0/0
  4477 ;;		Unchanged: 0/0
  4478 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4479 ;;      Params:         0       0       0       0
  4480 ;;      Locals:         0       0       0       0
  4481 ;;      Temps:          0       0       0       0
  4482 ;;      Totals:         0       0       0       0
  4483 ;;Total ram usage:        0 bytes
  4484 ;; Hardware stack levels used:    1
  4485 ;; This function calls:
  4486 ;;		Nothing
  4487 ;; This function is called by:
  4488 ;;		_InterruptHandlerHigh
  4489 ;; This function uses a non-reentrant model
  4490 ;;
  4491                           
  4492                           	psect	text27
  4493  0010E2                     __ptext27:
  4494                           	opt stack 0
  4495  0010E2                     _getCharSerial:
  4496                           	opt stack 25
  4497  0010E2                     i2l68:
  4498  0010E2  AA9E               	btfss	3998,5,c	;volatile
  4499  0010E4  D7FE               	goto	i2l68
  4500                           
  4501                           ;source_LCD.c: 120: return RCREG;
  4502  0010E6  50AE               	movf	4014,w,c	;volatile
  4503  0010E8  0012               	return	
  4504  0010EA                     __end_of_getCharSerial:
  4505                           	opt stack 0
  4506                           pclatu	equ	0xFFB
  4507                           pclath	equ	0xFFA
  4508                           tblptru	equ	0xFF8
  4509                           tblptrh	equ	0xFF7
  4510                           tblptrl	equ	0xFF6
  4511                           tablat	equ	0xFF5
  4512                           prodh	equ	0xFF4
  4513                           prodl	equ	0xFF3
  4514                           intcon	equ	0xFF2
  4515                           postinc0	equ	0xFEE
  4516                           fsr0h	equ	0xFEA
  4517                           fsr0l	equ	0xFE9
  4518                           wreg	equ	0xFE8
  4519                           fsr1h	equ	0xFE2
  4520                           fsr1l	equ	0xFE1
  4521                           indf2	equ	0xFDF
  4522                           postinc2	equ	0xFDE
  4523                           postdec2	equ	0xFDD
  4524                           fsr2h	equ	0xFDA
  4525                           fsr2l	equ	0xFD9
  4526                           status	equ	0xFD8
  4527                           pclatu	equ	0xFFB
  4528                           pclath	equ	0xFFA
  4529                           tblptru	equ	0xFF8
  4530                           tblptrh	equ	0xFF7
  4531                           tblptrl	equ	0xFF6
  4532                           tablat	equ	0xFF5
  4533                           prodh	equ	0xFF4
  4534                           prodl	equ	0xFF3
  4535                           intcon	equ	0xFF2
  4536                           postinc0	equ	0xFEE
  4537                           fsr0h	equ	0xFEA
  4538                           fsr0l	equ	0xFE9
  4539                           wreg	equ	0xFE8
  4540                           fsr1h	equ	0xFE2
  4541                           fsr1l	equ	0xFE1
  4542                           indf2	equ	0xFDF
  4543                           postinc2	equ	0xFDE
  4544                           postdec2	equ	0xFDD
  4545                           fsr2h	equ	0xFDA
  4546                           fsr2l	equ	0xFD9
  4547                           status	equ	0xFD8
  4548                           
  4549                           	psect	rparam
  4550  0000                     pclatu	equ	0xFFB
  4551                           pclath	equ	0xFFA
  4552                           tblptru	equ	0xFF8
  4553                           tblptrh	equ	0xFF7
  4554                           tblptrl	equ	0xFF6
  4555                           tablat	equ	0xFF5
  4556                           prodh	equ	0xFF4
  4557                           prodl	equ	0xFF3
  4558                           intcon	equ	0xFF2
  4559                           postinc0	equ	0xFEE
  4560                           fsr0h	equ	0xFEA
  4561                           fsr0l	equ	0xFE9
  4562                           wreg	equ	0xFE8
  4563                           fsr1h	equ	0xFE2
  4564                           fsr1l	equ	0xFE1
  4565                           indf2	equ	0xFDF
  4566                           postinc2	equ	0xFDE
  4567                           postdec2	equ	0xFDD
  4568                           fsr2h	equ	0xFDA
  4569                           fsr2l	equ	0xFD9
  4570                           status	equ	0xFD8
  4571                           
  4572                           	psect	temp
  4573  000039                     btemp:
  4574                           	opt stack 0
  4575  000039                     	ds	1
  4576  0000                     int$flags	set	btemp
  4577                           pclatu	equ	0xFFB
  4578                           pclath	equ	0xFFA
  4579                           tblptru	equ	0xFF8
  4580                           tblptrh	equ	0xFF7
  4581                           tblptrl	equ	0xFF6
  4582                           tablat	equ	0xFF5
  4583                           prodh	equ	0xFF4
  4584                           prodl	equ	0xFF3
  4585                           intcon	equ	0xFF2
  4586                           postinc0	equ	0xFEE
  4587                           fsr0h	equ	0xFEA
  4588                           fsr0l	equ	0xFE9
  4589                           wreg	equ	0xFE8
  4590                           fsr1h	equ	0xFE2
  4591                           fsr1l	equ	0xFE1
  4592                           indf2	equ	0xFDF
  4593                           postinc2	equ	0xFDE
  4594                           postdec2	equ	0xFDD
  4595                           fsr2h	equ	0xFDA
  4596                           fsr2l	equ	0xFD9
  4597                           status	equ	0xFD8


Data Sizes:
    Strings     8
    Constant    10
    Data        0
    BSS         35
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     38      56
    BANK0           160     33      33
    BANK1           256    212     229
    BANK2           256      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_1(CODE[8]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 16
		 -> buf1(BANK1[16]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    fullSpeedBack@m_L.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedBack@m_L.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedBack@m_L	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(COMRAM[9]), 

    fullSpeedBack@m_R.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedBack@m_R.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedBack@m_R	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(COMRAM[9]), 

    fullSpeedAhead@m_L.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedAhead@m_L.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedAhead@m_L	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(COMRAM[9]), 

    fullSpeedAhead@m_R.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedAhead@m_R.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedAhead@m_R	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(COMRAM[9]), 

    turnRight@m_L.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@m_L.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@m_L	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(COMRAM[9]), 

    turnRight@m_R.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@m_R.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@m_R	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(COMRAM[9]), 

    turnLeft@m_R.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnLeft@m_R.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnLeft@m_R	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(COMRAM[9]), 

    turnLeft@m_L.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnLeft@m_L.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnLeft@m_L	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(COMRAM[9]), 

    stop@m_R.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@m_R.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@m_R	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(COMRAM[9]), 

    stop@m_L.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@m_L.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@m_L	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(COMRAM[9]), 

    setMotorFullSpeed@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorFullSpeed@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorPWM@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(COMRAM[9]), motorL(COMRAM[9]), 

    motorR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    motorR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    S603DC_motor$dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    motorL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    S603DC_motor$dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    motorL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    LCD_String@string	PTR unsigned char  size(2) Largest target is 16
		 -> InterruptHandlerHigh@buf(COMRAM[12]), buf1(BANK1[16]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _InterruptHandlerHigh in COMRAM

    _InterruptHandlerHigh->i2_LCD_String
    i2_LCD_String->i2_SendLCD
    i2_SendLCD->i2_LCDout

Critical Paths under _main in BANK0

    _main->_fullSpeedAhead
    _main->_fullSpeedBack
    _main->_turnLeft
    _main->_turnRight
    _turnRight->_stop
    _turnLeft->_stop
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _initMotor->_setMotorPWM
    _fullSpeedBack->_stop
    _fullSpeedAhead->_stop
    _stop->_setMotorPWM
    _setMotorPWM->___awdiv
    ___awdiv->___wmul
    _SetLine->_SendLCD
    _LCD_String->_SendLCD
    _LCD_Init->_SendLCD
    _LCD_Clear->_SendLCD
    _SendLCD->_LCDout

Critical Paths under _InterruptHandlerHigh in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _InterruptHandlerHigh in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _InterruptHandlerHigh in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               243   243      0   38451
                                             30 BANK0      3     3      0
                                              0 BANK1    212   212      0
                          _LCD_Clear
                           _LCD_Init
                         _LCD_String
                            _SetLine
                     _fullSpeedAhead
                      _fullSpeedBack
                           _initBITS
                          _initMotor
                            _initPWM
                            _sprintf
                               _stop
                           _turnLeft
                          _turnRight
 ---------------------------------------------------------------------------------
 (1) _turnRight                                            5     1      4    6466
                                             25 BANK0      5     1      4
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (1) _turnLeft                                             5     1      4    6466
                                             25 BANK0      5     1      4
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             22    16      6    1501
                                             12 BANK0     13     7      6
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     386
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     395
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) _initPWM                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initMotor                                            0     0      0    2585
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _initBITS                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _fullSpeedBack                                        5     1      4    6497
                                             25 BANK0      5     1      4
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (1) _fullSpeedAhead                                       5     1      4    6497
                                             25 BANK0      5     1      4
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (2) _stop                                                 4     0      4    3541
                                             21 BANK0      4     0      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _setMotorPWM                                          7     5      2    2585
                                             14 BANK0      7     5      2
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     464
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4     677
                                              6 BANK0      8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _SetLine                                              1     1      0    1014
                                              4 BANK0      1     1      0
                            _SendLCD
 ---------------------------------------------------------------------------------
 (1) _LCD_String                                           2     0      2    1136
                                              4 BANK0      2     0      2
                            _SendLCD
 ---------------------------------------------------------------------------------
 (1) _LCD_Init                                             1     1      0    1076
                                              4 BANK0      1     1      0
                             _LCDout
                            _SendLCD
 ---------------------------------------------------------------------------------
 (1) _LCD_Clear                                            1     1      0     952
                                              4 BANK0      1     1      0
                            _SendLCD
 ---------------------------------------------------------------------------------
 (2) _SendLCD                                              2     1      1     952
                                              2 BANK0      2     1      1
                             _LCDout
 ---------------------------------------------------------------------------------
 (3) _LCDout                                               2     2      0     124
                                              0 BANK0      2     2      0
                              _E_TOG
 ---------------------------------------------------------------------------------
 (4) _E_TOG                                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _InterruptHandlerHigh                                32    32      0     625
                                              6 COMRAM    32    32      0
                      _getCharSerial
                       i2_LCD_String
                          i2_SendLCD
 ---------------------------------------------------------------------------------
 (6) i2_LCD_String                                         2     0      2     277
                                              4 COMRAM     2     0      2
                          i2_SendLCD
 ---------------------------------------------------------------------------------
 (6) i2_SendLCD                                            2     1      1     206
                                              2 COMRAM     2     1      1
                           i2_LCDout
 ---------------------------------------------------------------------------------
 (7) i2_LCDout                                             2     2      0      88
                                              0 COMRAM     2     2      0
                            i2_E_TOG
 ---------------------------------------------------------------------------------
 (8) i2_E_TOG                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _getCharSerial                                        0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCD_Clear
     _SendLCD
       _LCDout
         _E_TOG
   _LCD_Init
     _LCDout
       _E_TOG
     _SendLCD
       _LCDout
         _E_TOG
   _LCD_String
     _SendLCD
       _LCDout
         _E_TOG
   _SetLine
     _SendLCD
       _LCDout
         _E_TOG
   _fullSpeedAhead
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul
     _stop
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _fullSpeedBack
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul
     _stop
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _initBITS
   _initMotor
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul
   _initPWM
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
   _stop
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul
   _turnLeft
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul
     _stop
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _turnRight
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul
     _stop
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul

 _InterruptHandlerHigh (ROOT)
   _getCharSerial
   i2_LCD_String
     i2_SendLCD
       i2_LCDout
         i2_E_TOG
   i2_SendLCD
     i2_LCDout
       i2_E_TOG

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2FF      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     D4      E5       7       89.5%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     21      21       5       20.6%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     26      38       1       59.6%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     13E       3        0.0%
DATA                 0      0     13E      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.35 build -356382666 
Symbol Table                                                                                   Mon Mar 19 23:46:17 2018

                           l74 1072                   ___awdiv@sign 006B              fullSpeedAhead@m_L 0079  
            fullSpeedAhead@m_R 007B            ___wmul@multiplicand 0062                    ?_LCD_String 0064  
                          l240 03B2                            l235 0336                            l290 0850  
                          l709 0EB8                            l699 0C98                            prod 000FF3  
                          wreg 000FE8                           l2012 09EC                           l2100 0C5A  
                         l2024 0A20                           l2040 0A70                           l2120 0E86  
                         l2026 0A2C                           l2018 0A02                           l2044 0A84  
                         l2036 0A62                           l2028 0A32                           l2060 06AE  
                         l2108 0C8A                           l2124 0EAA                           l2116 0E74  
                         l2070 0760                           l2118 0E80                           l2310 08B2  
                         l2214 0DE4                           l2230 0D76                           l2304 0856  
                         l2312 08BE                           l2208 0DB8                           l2224 0D4A  
                         l2058 065E                           l2242 0BEC                           l2314 08DA  
                         l2410 0494                           l2172 0F48                           l2260 0B6C  
                         l2420 04CA                           l2412 049A                           l2404 046A  
                         l2182 0FAC                           l2414 04B8                           l2176 0F8A  
                         l2168 0F32                           l2248 0C18                           l2096 0C48  
                         l2280 07CC                           l2272 07A6                           l2432 0536  
                         l2266 0B98                           l2098 0C54                           l2426 0502  
                         l2450 05AA                           l2292 081A                           l2284 07D4  
                         l2444 0586                           l2380 03C4                           l2372 037C  
                         l2286 07FA                           l2278 07C4                           l2438 0576  
                         l2368 0366                           l2378 03A2                           STR_1 030B  
                         u1134 0750                           u1135 074A                           u1144 0786  
                         u1145 0780                           u1155 0FCA                           u1156 0FCC  
                         _LATA 000F89                           _LATB 000F8A                           _LATC 000F8B  
                         _LATD 000F8C                           u1507 0526                           u1517 0F4A  
                         u1607 09B8                           u1527 0FA6                           u1617 109E  
                         u1537 0908                           u1627 0FDA                           u1547 0920  
                         u1637 0B22                           u1557 0930                           u1647 10CA  
                         u1567 093E                           u1577 095E                           u1497 04F8  
                  main@counter 01CA                           u1587 097C                           u1597 099A  
                         i2l68 10E2                __end_ofi2_E_TOG 10E2                           _buf1 01D5  
                         _main 0314             __size_of_LCD_Clear 0020                           fsr0h 000FEA  
                         fsr1h 000FE2                           fsr0l 000FE9                           fsr2h 000FDA  
                         fsr1l 000FE1                           indf2 000FDF                           fsr2l 000FD9  
                         btemp 0039                           _stop 0EC2                           pclat 000FFA  
                         prodh 000FF4                           prodl 000FF3                           start 00E2  
                 ___param_bank 000010                __end_of_SendLCD 0FEC                __end_of_SetLine 0F52  
             __end_of_LCD_Init 09D0                          ?_main 0001                __end_of___awdiv 0A8E  
                        ?_stop 0075                ___awdiv@divisor 0068                          _PDC0H 000F78  
                        _PDC1H 000F76                          _PDC0L 000F79                          _PDC1L 000F77  
              __end_of___lwdiv 0CA2                __end_of___lwmod 0EC2                          i2l271 00A6  
              ___awdiv@counter 006A                          _RCREG 000FAE                          _E_TOG 10C6  
             __end_ofi2_LCDout 0D1A                          _SPBRG 000FAF                          _TRISA 000F92  
                        _TRISB 000F93                          _TRISC 000F94                          _TRISD 000F95  
              __end_of_initPWM 10C6                __end_of_dpowers 030B                          _state 01D4  
                        main@i 01D2                          main@j 01CB                          main@k 01CF  
           __size_ofi2_SendLCD 0028                          tablat 000FF5                          status 000FD8  
          __size_of_LCD_String 0034                __end_of_sprintf 08E8                __initialization 1044  
                 __end_of_main 05C4                   __end_of_stop 0F18                 __CFG_OSC$IRCIO 000000  
             LCD_String@string 0064                         ??_main 007E                         ??_stop 0027  
            __end_of_LCD_Clear 10AA                  __activetblptr 000002                         ?_E_TOG 0001  
                    ??i2_E_TOG 0001                   ?_setMotorPWM 006E         __size_of_fullSpeedBack 0080  
             ___awdiv@dividend 0066                         _ANSEL0 000FB8                         _ANSEL1 000FB9  
                       i2l1834 100C                         i2l1828 0FEE                         i2l1980 006C  
                       i2l1986 008E                         _LCDout 0A8E                    SendLCD@Byte 0063  
                       _OSCCON 000FD3          __end_of_getCharSerial 10EA                         _PTCON0 000F7F  
                       _PTCON1 000F7E                         _SPBRGH 000FB0                         _PTPERH 000F7A  
                       _PTPERL 000F7B                    SendLCD@type 0062                      ??_SendLCD 0027  
                    ??_SetLine 0027                         ___wmul 0F52               __end_of_initBITS 108A  
                    ??___awdiv 0027                      ??___lwdiv 0027                      ??___lwmod 0027  
                       clear_0 104A                         clear_1 1056               ___awdiv@quotient 006C  
            __end_ofi2_SendLCD 1044                  ?i2_LCD_String 0005                         _motorL 0027  
                       _motorR 0030                      ??_initPWM 0027                   __mediumconst 0000  
                       tblptrh 000FF7                         tblptrl 000FF6                         tblptru 000FF8  
                    ??_sprintf 0027               __end_of_turnLeft 0DF6                     __accesstop 0060  
      __end_of__initialization 105C                      ?_LCD_Init 0001                  ___rparam_used 000001  
                  SetLine@line 0064                  __end_of_E_TOG 10D4                      ?i2_LCDout 0001  
               __pcstackCOMRAM 0001                  _fullSpeedBack 0B2A                 ??i2_LCD_String 0007  
                 ??_LCD_String 0027                        ??_E_TOG 0027  __size_of_InterruptHandlerHigh 00DA  
                   __pbssBANK1 01D4                        ?_LCDout 0001                     ??_LCD_Init 0064  
           __size_of_initMotor 006A             __end_of_LCD_String 0FBC                     ??i2_LCDout 0001  
               ?_fullSpeedBack 0079                        ?___wmul 0060                        _CAP1CON 000F63  
      __size_of_fullSpeedAhead 0080                        i2_E_TOG 10D4                        i2u71_45 1026  
                      i2u71_46 1028                        _PWMCON0 000F6F                        _PWMCON1 000F6E  
                    ?_initBITS 0001           __size_of_setMotorPWM 01D4                __size_of_LCDout 009C  
           __size_of_turnRight 006E                        _SendLCD 0FBC                        __Hparam 0000  
                      _SetLine 0F18                        __Lparam 0000                        ___awdiv 09D0  
              __size_of___wmul 0036                        ___lwdiv 0C2A                        ___lwmod 0E60  
                 __psmallconst 0300                        __pcinit 1044                        __ramtop 0300  
                    ?_turnLeft 0079                        __ptext0 0314                        __ptext1 0D1A  
                      __ptext2 0D88                        __ptext3 0798                        __ptext4 0E60  
                      __ptext5 0C2A                        __ptext6 10AA                        __ptext7 0DF6  
                      __ptext8 106A                        __ptext9 0B2A              __end_of_initMotor 0E60  
                      _initPWM 10AA                        _dpowers 0301                   LCDout@number 0061  
                    _T5CONbits 000FB7                      _LCD_Clear 108A                        main@LOG 0100  
                      _sprintf 0798                        main@num 01C8           end_of_initialization 105C  
                   ??_initBITS 0027             setMotorPWM@PWMduty 0073           __end_ofi2_LCD_String 101C  
                __Lmediumconst 0000                ??_fullSpeedBack 007D                   turnRight@m_L 0079  
                 turnRight@m_R 007B                      _RCSTAbits 000FAB                        postdec2 000FDD  
                      postinc0 000FEE                        postinc2 000FDE                        stop@m_L 0075  
                      stop@m_R 0077                     ??_turnLeft 007D              __end_of_turnRight 0D88  
                    i2_SendLCD 101C             i2LCD_String@string 0005                      _TRISAbits 000F92  
                    _TRISBbits 000F93               fullSpeedBack@m_L 0079               fullSpeedBack@m_R 007B  
                   ?_LCD_Clear 0001                 __end_of_LCDout 0B2A                      _TXSTAbits 000FAC  
            __size_of_LCD_Init 00E8              __size_ofi2_LCDout 0078                 _fullSpeedAhead 0BAA  
               __end_of___wmul 0F88                    _BAUDCONbits 000FAA         __size_of_getCharSerial 0008  
                   ?i2_SendLCD 0003            start_initialization 1044      InterruptHandlerHigh@RFIDa 0024  
                     ??_LCDout 0060   __end_of_InterruptHandlerHigh 00E2         __end_of_fullSpeedAhead 0C2A  
                     ??___wmul 0027                    __pbssCOMRAM 0027                  __pcstackBANK0 0060  
                __pcstackBANK1 0100                       ?i2_E_TOG 0001                    ??_LCD_Clear 0064  
        __size_ofi2_LCD_String 0030                 i2LCDout@number 0002                    sprintf@flag 0072  
                  sprintf@prec 0077                  _getCharSerial 10E2              __size_of_initBITS 0020  
                     ?_SendLCD 0062                       ?_SetLine 0001               ___lwdiv@dividend 0060  
              ?_fullSpeedAhead 0079                      __pintcode 0008                       ?___awdiv 0066  
                     ?___lwdiv 0060                       ?___lwmod 0067                   i2_LCD_String 0FEC  
                     _CAP1BUFH 000F69                       _CAP1BUFL 000F68                       ?_initPWM 0001  
                  __smallconst 0300                 __size_of_E_TOG 000E              __size_of_turnLeft 006E  
                  ??i2_SendLCD 0004                  ??_setMotorPWM 0070                      _initMotor 0DF6  
             ___lwdiv@quotient 0065                       ?_sprintf 006C                    turnLeft@m_L 0079  
                  turnLeft@m_R 007B                 ?_getCharSerial 0001                       _LCD_Init 08E8  
               ___wmul@product 0064                       _LATAbits 000F89                       _LATCbits 000F8B  
                     _LATDbits 000F8C                       _PIE1bits 000F9D                       i2u165_47 1006  
                     i2u166_47 1034                       i2u167_47 0D12                       i2u168_47 10D8  
                     _PIR1bits 000F9E                       i2_LCDout 0CA2                       _RCONbits 000FD0  
      InterruptHandlerHigh@buf 0016        InterruptHandlerHigh@num 0022              ___wmul@multiplier 0060  
                 setMotorPWM@m 006E           _InterruptHandlerHigh 0008                     ?_initMotor 0001  
                    _turnRight 0D1A               __size_ofi2_E_TOG 000E                  i2SendLCD@Byte 0004  
          __end_of_setMotorPWM 0798                  i2SendLCD@type 0003                       __Hrparam 0000  
             __size_of_SendLCD 0030                       __Lrparam 0000          __end_of_fullSpeedBack 0BAA  
             __size_of_SetLine 003A               __size_of___awdiv 00BE               __size_of___lwdiv 0078  
             __size_of___lwmod 0062          ?_InterruptHandlerHigh 0001                     sprintf@val 0075  
             __size_of_initPWM 001C                ___lwdiv@divisor 0062                ___lwdiv@counter 0064  
                   ?_turnRight 0079                       __ptext10 0BAA                       __ptext11 0EC2  
                     __ptext20 0A8E                       __ptext12 05C4                       __ptext21 10C6  
                     __ptext13 0F52                       __ptext14 09D0                       __ptext23 0FEC  
                     __ptext15 0F18                       __ptext24 101C                       __ptext16 0F88  
                     __ptext25 0CA2                       __ptext17 08E8                       __ptext26 10D4  
                     __ptext18 108A                       __ptext27 10E2                       __ptext19 0FBC  
              ??_getCharSerial 0001               __size_of_sprintf 0150                       _initBITS 106A  
                __size_of_main 02B0                  __size_of_stop 0056                       main@FLIP 01D1  
                     int$flags 0039                     _LCD_String 0F88                       _turnLeft 0D88  
                   _INTCONbits 000FF2                    ??_initMotor 0027                    _setMotorPWM 05C4  
  InterruptHandlerHigh@counter 0026                       intlevel2 0000                      sprintf@ap 0073  
                    sprintf@sp 006C               ___lwmod@dividend 0067               ??_fullSpeedAhead 007D  
                   _OSCCONbits 000FD3         ??_InterruptHandlerHigh 0007                       sprintf@c 0078  
                     sprintf@f 006E                ___lwmod@divisor 0069                ___lwmod@counter 006B  
                  main@CAP1BUF 01CD                    ??_turnRight 007D  
